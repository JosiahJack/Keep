//=============================================================================
//       ___  ___  __            __   __  
// |__/ |__  |__  |__)     |\/| /  \ |  \
// |  \ |___ |___ |        |  | \__/ |__/                                                    
//
// Compiled by W. Josiah Jack, aka Qmaster
//
// Attributions: Qmaster, Arcane Dimensions (AD), id1
//
//
// Distribution / Copyright / Permissions 
//
// Please do not use any of these assets in ANY COMMERCIAL PROJECT.
// and remember to give credit if you use any of these assets. Please credit
// the appropriate authors of the various content used.  Refer to the credits
// folder.
//				  
// The QC files in this MOD are based on 1.06 source files by ID Software.
// These files are released under the terms of GNU General Public License v2 or
// later. You may use the source files as a base to build your own MODs as long
// as you release them under the same license and make the source available.
// Please also give proper credit. Check http://www.gnu.org for details.
//
// Quake is a registered trademark of id Software, Inc.
//
// All of these resources may be electronically distributed only at 
// NO CHARGE to the recipient.
//
// Stats:
// Entity count: 0
// Function count: 17
//
// Implements: HUD, Vanilla Style
//
// Description:
// Standard HUD presentation following vanilla layout, but augmented to show
// all that Keep has to offer // TODO: someday, need to add all the weapons
//=============================================================================

// float IT_NOWEAPON			= 0;		// No extra mod weapon (blank)
//=======================================SELF.ITEMS1======================================================
float IT_SHOTGUN    		= 1.000;		//0  Correct for standard HUD & HIP & DOE			W
float IT_SUPER_SHOTGUN   	= 2.000;		//1  Correct for standard HUD & HIP & DOE			W
float IT_NAILGUN    		= 4.000;		//2  Correct for standard HUD & HIP & DOE			W
float IT_SUPER_NAILGUN    	= 8.000;		//3  Correct for standard HUD & HIP & DOE			W
float IT_GRENADE_LAUNCHER   = 16.000;		//4  Correct for standard HUD & HIP & DOE			W
float IT_ROCKET_LAUNCHER    = 32.000;		//5  Correct for standard HUD & HIP & DOE			W
float IT_LIGHTNING    		= 64.000;		//6  Correct for standard HUD & HIP & DOE			W
// float IT_SHELLS    			= 128.000;		//7  Correct for DOE HUD					I
// float IT_NAILS    			= 256.000;		//8  Correct for DOE HUD					I
// float IT_ROCKETS    		= 512.000;		//9 Correct for DOE HUD					I
// float IT_CELLS    			= 1024.000;		//10 Correct for DOE HUD					I
float IT_AXE    			= 2048.000;		//11 Correct for DOE HUD					W
float IT_LAVA_NAILGUN    	= 4096.000;		//12 Correct for DOE HUD (okay for standard and HIP)	W
float IT_LAVA_SUPER_NAILGUN = 8192.000;		//13 Correct for DOE HUD (okay for standard and HIP)	W
float IT_MULTI_GRENADE    	= 16384.000;	//14 Correct for DOE HUD (okay for standard and HIP)	W
float IT_MULTI_ROCKET    	= 32768.000;	//15 Correct for DOE HUD (okay for standard and HIP)	W
float IT_PLASMA_GUN   	 	= 65536.000;	//16 Correct for DOE HUD					W
float IT_KEY1    			= 131072.000;	//17 Correct for standard HUD & HIP & DOE			I
float IT_KEY2    			= 262144.000;	//18 Correct for standard HUD & HIP & DOE			I
float IT_INVISIBILITY    	= 524288.000;	//19 Correct for standard HUD & HIP & DOE			I
float IT_INVULNERABILITY    = 1048576.000;	//20 Correct for standard HUD & HIP & DOE			I
float IT_SUIT    			= 2097152.000;	//21 Correct for standard HUD & HIP & DOE			I
float IT_QUAD    			= 4194304.000;	//22 Correct for standard HUD & HIP & DOE			I
float IT_CROSSBOW  			= 8388608.000;	//23 Correct for DOE HUD					W

// IT_INVISIBILITY + IT_INVULNERABILITY + IT_SUIT + IT_QUAD
// 524288 + 1048576 + 2097152 + 4194304
float ALL_ITEMSARTIFACTS = IT_INVISIBILITY + IT_INVULNERABILITY + IT_SUIT + IT_QUAD; // All cshift items
//=======================================SELF.ITEMS2======================================================
float IT2_ARMOR1    		= 1.000;		//0  Correct for DOE HUD					I
float IT2_ARMOR2    		= 2.000;		//1  Correct for DOE HUD					I
float IT2_ARMOR3    		= 4.000;		//2  Correct for DOE HUD					I
// float IT2_LAVA_NAILS    	= 8.000;		//3  Correct for DOE HUD					I
// float IT2_PLASMA_AMMO   	= 16.000;		//4  Correct for DOE HUD					I
// float IT2_MULTI_ROCKETS    	= 32.000;		//5  Correct for DOE HUD					I
float IT2_SHIELD    		= 64.000;		//6  Correct for DOE HUD					I
float IT2_CHAINLIGHTNING	= 128.000;		//7  Zerstorer chain lightning				W	(I Antigrav for DOE HUD)
float IT2_SUPERHEALTH    	= 256.000;		//8  Correct for DOE HUD					I
float IT2_EARTHQUAKE    	= 512.000;		//9  Correct for DOE HUD					I
float IT2_V_SPHERE    		= 1024.000;		//10 Correct for DOE HUD					I
// float IT2_BOLTS		    	= 2048.000;		//11 Keep specific						I
// float IT2_POISON    		= 4096.000;		//12 Keep specific						I
float HIP_IT2_WETSUIT    	= 8192.000;		//13 Keep specific (modified from HIP)			I
float HIP_IT2_EMPATHY_SHIELDS= 16384.000;	//14 Keep specific (modified from HIP)			I
float HIP_IT2_HORN_OF_CONJURING= 32768.000;	//15 Keep specific (modified from HIP)			I
float IT2_KEY_SKELETON		= 65536.000;	//16 Keep's Skeleton Key
float IT2_PROXIMITY_GUN    	= 131072.000;	//17 Keep specific.Unique number for self.weapon calls 	W
float IT2_MJOLNIR 			= 262144.000;	//18 Keep specific	""					W
float IT2_LASER_CANNON    	= 524288.000;	//19 Keep specific	""					W
float IT2_GRAPPLE			= 1048576.000;	//20 Keep specific "" W Rogue grapple
float IT2_TRINITY			= 2097152.000;	//20 Quoth
float IT2_WAND				= 4194304.000;	//21 Drake magic wand, Quoth							I && W2 (used by Wand)
// float 					= 8388608.000; 	//22 unused

float IT2_ALLARMOR			= 7.000;// Test for player grn/yel/red armour. Helper combo bit of 1 + 2 + 4
float ALL_ITEMS2ARTIFACTS = 6291456; // All items that affect screen overlay cshift
//=======================================SELF.MODITEMS======================================================
float WEAPON_HACKBANK1		= 1;			//0  Used to store self.weaponismoditems during level transitions/saves
float IT_UPGRADE_SSG		= 2;			//1  AoA		W\
	float IT_ICE    			= 4;			//2  AoA		W3  HACKBANK!
	float IT_MACE   			= 8;			//3  AoA		W3  HACKBANK!
	float IT_VOID_STAFF			= 16;			//4  AoA		W3  HACKBANK!
	float IT_FLAK   			= 32;			//5  AoA		W3  HACKBANK!
float IT_UPGRADE_LG			= 64;			//6  Plasma Gun, direct + splashdamage
	float IT_GUNGNIR   			= 128;			//7  AoA		W3  HACKBANK!
float IT_SANGUINATORS		= 256;			//8  AoA		W
float IT_SCIMITAR			= 512;			//9  AoA		W
float IT_RAPIER 			= 1024;			//10 AoA		W
float IT_UPGRADE_AXE   		= 2048;			//11 Shadow Axe, +75% dmg, +gib bodies
float IT_MIRV				= 4096;			//12	W\
float IT_CKEY1				= 8192;			//13 Custom Key 1
float IT_CKEY2				= 16384;		//14 Custom Key 2
float IT_CKEY3				= 32768;		//15 Custom Key 3
float IT_CKEY4				= 65536;		//16 Custom Key 4
float IT_ARTLAVASHIELD 		= 131072;		//17 No health or armor damage in lava
float IT_ARTWETSUIT			= 262144;		//18 No running out of oxygen under water
float IT_ARTBLASTBELT		= 524288;		//19 Immunity to all splashdamage
float IT_ARTJUMPBOOTS		= 1048576;		//20 JCR Jump Boots (1-4 power levels)
float IT_ARTSHARP			= 2097152;		//21 Reduce SG/SSG/RG spread pattern
float IT_ARTPIERCE			= 4194304;		//22 NG/SNG Nails travel through enemy bodies
float IT_ARTTOME			= 8388608;		//23 Tome of Power (event trigger)
float ALL_MODITEMSARTIFACTS = 16646144; // All items that affect screen overlay cshift
.float serverflagstemp;
.float weaponismoditems; 	// HACK FOR HACKBANK! Used to carry more than 24 weapons which is all we can fit in the float's bits
float IT_CKEYALL			= 122880;	//17 All Custom keys
//==========================================================================================================
// More powerups -----------------------------------------------------------
// Bits 00-07 (values 1-128) are reserved for health.
// Bits 08-11 (values 256-2048) are reserved for armor.
// float   POW_ARMOR1      	= 256;      	// Divide this into perms for suit value.
// float   POW_POWER_ARMOR 	= 4096;     	// Power shield toggle.
//==========================================SELF.PERMS======================================================
float 	POW_ARMORCOURAGE	= 1;			//0
float 	POW_ARMORDRAGON		= 2;			//1
float	POW_ARMORONYX		= 4;			//2
float	POW_ARMORONYXPOWER	= 8;			//3
float 	POW_ARMORBERSERKER	= 16;			//4
float 	POW_ARMORSPIRIT		= 32;			//5
float 	POW_ARMORCHAOS		= 64;			//6
float 	POW_ARMORNINJA		= 128;			//7
float 	POW_REGEN			= 256;			//8
float	POW_REGENLESSER		= 512;			//9
	float IT_AIRGUN				= 1024;			//10 			W3 HACKBANK!
float	POW_HASTE			= 2048;			//11	I Twice as fast firing
float	IT_FROSTBOW			= 4096;			//12	W\
float   POW_RESIST      	= 8192;     	//13 Half damage.
float   POW_VITALITY       	= 16384;    	//14 Regeneration.
float 	IT_SIDEWINDER		= 32768;		//15	W\
float   POW_DOUBLE      	= 65536;    	//16 Twin shot -- nailgun buff.
float   POW_SHOTTYMAN		= 131072;   	//17 Shotgun buff.
float   POW_VAMPIRE     	= 262144;   	//18 Melee buff.
//float UNUSED        		= 524288;   	//19 Extra ammo capacity.
float	IT_BLASTER 			= 1048576; 		//20 Drake laser blaster 					W  stored in self.perms.  was POW_20 in Drake, unused
float	IT_CHAINSAW 		= 2097152;		//21 Drake chainsaw						W stored in self.pems.  was POW_21 in Drake, unused.  Chainsaw is modified version of Zerstorer
//float UNUSED         		= 4194304;		//22 
//float UNUSED        		= 8388608;		//23 
//==========================================SELF.ITEMS3================================================
.float items3;
float IT3_FLASHLIGHT		= 1;			//0  Flashlight from Quoth
float IT3_SECRETHUNTER		= 2;			//1  Secret Hunter (Loki's Cat) 
float IT3_THORSBLESSING 	= 4;			//2  Free life granted upon would-be death.
float IT3_FLASHLIGHT_ON   	= 8;			//3  Bit to save flashlight status between saves.
float IT3_POWERSHIELD_ON	= 16;			//4  Bit to save powershield status between saves.
//float UNUSED   			= 32;			//5  
//float UNUSED				= 64;			//6  
//float UNUSED   			= 128;			//7  
//float UNUSED				= 256;			//8  
//float UNUSED				= 512;			//9  
//float UNUSED 				= 1024;			//10 
//float UNUSED   			= 2048;			//11 
//float UNUSED				= 4096;			//12 
//float UNUSED				= 8192;			//13
//float UNUSED				= 16384;		//14 
//float UNUSED				= 32768;		//15 
//float UNUSED				= 65536;		//16 
//float UNUSED 				= 131072;		//17 
//float UNUSED				= 262144;		//18 
//float UNUSED				= 524288;		//19 
//float UNUSED				= 1048576;		//20 
//float UNUSED				= 2097152;		//21 
//float UNUSED				= 4194304;		//22 
//float UNUSED				= 8388608;		//23 

// ===WEAPON ORDERING==================================================================================
/*
WEAPON KEYBOARD ORDER
1 - Axe + Shadow Axe + Chainsaw, Grapple, Mace (3)
2 - Shotgun + Laser Blaster, Blizzard Sphere (2)
3 - Doublebarrel Shotgun + Widowmaker + Shotcycler + Quad Shotgun, Scimitar (2)
4 - Nailgun, Lava Nailgun, Rapier (3)
5 - Perforator, Lava Super Nailgun, Void Staff (3)
6 - Grenade Launcher, Proximity Grenade Launcher, Multi-Grenade Launcher (3)
7 - Rocket Launcher, Multi-Rocket Launcher, Sanguinators(3)
8 - Thunderbolt + Plasmagun(AD), Plasmagun(rogue), Flak Cannon (3)
9 - Crossbow, Laser Cannon, Chain Lightning Gun (3)
0 - Wand, Mjolnir, Gungnir (3)

WEAPON ID's											NORMAL e.g.
														HACKBANK e.g. (indented)
UniqueID Wepname
1  Grapple											IT2_GRAPPLE
2  Axe/Shadowaxe/Chainsaw							IT_AXE
3  Mace													IT_MACE
4  Shotgun/Blaster									IT_SHOTGUN
5  Ice Tome												IT_ICE
6  Airfist												IT_AIRGUN
7  DB Shotgun/Riot Controller/Widowmaker/QuadShotgun IT_SUPER_SHOTGUN
8  Scimitar											IT_SCIMITAR
9  Nailgun											IT_NAILGUN
10 Lava Nailgun										IT_LAVA_NAILGUN
11 Rapier											IT_RAPIER
12 Perforator										IT_SUPER_NAILGUN
13 Lava Super Nailgun								IT_LAVA_SUPER_NAILGUN
14 Void Staff											IT_VOID_STAFF
15 Grenade Launcher									IT_GRENADE_LAUNCHER
16 Proximity Grenade Launcher/Sidewinder			IT2_PROXIMITY_GUN
17 Multi-Grenade Launcher							IT_MULTI_GRENADE
18 Rocket Launcher/MIRV								IT_ROCKET_LAUNCHER
19 Multi-Rocket Launcher							IT_MULTI_ROCKET
20 Sanguinators										IT_SANGUINATORS
21 Thunderbolt/Plasmagun							IT_LIGHTNING
22 Plasma Gun(rogue)								IT_PLASMA_GUN
23 Flak Cannon											IT_FLAK
24 Crossbow/Frostbow								IT_CROSSBOW
25 Laser Cannon										IT2_LASER_CANNON
26 Chain Lightning Gun								IT2_CHAINLIGHTNING
27 Wand												IT2_WAND
28 Mjolnir											IT2_MJOLNIR
29 Gungir												IT_GUNGNIR
*/

//=======================================SERVERFLAGS======================================================
float SVR_RUNE_ALL		= 15;		// Runes 1-4 (together)
float SVR_RUNEFLAG		= 255;		// Bits  1- 7 - Runes and Keys
float SVR_LOWFLAG		= 131071;	// Bits  1-16 - rune keys and spawn settings
float SVR_WORLDFLAG 	= 130816;	// Bits  8-17 - default/worldspawn options
float SVR_HIGHFLAG		= 8257536;	// Bits 18-23 - these options carry over

float SVR_RUNE_KEY1 	= 1;		//0 Rune 1
float SVR_RUNE_KEY2		= 2;		//1 Rune 2
float SVR_RUNE_KEY3		= 4;		//2 Rune 3
float SVR_RUNE_KEY4		= 8;		//3 Rune 4
float SVR_SPAWN_BIT1	= 16;		//4 3 bit spawn location
float SVR_SPAWN_BIT2	= 32;		//5 Supports 7 locations 001-111
float SVR_SPAWN_BIT3	= 64;		//6 Set via trigger_change_level
float SVR_LIVE 			= 128;		//7 Bit      8 - Serverflag has active data
float SVR_ITEMOFFSET 	= 256;		//8 Toggle item offset (corner/center)
float SVR_SPRPARTON 	= 512;		//9 Always use sprite particles (default OFF)
float SVR_PARTICLES 	= 1024;		//10 Turn ON particle system (default OFF)
float SVR_DEVHELPER 	= 2048;		//11 Turn OFF Dev helpers (marks+arrows)
float SVR_UPDAXE 		= 4096;		//12 Upgrade Axe, +75% dmg, gib zombies
float SVR_UPDSSG		= 8192;		//13 Upgrade Super Shotgun, +50% dmg, uses 3 shells
float SVR_UPDLG 		= 16384;	//14 Upgrade Lightning Gun, Direct+Splashdamage
float SVR_ITEMROTATE 	= 32768;	//15 Always randomly rotate ammo items
float SVR_DRAKEMUSIC	= 65536;	//16 Enable secondary music system (Drake Feature)
float SVR_SHOTGPROJ		= 131072;	//17 Turn OFF Shotgun projectiles
float SVR_SHOTGCASE		= 262144;	//18 Turn OFF Shotgun casings
float SVR_ZAWARE		= 524288;	//19 Turn OFF Z aware monsters
float SVR_FOOTSTEP		= 1048576;	//20 Turn OFF Enemy/player footsteps
float SVR_AIPATH		= 2097152;	//21 Turn OFF AI path corner extra info
float SVR_LIQDAM		= 4194304;	//22 Turn OFF Liquid damage checks for monsters
// float UNUSED			= 8388608;	//23

//wad image names in array form, for easier access.
static string number[10] = {
	"gfx/num_0",
	"gfx/num_1",
	"gfx/num_2",
	"gfx/num_3",
	"gfx/num_4",
	"gfx/num_5",
	"gfx/num_6",
	"gfx/num_7",
	"gfx/num_8",
	"gfx/num_9"
};

static string anumber[10] = {
	"gfx/anum_0",
	"gfx/anum_1",
	"gfx/anum_2",
	"gfx/anum_3",
	"gfx/anum_4",
	"gfx/anum_5",
	"gfx/anum_6",
	"gfx/anum_7",
	"gfx/anum_8",
	"gfx/anum_9"
};

static string weaponnames[] = {
	"shotgun",
	"sshotgun",
	"nailgun",
	"snailgun",
	"rlaunch",
	"srlaunch",
	"lightng",
	#define WEAPONICONS 7
	#define LIGHTNING_WIDTH 48
};

static string facetab[] = {
	"gfx/face5",
	"gfx/face4",
	"gfx/face3",
	"gfx/face2",
	"gfx/face1",
	"gfx/face_p5",
	"gfx/face_p4",
	"gfx/face_p3",
	"gfx/face_p2",
	"gfx/face_p1",
	"gfx/face_inv2",
	"gfx/face_quad",
	"gfx/face_invis",
	"gfx/face_invul2",
	"gfx/thorface"
};

//copies of stats, for easier access
static float sitems;		//copy of .items
static float sitems2;		//copy of .items2
static float sitems3;		//copy of .items2
static float smoditems;     //copy of .moditems
static float sperms; //haha	//copy of .perms
static float sweapon;		//copy of .weapon
static float sweaponlast;
static float shealth;		//copy of .health
static float sammo_poison;  //copy of .ammo_posion
static float shackbank;     //copy of .weaponismoditems
static float stotal_denizens;//copyof total_denizens
static float skilled_denizens;//copyofkilled_denizens
static float suseold_axe;

//Note: these are not tracked for splitscreen, which limits them to one player. We're lazy and just don't update them.
static float flashtime[WEAPONICONS];	//tracks the time that various items were obtained, so we can flash stuff accordingly.
static float painfinishtime;//tracks when we took damage, for flinching.

//registers the various pics so they're ready as needed.
static void() Hud_Init {
	float i;

	precache_pic("gfx/sbarkeep", TRUE);
	precache_pic("gfx/ibarkeep", TRUE);
	precache_pic("gfx/ibar", TRUE);
	for (i = 0; i < 10; i++) {
		precache_pic(number[i], TRUE);
		precache_pic(anumber[i], TRUE);
	}
	precache_pic("gfx/sb_armor1", TRUE);
	precache_pic("gfx/sb_armor2", TRUE);
	precache_pic("gfx/sb_armor3", TRUE);
	precache_pic("gfx/disc", TRUE);
	precache_pic("gfx/sb_shells", TRUE);
	precache_pic("gfx/sb_nails", TRUE);
	precache_pic("gfx/sb_rocket", TRUE);
	precache_pic("gfx/sb_cells", TRUE);
	precache_pic("gfx/r_ammobolts", TRUE);
	precache_pic("gfx/r_ammopoison", TRUE);
	precache_pic("gfx/r_ammolava", TRUE); // Lavanails
	precache_pic("gfx/r_ammoplasma", TRUE); // Multirockets, yes double checked
	precache_pic("gfx/r_ammomulti", TRUE); // Plasma
	precache_pic("gfx/r_ammoblood", TRUE); // Plasma
	precache_pic("gfx/r_ammoelemental", TRUE); // Plasma
	precache_pic("gfx/r_ammovoid", TRUE); // Plasma
	precache_pic("gfx/sb_key1", TRUE);
	precache_pic("gfx/sb_key2", TRUE);
	precache_pic("gfx/sb_invis", TRUE);
	precache_pic("gfx/sb_invuln", TRUE);
	precache_pic("gfx/sb_suit", TRUE);
	precache_pic("gfx/sb_quad", TRUE);
	precache_pic("gfx/sb_sigil1", TRUE);
	precache_pic("gfx/sb_sigil2", TRUE);
	precache_pic("gfx/sb_sigil3", TRUE);
	precache_pic("gfx/sb_sigil4", TRUE);
	for (i = 0; i < weaponnames.length; i++) {
		precache_pic(strcat("gfx/inv_", weaponnames[i]), TRUE);
		precache_pic(strcat("gfx/inv2_", weaponnames[i]), TRUE);
		precache_pic(strcat("gfx/inva1_", weaponnames[i]), TRUE);
		precache_pic(strcat("gfx/inva2_", weaponnames[i]), TRUE);
		precache_pic(strcat("gfx/inva3_", weaponnames[i]), TRUE);
		precache_pic(strcat("gfx/inva4_", weaponnames[i]), TRUE);
		precache_pic(strcat("gfx/inva5_", weaponnames[i]), TRUE);
	}
	precache_pic("gfx/adw_widowm",TRUE);
	precache_pic("gfx/adws_widowm",TRUE);
	precache_pic("gfx/inv_mjolnir",TRUE);
	precache_pic("gfx/inv2_mjolnir",TRUE);
	precache_pic("gfx/inv_crossbow",TRUE);
	precache_pic("gfx/inv2_crossbow",TRUE);
	precache_pic("gfx/inv_crossbow2",TRUE);
	precache_pic("gfx/inv2_crossbow2",TRUE);
	precache_pic("gfx/inv_multigren",TRUE);
	precache_pic("gfx/inv2_multigren",TRUE);
	precache_pic("gfx/inv_prox",TRUE);
	precache_pic("gfx/inv2_prox",TRUE);
	precache_pic("gfx/inv_multirock",TRUE);
	precache_pic("gfx/inv2_multirock",TRUE);
	precache_pic("gfx/inv_sanguin",TRUE);
	precache_pic("gfx/inv2_sanguin",TRUE);
	precache_pic("gfx/inv_wand",TRUE);
	precache_pic("gfx/inv2_wand",TRUE);
	precache_pic("gfx/inv_gungnir",TRUE);
	precache_pic("gfx/inv2_gungnir",TRUE);
	precache_pic("gfx/inv_axe",TRUE);
	precache_pic("gfx/inv2_axe",TRUE);
	precache_pic("gfx/inv_shadaxpl",TRUE);
	precache_pic("gfx/inv2_shadaxpl",TRUE);
	precache_pic("gfx/inv_chainlg",TRUE);
	precache_pic("gfx/inv2_chainlg",TRUE);
	precache_pic("gfx/inv_laser",TRUE);
	precache_pic("gfx/inv2_laser",TRUE);
	precache_pic("gfx/inv_frostbow",TRUE);
	precache_pic("gfx/inv2_frostbow",TRUE);
	precache_pic("gfx/inv_plasmarog",TRUE);
	precache_pic("gfx/inv2_plasmarog",TRUE);
	precache_pic("gfx/inv_airfist",TRUE);
	precache_pic("gfx/inv2_airfist",TRUE);
	precache_pic("gfx/inv_ranstaff",TRUE);
	precache_pic("gfx/inv2_ranstaff",TRUE);
	precache_pic("gfx/inv_chainsaw",TRUE);
	precache_pic("gfx/inv2_chainsaw",TRUE);
	precache_pic("gfx/inv_shadax",TRUE);
	precache_pic("gfx/inv2_shadax",TRUE);
	precache_pic("gfx/inv_mace",TRUE);
	precache_pic("gfx/inv2_mace",TRUE);
	precache_pic("gfx/inv_grapple",TRUE);
	precache_pic("gfx/inv2_grapple",TRUE);
	precache_pic("gfx/inv_widowm",TRUE);
	precache_pic("gfx/inv2_widowm",TRUE);
	precache_pic("gfx/inv_lavang",TRUE);
	precache_pic("gfx/inv2_lavang",TRUE);
	precache_pic("gfx/inv_lavasng",TRUE);
	precache_pic("gfx/inv2_lavasng",TRUE);
	precache_pic("gfx/inv_flak",TRUE);
	precache_pic("gfx/inv2_flak",TRUE);
	precache_pic("gfx/inv_plasmaad",TRUE);
	precache_pic("gfx/inv2_plasmaad",TRUE);

	for (i = 0; i < facetab.length; i++) precache_pic(facetab[i], TRUE);
	precache_pic("gfx/thorface", TRUE);
	precache_pic("gfx/thorface", TRUE);
};

static void(vector pos, float value, float threshhold) Hud_DrawLargeValue = {
	float c;
	float len;
	string s;

	if (value < 0) value = 0;	//hrm
	if (value>999) value = 999;
	
	s = ftos(floor(value));
	len = strlen(s);
	pos_x += 24 * (3-len);	
	if (value <= threshhold) { //use alternate (red) numbers

		while(len>0) {
			len--;
			c = str2chr(s, len);
			drawpic(pos+len * '24 0 0', anumber[c-'0'], '24 24 0', '1 1 1', 1, 0);
		}
	} else {	//use normal numbers
		while(len>0) {
			len--;
			c = str2chr(s, len);
			drawpic(pos+len * '24 0 0', number[c-'0'], '24 24 0', '1 1 1', 1, 0);
		}
	}
};

static void(float type, vector pos, float drawback) Hud_DrawAmmoCount = {
	string s;
	float value;
	float len;
	float c;

	if (type == 0) value = getstatf(CLIENT_SHELLS);
	else if (type == 1) value = getstatf(CLIENT_NAILS);
	else if (type == 2) value = getstatf(CLIENT_ROCKETS);
	else if (type == 3) value = getstatf(CLIENT_CELLS);
	else value = 0;

	if (value < 0) value = 0;	//hrm
	if (value>999) value = 999;
		
	if (drawback) {
		drawsubpic(pos, '42 11', "gfx/ibar", [(3.0/320)+type*(48.0/320), 0], [42.0/320, 11.0/24], '1 1 1', autocvar(scr_sbaralpha, 0.75), 0);
		pos_x += 8;
	}

	s = ftos(floor(value));
	len = strlen(s);
	pos_x += 8 * (3-len);
	while(len>0) {
		len--;
		c = str2chr(s, len);
		drawcharacter(pos+len * '8 0 0', (18-'0') + c, '8 8 0', '1 1 1', 1, 0);
	}
};

static void(float value, vector pos, float drawback, vector color) Hud_DrawModAmmoCount = {
	string s;
	float len;
	float c;

	if (value < 0) value = 0;
	if (value>999) value = 999;
	s = ftos(floor(value));
	len = strlen(s);
	pos_x += 8 * (3-len);
	while(len>0) {
		len--;
		c = str2chr(s, len);
		drawcharacter(pos+len * '8 0 0', (18-'0') + c, '8 8 0',color, 1, 0);
	}
};

static void(float num, float lflashtime, float iscurrent, vector pos, float drawwidth, float imgwidth) Hud_DrawWeaponEx = {
	string prefix;
	float flash = (time - lflashtime)*10;
	if (flash >= 10) {
		if (iscurrent)	prefix = "gfx/inv2_";
		else			prefix = "gfx/inv_";
	} else {
		static string tab[] = {"gfx/inva1_","gfx/inva2_","gfx/inva3_","gfx/inva4_","gfx/inva5_"};
		if (flash >= 5) flash -= 5;
		prefix = tab[flash];
	}
	drawsubpic(pos, [drawwidth, 16], strcat(prefix, weaponnames[num]), '0 0 0', [drawwidth/imgwidth, 1], '1 1 1', 1, 0);
};

static string(float f, float chars, string lead) FormatFloat = {
	string s = ftos(f);
	if (f < 10 && chars >= 3)		s = strcat(lead, lead, s);
	else if (f < 10 && chars == 2)	s = strcat(lead, s);
	else if (f < 100 && chars >= 3)	s = strcat(lead, s);
	return s;
};

string(string s, float start, float length) substring = #116;

static void(vector pos) Hud_CoopScores_SBar = {
	string s;
	float nsecs;
	float nmins, wmdl_len;

	vector sbar = pos;// - '80 0 0';
	drawpic(sbar, "gfx/scorebar", '480 24 0', '1 1 1', autocvar(scr_sbaralpha, 0.75), 0);
	s = strcat("Monsters:", FormatFloat(getstatf(STAT_KILLEDMONSTERS), 4, " "), "/", FormatFloat(getstatf(STAT_TOTALMONSTERS), 4, " "));
	drawstring(sbar + '8 2', s, '8 8 0', '1 1 1', 1, 0);
	s = strcat("Denizens:", FormatFloat(skilled_denizens, 4, " "), "/", FormatFloat(stotal_denizens, 4, " "));
	drawstring(sbar + '8 9', s, '8 8 0', '1 1 1', 1, 0);
	s = strcat("Secrets :", FormatFloat(getstatf(STAT_FOUNDSECRETS), 4, " "), "/", FormatFloat(getstatf(STAT_TOTALSECRETS), 4, " "));
	drawstring(sbar + '8 16', s, '8 8 0', '1 1 1', 1, 0);
	nmins = floor(time/60);
	nsecs = floor(time - nmins*60);
	s = strcat("Time :", FormatFloat(nmins, 3, " "), ":", FormatFloat(nsecs, 2, "0"));
	drawstring(sbar + '152 2', s, '8 8 0', '1 1 1', 1, 0);
	wmdl_len = strlen(world.model);
	if (wmdl_len > 9) { // 9 = "maps/" + ".bsp" for 9 characters total
		string wmdl = substring(world.model,5,wmdl_len - 9);
		drawstring(sbar + '280 2', wmdl, '8 8 0', '1 1 1', 1, 0);
	}
	string wm1 = substring(world.message,0,40);
	string wm2 = substring(world.message,40,80);
	drawstring(sbar + '152 9', wm1, '8 8 0', '1 1 1', 1, 0);
	drawstring(sbar + '152 16', wm2, '8 8 0', '1 1 1', 1, 0);
	//drawstring(sbar + '296 10' - strlen(world.message)*'4 0', world.message, '8 8 0', '1 1 1', 1, 0);
};

static void Hud_PicOrModel(vector topleft, string pic, string showmodel, float showskin, float speed) {
	vector sz = '24 24';
	#ifdef DP_QC_RENDER_SCENE	//requires fteextensions.qc instead of qsextensions.qc
		if (FALSE /*autocvar(cl_sbar, 1) >= 3*/)
		if (checkextension("DP_QC_RENDER_SCENE")) {
			clearscene(); //reset view props and wipe entity lists

			//set up the various view details, set up the renderer to be a little larger than the intended size... it avoids harsh cuts.
			setviewprop(VF_MIN, topleft - sz);
			setviewprop(VF_SIZE, sz * 3);
			setviewprop(VF_DRAWENGINESBAR, FALSE);
			setviewprop(VF_DRAWCROSSHAIR, FALSE);
			setviewprop(VF_DRAWWORLD, FALSE);
			setviewprop(VF_AFOV, 30);	//a small fov reduces perspective distortions without making it look like its isometric.
			setviewprop(VF_ANGLES, '15 0 0');	//angle downwards slightly
			makevectors('15 0 0');
			setviewprop(VF_ORIGIN, v_forward*-256);	//and move the camera away so that we can position the model at the center without needing to worry about the tilt.

			//spawn a (reusable) entity for our scene
			static entity hudpicent;
			if (!hudpicent) hudpicent = spawn();
			precache_model(showmodel);
			setmodel(hudpicent, showmodel);
			hudpicent.angles_y = cltime*speed;
			hudpicent.skin = showskin;
			makevectors(hudpicent.angles);
			//make sure its centered
			vector org = (hudpicent.maxs+hudpicent.mins)*0.5;
			setorigin(hudpicent, - v_forward*org_x + v_right*org_y - v_up*org_z);
			//and now copy it into the scene
			addentity(hudpicent);

			//and ask the engine to actually draw that single-entity scene. Think of this as a drawpic call.
			renderscene();
			return;
		}
	#endif
	drawpic(topleft, pic, '24 24 0', '1 1 1', 1, 0);
};

static void Hud_DrawFace(vector pos) {
	string face;
	if (sitems & IT_INVISIBILITY) {	//invis can go first, because its the most obvious image difference.
		if (sitems & IT_INVULNERABILITY)	face = facetab[10];	//special double-powerup image!
		else								face = facetab[12];
	} else if (sitems & IT_QUAD)			face = facetab[11];
	else if (sitems & IT_INVULNERABILITY)	face = facetab[13];
	else {
		float frame = shealth/20;
		if (frame < 0)		frame = 0;
		else if (frame > 4)	frame = 4;

		if (painfinishtime > time) frame += 5;	//pain.
		face = facetab[frame];
	}

	if (sitems3 & 4) face = "gfx/thorface"; // Thor's Blessing indication.

	if (shealth > 100)		Hud_PicOrModel(pos, face, "maps/b_bh100.bsp", 0, -90);
	else if (shealth > 50)	Hud_PicOrModel(pos, face, "maps/b_bh25.bsp", 0, -90);
	else					Hud_PicOrModel(pos, face, "maps/b_bh10.bsp", 0, -90);
};

static void Hud_DrawSBar(vector pos, vector virtsize) {
	drawpic(pos, "gfx/sbarkeep", '480 24 0', '1 1 1', autocvar(scr_sbaralpha, 0.75), 0);

	if (sitems & IT_INVULNERABILITY) {
		drawpic(pos + '68 0 0', "gfx/disc", '24 24 0', '1 1 1', 1, 0);
		Hud_DrawLargeValue(pos+'92 0 0', 999, 25);
	} else {
		Hud_DrawLargeValue(pos+'92 0 0', getstatf(STAT_ARMOR), 25);
		if (sitems2 & IT2_ARMOR3) 		drawpic(pos + '68 0', "gfx/sb_armor3", '24 24 0', '1 1 1', 1, 0);
		else if (sitems2 & IT2_ARMOR2)	drawpic(pos + '68 0', "gfx/sb_armor2", '24 24 0', '1 1 1', 1, 0);
		else if (sitems2 & IT2_ARMOR1)	drawpic(pos + '68 0', "gfx/sb_armor1", '24 24 0', '1 1 1', 1, 0);
	}

	Hud_DrawFace(pos+'180 0 0');
	Hud_DrawLargeValue(pos+'204 0 0', shealth, 25);

	if (shackbank) {
		if (sweapon == IT_ICE) drawpic(pos+'292 0 0', "gfx/r_ammoelemental", '24 24 0', '1 1 1', 1, 0);
		// else if (sweapon == IT_MACE)
		else if (sweapon == IT_VOID_STAFF) drawpic(pos+'292 0 0', "gfx/r_ammovoid", '24 24 0', '1 1 1', 1, 0);
		else if (sweapon == IT_FLAK) drawpic(pos+'292 0 0', "gfx/sb_rocket", '24 24 0', '1 1 1', 1, 0);
		else if (sweapon == IT_GUNGNIR) drawpic(pos+'292 0 0', "gfx/r_ammovoid", '24 24 0', '1 1 1', 1, 0);
	} else {
		if (sweapon == IT_SHOTGUN || sweapon == IT_SUPER_SHOTGUN) drawpic(pos+'292 0 0', "gfx/sb_shells", '24 24 0', '1 1 1', 1, 0);
		else if (sweapon == IT_NAILGUN || sweapon == IT_SUPER_NAILGUN) drawpic(pos+'292 0 0', "gfx/sb_nails", '24 24 0', '1 1 1', 1, 0);
		else if (sweapon == IT_GRENADE_LAUNCHER || sweapon == IT_ROCKET_LAUNCHER) drawpic(pos+'292 0 0', "gfx/sb_rocket", '24 24 0', '1 1 1', 1, 0);
		else if (sweapon == IT2_PROXIMITY_GUN) drawpic(pos+'292 0 0', "gfx/sb_rocket", '24 24 0', '1 1 1', 1, 0);
		else if (sweapon == IT_LIGHTNING || sweapon == IT_LIGHTNING) drawpic(pos+'292 0 0', "gfx/sb_cells", '24 24 0', '1 1 1', 1, 0);
		else if (sweapon == IT_LAVA_NAILGUN || sweapon == IT_LAVA_SUPER_NAILGUN) drawpic(pos+'292 0 0', "gfx/r_ammolava", '24 24 0', '1 1 1', 1, 0);
		else if (sweapon == IT_MULTI_GRENADE || sweapon == IT_MULTI_ROCKET) drawpic(pos+'292 0 0', "gfx/r_ammoplasma", '24 24 0', '1 1 1', 1, 0);
		else if (sweapon == IT_PLASMA_GUN) drawpic(pos+'292 0 0', "gfx/r_ammomulti", '24 24 0', '1 1 1', 1, 0);
		else if (sweapon == IT2_MJOLNIR) drawpic(pos+'292 0 0', "gfx/sb_cells", '24 24 0', '1 1 1', 1, 0);
		else if (sweapon == IT2_LASER_CANNON) drawpic(pos+'292 0 0', "gfx/sb_cells", '24 24 0', '1 1 1', 1, 0);
		else if (sweapon == IT_CROSSBOW) {
			if  (sammo_poison > 1) drawpic(pos+'292 0 0', "gfx/r_ammopoison", '24 24 0', '1 1 1', 1, 0);
			else drawpic(pos+'292 0 0', "gfx/r_ammobolts", '24 24 0', '1 1 1', 1, 0);
		}
		else if (sweapon == IT_SANGUINATORS) drawpic(pos+'292 0 0', "gfx/r_ammoblood", '24 24 0', '1 1 1', 1, 0);
		else if (sweapon == IT_RAPIER) drawpic(pos+'292 0 0', "gfx/r_ammoblood", '24 24 0', '1 1 1', 1, 0);
		else if (sweapon == IT_SCIMITAR) drawpic(pos+'292 0 0', "gfx/r_ammoelemental", '24 24 0', '1 1 1', 1, 0);
	}
	Hud_DrawLargeValue(pos+'316 0 0', getstatf(STAT_AMMO), 10);

	// Powerups - Defense
	if (sitems & IT_INVISIBILITY) drawpic(pos+'4 0 0', "gfx/sb_invis", '16 16 0', '1 1 1', 1, 0);
	if (sitems & IT_INVULNERABILITY) drawpic(pos+'20 0 0', "gfx/sb_invuln", '16 16 0', '1 1 1', 1, 0);
	if (sitems & IT_SUIT) drawpic(pos+'36 0 0', "gfx/sb_suit", '16 16 0', '1 1 1', 1, 0);

	// Powerups - Offense
	if (sitems & IT_QUAD) drawpic(pos+'416 0 0', "gfx/sb_quad", '16 16 0', '1 1 1', 1, 0);
	return;
};

static void DrawSlotDots(vector pos, float which) {
	if (which == 0) {
		drawcharacter(pos+[28,16], 15, '8 8 0','1 1 1', 1, 0);
		drawcharacter(pos+[34,16], 15, '8 8 0','1 1 1', 1, 0);
		drawcharacter(pos+[40,16], 15, '8 8 0','1 1 1', 1, 0);
	} else if (which == 1) {
		drawcharacter(pos+[28,16],143, '8 8 0','1 1 1', 1, 0);
		drawcharacter(pos+[34,16], 15, '8 8 0','1 1 1', 1, 0);
		drawcharacter(pos+[40,16], 15, '8 8 0','1 1 1', 1, 0);
	} else if (which == 2) {
		drawcharacter(pos+[28,16], 15, '8 8 0','1 1 1', 1, 0);
		drawcharacter(pos+[34,16],143, '8 8 0','1 1 1', 1, 0);
		drawcharacter(pos+[40,16], 15, '8 8 0','1 1 1', 1, 0);
	} else if (which == 3) {
		drawcharacter(pos+[28,16], 15, '8 8 0','1 1 1', 1, 0);
		drawcharacter(pos+[34,16], 15, '8 8 0','1 1 1', 1, 0);
		drawcharacter(pos+[40,16],143, '8 8 0','1 1 1', 1, 0);
	}
}

string slot1, slot2, slot3, slot4, slot5, slot6, slot7, slot8, slot9, slot0;

static void Hud_DrawIBar(vector pos, vector br) {
	// Inventory background (top half of HUD)
	drawpic(pos,"gfx/ibarkeep",'480 24 0','1 1 1',autocvar(scr_sbaralpha,0.75),0);

	// slot1
	if (sitems & IT_AXE || sitems2 & IT2_GRAPPLE || smoditems & IT_MACE) {
		if (sweapon == IT_AXE && !shackbank) {
			if (sperms & IT_CHAINSAW) {
				slot1 = "gfx/inv2_chainsaw";
			} else {
				if (smoditems & IT_UPGRADE_AXE) {
					slot1 = "gfx/inv2_shadax";
				} else {
					if (suseold_axe == 1) slot1 = "gfx/inv2_shadaxpl";
					else slot1 = "gfx/inv2_axe";
				}
			}
		} else if (sweapon == IT_MACE && shackbank) {
			slot1 = "gfx/inv2_mace";
		} else if (sweapon == IT2_GRAPPLE && !shackbank) {
			slot1 = "gfx/inv2_grapple";

		// Plain inventory icons.
		} else if (sitems & IT_AXE) {
			if (sperms & IT_CHAINSAW) {
				slot1 = "gfx/inv_chainsaw";
			} else {
				if (smoditems & IT_UPGRADE_AXE) {
					slot1 = "gfx/inv_shadax";
				} else {
					if (suseold_axe == 1) slot1 = "gfx/inv_shadaxpl";
					else slot1 = "gfx/inv_axe";
				}
			}
		} else if (sitems2 & IT2_GRAPPLE) {
			slot1 = "gfx/inv_grapple";
		} else if (smoditems & IT_MACE) {
			slot1 = "gfx/inv_mace";
		}
	} else slot1 = "";

	// slot2
	if (sitems & IT_SHOTGUN || smoditems & IT_ICE || sperms & IT_BLASTER || sperms & IT_AIRGUN) {
		if (sweapon == IT_SHOTGUN && !shackbank) {
			if (sperms & IT_BLASTER) slot2 = "gfx/inv2_shotgun"; // TODO inv2_blaster
			else slot2 = "gfx/inv2_shotgun";
		} else if (sweapon == IT_ICE && shackbank) {
			slot2 = "gfx/inv2_ranstaff";
		} else if (sweapon == IT_AIRGUN && shackbank) {
			slot2 = "gfx/inv2_airfist";

		// Plain inventory icons.
		} else if (sitems & IT_SHOTGUN) {
			if (sperms & IT_BLASTER) slot2 = "gfx/inv_shotgun"; // TODO inv_blaster
			else slot2 = "gfx/inv_shotgun";
		} else if (smoditems & IT_ICE) {
			slot2 = "gfx/inv_ranstaff";
		} else if (sperms & IT_AIRGUN) {
			slot2 = "gfx/inv_airfist";
		}
	} else slot2 = "";

	// slot3
	if (sitems & IT_SUPER_SHOTGUN || smoditems & IT_UPGRADE_SSG || smoditems & IT_SCIMITAR) {
		if (sweapon == IT_SUPER_SHOTGUN && !shackbank) {
			if (smoditems & IT_UPGRADE_SSG) slot3 = "gfx/inv2_widowm";
			else slot3 = "gfx/inv2_sshotgun";
		} else if (sweapon == IT_SCIMITAR && !shackbank) {
			slot3 = "gfx/inv2_sshotgun"; // TODO inv2_scimitar

		// Plain inventory items.
		} else if (smoditems & IT_UPGRADE_SSG) {
			if (smoditems & IT_UPGRADE_SSG) slot3 = "gfx/inv_widowm";
			else slot3 = "gfx/inv_sshotgun";
		} else if (sitems & IT_SUPER_SHOTGUN) {
			slot3 = "gfx/inv_sshotgun";
		} else if (smoditems & IT_SCIMITAR) {
			slot3 = "gfx/inv_sshotgun"; // TODO inv_scimitar
		}
	} else slot3 = "";

	// slot4
	if (sitems & IT_NAILGUN || sitems & IT_LAVA_NAILGUN || smoditems & IT_RAPIER) {
		if (sweapon == IT_NAILGUN && !shackbank) {
			slot4 = "gfx/inv2_nailgun";
		} else if (sweapon == IT_LAVA_NAILGUN && !shackbank) {
			slot4 = "gfx/inv2_lavang";
		} else if (sweapon == IT_RAPIER && !shackbank) {
			slot4 = "gfx/inv2_nailgun"; // TODO inv2_rapier

		// Plain inventory items.
		} else if (sitems & IT_NAILGUN) {
			slot4 = "gfx/inv_nailgun";
		} else if (sitems & IT_LAVA_NAILGUN) {
			slot4 = "gfx/inv_lavang";
		} else if (smoditems & IT_RAPIER) {
			slot4 = "gfx/inv_nailgun"; // TODO inv_rapier
		}
	} else slot4 = "";

	// slot5
	if (sitems & IT_SUPER_NAILGUN || sitems & IT_LAVA_SUPER_NAILGUN || smoditems & IT_VOID_STAFF) {
		if (sweapon == IT_SUPER_NAILGUN && !shackbank) {
			slot5 = "gfx/inv2_snailgun";
		} else if (sweapon == IT_LAVA_SUPER_NAILGUN && !shackbank) {
			slot5 = "gfx/inv2_lavasng";
		} else if (sweapon == IT_VOID_STAFF && shackbank) {
			slot5 = "gfx/inv2_snailgun"; // TODO inv2_voidstaff

		// Plain inventory items.
		} else if (sitems & IT_SUPER_NAILGUN) {
			slot5 = "gfx/inv_snailgun";
		} else if (sitems & IT_LAVA_SUPER_NAILGUN) {
			slot5 = "gfx/inv_lavasng";
		} else if (smoditems & IT_VOID_STAFF) {
			slot5 = "gfx/inv_snailgun"; // TODO inv_voidstaff
		}
	} else slot5 = "";

	// slot6
	if (sitems & IT_GRENADE_LAUNCHER || sitems2 & IT2_PROXIMITY_GUN
		|| sitems & IT_MULTI_GRENADE) {

		if (sweapon == IT_GRENADE_LAUNCHER && !shackbank) {
			slot6 = "gfx/inv2_rlaunch";
		} else if (sweapon == IT2_PROXIMITY_GUN && !shackbank) {
			slot6 = "gfx/inv2_prox";
		} else if (sweapon == IT_MULTI_GRENADE && !shackbank) {
			slot6 = "gfx/inv2_multigren";

		// Plain inventory items.
		} else if (sitems & IT_GRENADE_LAUNCHER) {
			slot6 = "gfx/inv_rlaunch";
		} else if (sitems2 & IT2_PROXIMITY_GUN) {
			slot6 = "gfx/inv_prox";
		} else if (smoditems & IT_MULTI_GRENADE) {
			slot6 = "gfx/inv_multigren";
		}
	} else slot6 = "";

	// slot7
	if (sitems & IT_ROCKET_LAUNCHER || sitems & IT_MULTI_ROCKET
		|| smoditems & IT_SANGUINATORS) {

		if (sweapon == IT_ROCKET_LAUNCHER && !shackbank) {
			slot7 = "gfx/inv2_srlaunch";
		} else if (sweapon == IT_MULTI_ROCKET && !shackbank) {
			slot7 = "gfx/inv2_multirock";
		} else if (sweapon == IT_SANGUINATORS && !shackbank) {
			slot7 = "gfx/inv2_sanguin";

		// Plain inventory items.
		} else if (sitems & IT_ROCKET_LAUNCHER) {
			slot7 = "gfx/inv_srlaunch";
		} else if (sitems2 & IT_MULTI_ROCKET) {
			slot7 = "gfx/inv_multirock";
		} else if (smoditems & IT_SANGUINATORS) {
			slot7 = "gfx/inv_sanguin";
		}
	} else slot7 = "";

	// slot8
	if (sitems & IT_LIGHTNING || smoditems & IT_UPGRADE_LG || sitems & IT_PLASMA_GUN || smoditems & IT_FLAK) {
		if (sweapon == IT_FLAK && shackbank) {
			slot8 = "gfx/inv2_flak";
		} else if (sweapon == IT_LIGHTNING && !shackbank) {
			if (smoditems & IT_UPGRADE_LG) slot8 = "gfx/inv2_plasmaad";
			else slot8 = "gfx/inv2_lightng";
		} else if (sweapon == IT_PLASMA_GUN && !shackbank) {
			slot8 = "gfx/inv2_plasmarog";

		// Plain inventory items.
		} else if (sitems & IT_LIGHTNING) {
			if (smoditems & IT_UPGRADE_LG) slot8 = "gfx/inv_plasmaad";
			else slot8 = "gfx/inv_lightng";
		} else if (sitems2 & IT_PLASMA_GUN) {
			slot8 = "gfx/inv_plasmarog";
		} else if (smoditems & IT_FLAK) {
			slot8 = "gfx/inv_flak";
		}
	} else slot8 = "";

	// slot9
	if (sitems & IT_CROSSBOW || sperms & IT_FROSTBOW || sitems2 & IT2_LASER_CANNON || sitems2 & IT2_CHAINLIGHTNING) {
		if (sweapon == IT_CROSSBOW && !shackbank) {
			if (sperms & IT_FROSTBOW) slot9 = "gfx/inv2_frostbow";
			else {
				if (sammo_poison > 0) slot9 = "gfx/inv2_crossbow2";
				else slot9 = "gfx/inv2_crossbow";
			}
		} else if (sweapon == IT2_LASER_CANNON && !shackbank) {
			slot9 = "gfx/inv2_laser";
		} else if (sweapon == IT2_CHAINLIGHTNING && !shackbank) {
			slot9 = "gfx/inv2_chainlg";

		// Plain inventory items.
		} else if (sitems & IT_CROSSBOW) {
			if (sperms & IT_FROSTBOW) slot9 = "gfx/inv_frostbow";
			else {
				if (sammo_poison > 0) slot9 = "gfx/inv_crossbow2";
				else slot9 = "gfx/inv_crossbow";
			}
		} else if (sperms & IT_FROSTBOW) {
			slot9 = "gfx/inv_frostbow";
		} else if (sitems2 & IT2_LASER_CANNON) {
			slot9 = "gfx/inv_laser";
		} else if (sitems2 & IT2_CHAINLIGHTNING) {
			slot9 = "gfx/inv_chainlg";
		}
	} else slot9 = "";

	// slot0
	if (sitems2 & IT2_WAND || sitems2 & IT2_MJOLNIR
		|| smoditems & IT_GUNGNIR) {

		if (sweapon == IT2_WAND && !shackbank) {
			slot0 = "gfx/inv2_wand";
		} else if (sweapon == IT2_MJOLNIR && !shackbank) {
			slot0 = "gfx/inv2_mjolnir";
		} else if (sweapon == IT_GUNGNIR && shackbank) {
			slot0 = "gfx/inv2_gungnir";

		// Plain inventory items.
		} else if (sitems2 & IT2_MJOLNIR) {
			slot0 = "gfx/inv_mjolnir";
		} else if (sitems2 & IT2_WAND) {
			slot0 = "gfx/inv_wand";
		} else if (smoditems & IT_GUNGNIR) {
			slot0 = "gfx/inv_gungnir";
		}
	} else slot0 = "";

	if (slot1 != "") drawpic(pos+[24*0,8],slot1,'24 16 0','1 1 1',1,0);
	if (slot2 != "") drawpic(pos+[24*1,8],slot2,'24 16 0','1 1 1',1,0);
	if (slot3 != "") drawpic(pos+[24*2,8],slot3,'24 16 0','1 1 1',1,0);
	if (slot4 != "") drawpic(pos+[24*3,8],slot4,'24 16 0','1 1 1',1,0);
	if (slot5 != "") drawpic(pos+[24*4,8],slot5,'24 16 0','1 1 1',1,0);
	if (slot6 != "") drawpic(pos+[24*5,8],slot6,'24 16 0','1 1 1',1,0);
	if (slot7 != "") drawpic(pos+[24*6,8],slot7,'24 16 0','1 1 1',1,0);
	if (slot8 != "") drawpic(pos+[24*7,8],slot8,'24 16 0','1 1 1',1,0);
	if (slot9 != "") drawpic(pos+[24*8,8],slot9,'24 16 0','1 1 1',1,0);
	if (slot0 != "") drawpic(pos+[24*9,8],slot0,'24 16 0','1 1 1',1,0);

	sweaponlast = sweapon;
	Hud_DrawAmmoCount(0, pos + '11 0 0', FALSE);
	Hud_DrawAmmoCount(1, pos + '59 0 0', FALSE);
	Hud_DrawAmmoCount(2, pos + '107 0 0', FALSE);
	Hud_DrawAmmoCount(3, pos + '153 0 0', FALSE);
	Hud_DrawModAmmoCount(getstatf(CLIENT_LAVANAILS),pos + '199 0 0',FALSE,'1 1 1'); // ammo_lava_nails
	Hud_DrawModAmmoCount(getstatf(CLIENT_MULTIROCKETS),pos + '241 0 0',FALSE,'1 1 1'); // ammo_multi_rockets
	Hud_DrawModAmmoCount(getstatf(CLIENT_BOLTS),pos + '285 0 0',FALSE,'1 1 1'); // ammo_bolts
	if (getstatf(CLIENT_AMMOPOISON) > 0) Hud_DrawModAmmoCount(getstatf(CLIENT_AMMOPOISON),pos + '285 -9 0',FALSE,'0.5 1 0.5'); // ammo_poison
	Hud_DrawModAmmoCount(getstatf(CLIENT_ELEMENTAL),pos + '327 0 0',FALSE,'1 1 1'); // ammo_elemental
	Hud_DrawModAmmoCount(getstatf(CLIENT_BLOODCRYSTALS),pos + '368 0 0',FALSE,'1 1 1'); // ammo_bloodcrystals
	Hud_DrawModAmmoCount(getstatf(CLIENT_PLASMA),pos + '412 0 0',FALSE,'1 1 1'); // ammo_plasma
	Hud_DrawModAmmoCount(getstatf(CLIENT_VOIDSHARDS),pos + '450 0 0',FALSE,'1 1 1'); // ammo_voidshards

	// Keys
	if (sitems & IT_KEY1) drawpic(pos+'264 8 0', "gfx/sb_key1", '16 16 0', '1 1 1', 1, 0);
	if (sitems & IT_KEY2) drawpic(pos+'280 8 0', "gfx/sb_key2", '16 16 0', '1 1 1', 1, 0);

	// Runes
	if (serverflags & SVR_RUNE_KEY1) drawpic(pos+'448 8 0', "gfx/sb_sigil1", '8 16 0', '1 1 1', 1, 0);
	if (serverflags & SVR_RUNE_KEY2) drawpic(pos+'456 8 0', "gfx/sb_sigil2", '8 16 0', '1 1 1', 1, 0);
	if (serverflags & SVR_RUNE_KEY3) drawpic(pos+'464 8 0', "gfx/sb_sigil3", '8 16 0', '1 1 1', 1, 0);
	if (serverflags & SVR_RUNE_KEY4) drawpic(pos+'472 8 0', "gfx/sb_sigil4", '8 16 0', '1 1 1', 1, 0);

	if (deathmatch) { //should probably show team scores, but this mimics vanilla
		pos_x += 194;
		for (float i = -1; i >= -4; i--) {
			string frags = getplayerkeyvalue(i, "frags");
			if not (frags) break;
			vector top = stov(getplayerkeyvalue(i, "topcolor_rgb"));
			vector bot = stov(getplayerkeyvalue(i, "bottomcolor_rgb"));
			drawfill(pos+[0,1], [28,3], top, 0.75, 0);
			drawfill(pos+[0,4], [28,4], bot, 0.75, 0);
			drawstring(pos+[2,0], strpad(-3, frags), [8,8], [1,1,1],1,0);
			if (player_localentnum == stof(getplayerkeyvalue(i, "viewentity"))) {
				drawcharacter(pos+[-4,0], 0xe010, [8,8], [1,1,1],1, 0);
				drawcharacter(pos+[24,0], 0xe011, [8,8], [1,1,1],1, 0);
			}
			pos_x += 8*4;
		}
	}
};

float numclientseats;

static void Hud_Draw(vector virtsize, float scoreboard) {
	vector pos;
	float oitems = sitems;
	float oitems2 = sitems2;
	float ohealth = shealth;

	pos_x = (virtsize_x-480)/2;
	pos_y = virtsize_y;
	sitems = getstatbits(STAT_ITEMS, 0, 23);	//note that we could use getstati to read the items stat, but it'd degrade when then cast to a float, and QSS+DP don't support ints, so we have to use two floats. 
	sitems2 = getstatbits(CLIENT_ITEMS2, 0, 23);
	smoditems = getstatbits(CLIENT_MODITEMS, 0, 23);
	sperms = getstatbits(CLIENT_PERMS, 0, 23);
	sweapon = getstatf(STAT_ACTIVEWEAPON);
	shealth = getstatf(STAT_HEALTH);
	sammo_poison = getstatf(CLIENT_AMMOPOISON);
	shackbank = getstatf(CLIENT_USINGHACKBANK);
	serverflags = getstatbits(CLIENT_RUNEFLAG,0,23);
	stotal_denizens = getstatf(CLIENT_DENIZENS);
	skilled_denizens= getstatf(CLIENT_DENIZENSKILLED);
	sitems3 = getstatf(CLIENT_ITEMS3);
	suseold_axe = getstatf(CLIENT_USEOLDAXE);

	if (shealth <= 0) scoreboard = TRUE;
	if (numclientseats <= 1) { //note that we only track one player's stats. with splitscreen we need to stop looking for changes otherwise we'd see them all the time.
		if (ohealth && sitems != oitems) {
			for (float f = 0; f < 7; f++) {
				if ((sitems & (1<<f)) && !(oitems & (1<<f))) flashtime[f] = time;
			}
		}
	}

	if (autocvar(viewsize, 100) < 120) {
		if (scoreboard)	Hud_CoopScores_SBar(pos - '0 24 0');
		else			Hud_DrawSBar(pos - '0 24 0', virtsize);
		if (autocvar(viewsize, 100) < 110) Hud_DrawIBar(pos - '0 48 0', virtsize);
	}
};

//lame entry point, just so that we know when damage was taken
float(float save, float take, vector dir) CSQC_Parse_Damage = {
	if (numclientseats <= 1) painfinishtime = time + 0.2;
	return FALSE;	//let the engine handle any red tints etc
};

//Hud entry point!
//showscores is set if +scores is held (check health yourself).
void(vector virtsize, float showscores) CSQC_DrawHud = { Hud_Draw(virtsize, showscores); };

void(float apilevel, string enginename, float engineversion) CSQC_Init = {
	Hud_Init();
};