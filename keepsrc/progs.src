//=============================================================================
//       ___  ___  __            __   __  
// |__/ |__  |__  |__)     |\/| /  \ |  \
// |  \ |___ |___ |        |  | \__/ |__/                                                    
//
// Compiled by W. Josiah Jack, aka Qmaster
//
// Attributions: All, see credits folder
//
//
// Distribution / Copyright / Permissions 
//
// Please do not use any of these assets in ANY COMMERCIAL PROJECT.
// and remember to give credit if you use any of these assets. Please credit
// the appropriate authors of the various content used.  Refer to the credits
// folder.
//				  
// The QC files in this MOD are based on 1.06 source files by ID Software.
// These files are released under the terms of GNU General Public License v2 or
// later. You may use the source files as a base to build your own MODs as long
// as you release them under the same license and make the source available.
// Please also give proper credit. Check http://www.gnu.org for details.
//
// Quake is a registered trademark of id Software, Inc.
//
// All of these resources may be electronically distributed only at 
// NO CHARGE to the recipient.
//
// Stats:
// Entity count: 0
// Function count: 0
//
// Implements: Compile order and what files are included
//
// Description:
// This lists each code file to include in the mod.
// The order is important since the compiler needs to know about functions
// ahead of time so it can confirm the data types and arguments all match.
//=============================================================================
//
// Comment format:			// STATE Notes	
// STATEs:					// <Implemented (blank> It works in-game, or should.
							// REFINED: Tested at one point, formatted to
							//          standards, removed redundancy, general
							//          once over check.
							// FINALIZED: It's done. Add comment header, final
							//            code cleanups, final comments. Add to
							//			  documentation.  All tests pass.
							// N/A Does not apply.

//============================ Overall Mod Notes ==============================
// You will note that there are some odd tags in the comments on all functions.
// These are to indicate to external tools or the reader whether the function
// is an entity.  QC has the odd quirk where every entity is a function and any
// function can be an entity, with some caveats.  These "Qmaster Tags" as I'm
// calling them are to indicate, especially to my automatic .fgd generator
// tool, where and what all the functions are to differentiate.  Please note
// that of course all hacks still work to give entities the name of a function.
//
// '// [FUNCTION]' = Indicates that this function is just a function and to be
//                   used only for think, touch, utility, etc.
// '// [ENTITY]'   = Indicates that this function is an entity.
//
//
//=========================== Start of files ==================================
// progs.src				// REFINED You are looking at it.
// COPYING.TXT				// N/A GNU GPL v2.0 License
// qc_highlight.xml			// N/A Handy highlighting for IDE's
//
//====================== Start of actual mod code =============================
../progs.dat				// N/A Instruction to place progs.dat file one
							// folder up.  `../` is the terminal command for
							// one folder up.

// Definitions
//-----------------------------------------------------------------------------
defs.qc						// REFINED Base entity field and globals definitions
defskeep.qc					// REFINED Definitions for Keep
defsclass.qc				// REFINED Definitions for class system
defsextras.qc				// REFINED Definitions for extras_r5 and extras_r4
defscustom.qc				// REFINED Definitions for Arcane Dimensions and Keep
defshipnotic.qc				// REFINED Definitions for Hipnotic
defsnehahra.qc				// REFINED Definitions for Nehahra
defsrogue.qc				// REFINED Definitions for Rogue
defsquoth.qc				// REFINED Definitions for Quoth 1 and up
defsdrake.qc				// REFINED Definitions for Drake (SOE, Rapture, Something W)
defsaoa.qc					// REFINED Definitions for Arms of Asgard (AoA)
defsredfield.qc				// REFINED Definitions for Redfield's Ravenkeep
dpextensions.qc 			// N/A     Darkplaces Engine definitions and API hooks. Autogenerated.
fteextensions.qc 			// N/A     FTE and QSS Engine definitions and API hooks. Autogenerated.
qrobotdefs.qc				// REFINED Definitions for Qmaster's programmable xyz robots
defsqrally.qc				// REFINED Definitions for the Quake Rally vehicle system

// Globally used subroutins aka subs, including math and physics
//-----------------------------------------------------------------------------
mathlib.qc					// REFINED Math functions library

// Gyro Physics
gyro_main.qc				// REFINED Main Gyro physics updates
gyro_forces.qc				// REFINED Gyro physics force calculations
gyro_physics.qc				// REFINED Gyro physics physical calculations
gyro_user.qc				// REFINED Gyro physics API hook functions

// Subroutines and Utility Functions
subs.qc						// REFINED Standard subroutines
subs_soc.qc					// REFINED Arcane Dimensions (AD) subroutines
subs_kinn.qc				// REFINED Kinn Marcher and Bastion subroutines
subs_keep.qc				// REFINED Keep subroutines
subs_drake.qc				// REFINED Drake subroutines
subs_extras.qc				// REFINED extras_r5, extras_r4 subroutines
subs_aoa.qc					// REFINED Arms of Asgard (AoA) subroutines
subs_nehahra.qc				// REFINED Nehahra subroutines
subs_copper.qc				// REFINED Copper subroutines

// HUD
//-----------------------------------------------------------------------------
csqc_defs.qc				// REFINED Handles csqc references for the HUD
csqc_hudkeep.qc				// REFINED CSQC Custom HUD implementation, see csqc/ folder.

// Various Global Systems
//-----------------------------------------------------------------------------
estate.qc					// REFINED Arcane Dimensions (AD) Entity State System
hiprot.qc					// REFINED Hipnotic Rotation System
globalfog.qc				// REFINED Arcane Dimensions (AD) Fog and Skyfog Change System
chaosmode.qc				// REFINED Arcane Dimensions (AD) and Copper Nightmare/Evil/Chaos Mode
settings.qc					// REFINED Arcane Dimensions (AD) Mod Settings System
impulse.qc					// REFINED Keybinds and Cheats System
breakable.qc				// REFINED Breakable Brush Models System
pushable.qc					// REFINED Pushable Brush Models System
switchshad.qc				// REFINED Switchable Shadow and Light effect entities.
part_manage.qc				// REFINED Particle System Manager
part_generate.qc			// REFINED Particle System Emitters and Generators
part_emitter.qc				// REFINED Particle System Entities and helper functions.
ai_allegiance.qc			// REFINED Definitions and subroutines for AI behavior System
ai_gibs.qc					// REFINED Gibbing and Gore System
ai_enemytarget.qc			// REFINED AI System for flying monsters to stay above their enemy
ai_passive.qc				// REFINED Passive State System and Following for friendly(ish) monsters and denizens
ai_tether.qc				// REFINED Monster Tether System for monster guarding points
ai_pathcorner.qc			// REFINED Path Following System for monsters and trains
fx.qc						// REFINED Special Effects
fx_drake.qc					// REFINED Drake Special Effects
fx_quake.qc					// REFINED Drake Earthquake System
hip_expl.qc					// REFINED Explosion on demand
ai_ammoresist.qc			// REFINED Ammo Resistance System effects and damage functions
ai_sight.qc					// REFINED Monster Sight System for getting angry on sight or following
ai_subs.qc					// REFINED AI Core Movement Subroutines
ai_states.qc				// REFINED AI Core System of stand, walk, and run
victory.qc					// REFINED Victory Trigger for when all monsters are killed.
ai_combat.qc				// REFINED Damage System for all damage application
ai_minions.qc				// REFINED Minion System for monsters spawning monsters and minion eggs
ai_checkattack.qc			// REFINED Check routines form monsters to decide when and which attacks
ai_ryu.qc					// REFINED AI Behavior System for Drake Dragons and Nightshade

// Drake
drake_reflect.qc			// REFINED Reflector Shield
drake_cutscene.qc			// REFINED Old somewhat jerky cinematic sequence tools. Available as a curiosity.

// Projectiles and Effects
//-----------------------------------------------------------------------------
projectiles_beam.qc         //  Lightning and Beam Attacks
projectiles_explode.qc		//  Projectile Explosions
projectiles_think.qc		//  Projectile Thinks
projectiles_touch.qc		//  Projectile Touches
projectiles_launch.qc		//  Projectile System for all projectiles that cause damage.
projectiles_aim.qc			//  Projectile Aims

// World and Main System Setup
//-----------------------------------------------------------------------------
precache_keep.qc			// REFINED Global precaches called by worldspawn.
world.qc					// REFINED Worldspawn, starting frame, and map start world checks

// Player and Powerup Systems
//-----------------------------------------------------------------------------
shrine.qc					// REFINED Shrine System for various beneficaial auras and rewards.
client_mapvar.qc			// REFINED Map Variables System for remembering states between maps for hubs and multi-map hunts.
client_debuff.qc			// REFINED Player Buff System for damage over time effects and auras
monster_debuff.qc			// REFINED Monster Debuff System for applying damage over time from fire, poison, etc.
client_power.qc				// REFINED Client Powerup System for applying effects from powerups and screenflashes when ending.
client_evilmode.qc			// REFINED Copper's 50 Health Max on Nightmare, adapted for skill 4
client_legs.qc				// REFINED Visible player legs when you look down
client_vehicle.qc			// REFINED Visible player vehicle while driving
client.qc					// REFINED Player, Level Start, Level Change, Savegame Variables
client_obituary.qc			// REFINED Death messages to notify what killed the player.
client_camera.qc			// REFINED Intermission Camera System for displaying set pieces after completing a level.
client_info.qc				// REFINED Player starts and helper entities
client_advinfo.qc			// REFINED Player debug info and secret area locator

// Items
//-----------------------------------------------------------------------------
items.qc					// REFINED Main items system.
items_weapons.qc			// REFINED Weapon item pickups.
items_ammo.qc				// REFINED Ammo item pickups.
items_armor.qc				// REFINED Armor item pickups.
items_artifacts.qc			// REFINED Artifacts and powerups.
items_drake.qc				// REFINED Drake items
items_progspn.qc			// REFINED Progressive Spawn System for picking a list of items up in the same order.

// Weapons
//-----------------------------------------------------------------------------
weapons_aoa.qc				// N/A - Letting Ryanscissorhands update this one as this is his contribution from Arms of Asgard.  NOTE: Different style from my personal one which is mostly LLVM and curly brace on same line.  Leaving as is for his sanity ;).
weapons.qc					// REFINED Weapon System for firing, cycling, and view models.
drake_hook.qc				// REFINED Drake's improved implementation of the Rogue grappling hook
player.qc					// REFINED Player animations and hook functions for animation tied weapons' firing

// Lights
//-----------------------------------------------------------------------------
lights.qc					// REFINED Light entities.

// Brush Entities
//-----------------------------------------------------------------------------
triggers_states.qc			// REFINED AD Entity State System triggers
triggers.qc					// REFINED Triggers for various functions, once, multiple, hurt, etc.  Standard and AD.
triggers_keep.qc			// REFINED Various other triggers.
targets.qc					// REFINED Relay and counter
music.qc					// REFINED Music
func.qc						// REFINED Brush-based entities
func_doors.qc				// REFINED Door - func_door
func_doorsecret.qc			// REFINED Secret Door - func_door_secret
func_buttons.qc				// REFINED Button - func_button
func_pswitch.qc				// REFINED Pressure Plate Button - func_pressureswitch
func_insvolume.qc			// REFINED func_insidevolume for triggering entry, exit, and partial events in an area
func_plats.qc				// REFINED Standard Two-Position Elevator Plat - func_plat
elevator.qc					// REFINED Rogue multi-level bidirectional elevator and its special button
func_trains.qc				// REFINED Train - func_train

// Miscellaneous Decorations, Effects, and Traps
//-----------------------------------------------------------------------------
misc_explobox.qc			// REFINED Exploding boxes and barrels
misc.qc						// REFINED Miscellaneous entities and effects
misc_model.qc				// REFINED Entity for displaying any model or sprite with support for looping frames or skins - misc_model
misc_corpses.qc				// REFINED Corpses
misc_camera.qc				// REFINED Cinematic Camera System from AD, support bezier curves and multiple fade in/out options.
misc_keep.qc				// REFINED Various miscellaneous entities that had no other good file to call home.
misc_drake.qc				// REFINED Miscellaneous Drake entities
misc_textbook.qc			// REFINED Reading System for textbooks, murals, screens, etc. from AD. Darkens screen to aid reading.
misc_targetdummy.qc			// REFINED Target Dummy from AD used for weapons testing
misc_q15.qc					// REFINED Miscellaneous Quake 1.5 stuff
traps.qc					// REFINED Traps, standard and AD
traps_hipnotic.qc			// REFINED Hipnotic traps
traps_pendulum.qc			// REFINED Rogue Pendulum, enhanced with AD additions
traps_sawblade.qc			// REFINED Rogue Buzzsaw, enhanced with AD additions
traps_turret.qc				// REFINED Rubicon 2 / RRP turret trap
sounds.qc					// REFINED Ambient Sound System, looping and triggered with support for custom sounds.
misc_rubicon2.qc			// REFINED Miscellaneous Rubicon stuff
versus.qc					// REFINED Versus Game Mode from Keep where survivors(players) collect coins to buy an arsenal to use against hordes of enemies released by gamemasters (players) who collect gibs to buy monsters
soul.qc						// REFINED Floating souls for wraiths to collect.
hiprubbl.qc					// REFINED Rubble that tumbles and hurts...remember that impossible tumbler in the Lost Mines?
hip_part.qc					// REFINED Particle field for force fields
hip_brk.qc					// REFINED Damage threshold trigger and breakaway (dissappearing on trigger) wall
hipclock.qc					// REFINED Rotating clock hands that actually work
earthq.qc					// REFINED Rogue's Earthquake System.
revive.qc 					// REFINED Drake's revival system.  Used by necromancer and bane.
misc_hostage.qc				// REFINED Drake's Cutscene Actor
vigil.qc					// REFINED From Wright's Vigil map, had a useful triggerable Congratulations Intermission
qrobot.qc 					// REFINED Qmaster's Super Syncronized Trains, boring right, until the whole world is made of them.
progs_redfield.qc			// REFINED Redfield's decorations and effects.
misc_ballista.qc			// Hexen2 Ballista giant crossbow turret.

// Hipnotic stuff
//-----------------------------------------------------------------------------
hipdecoy.qc					// Actor for end sequence.
hipmisc.qc					// Miscellaneous stuff.
hipwater.qc					// func_bobbingwater
hiptrain.qc					// func_train2
hipholes.qc					// Bullet hole sprites for shotguns.

// Rogue stuff
//-----------------------------------------------------------------------------
lightnin.qc					// Rogue's lightning traps.
ending.qc					// Rogue's ending sequence
timemach.qc					// Rogue's time machine
sphere.qc					// REFINED Rogue's Vengeance Sphere powerup.
//teamplay.qc				// Rogues' special capture the flag code and other multiplayer stuff.
//dmatch.qc					// Rogue's special deathmatch code.

// Kinn's Marcher Fortress and Bastion stuff
//-----------------------------------------------------------------------------
//m_bdwspawn.qc				// Handles spawning monster hordes in grid pattern packs.

// Pox's extras_r4 Particle Effects and Various Entities
//-----------------------------------------------------------------------------
extras_ai.qc				// REFINED Swimming Surface-Smart AI
extras_train.qc				// REFINED Extended Train
extras_buttons.qc			// REFINED Disableable Buttons and Parentable Switches
extras_emitters.qc			// REFINED Specialty Particle Emitters and Effector Triggers
extras_water.qc				// REFINED Moving Water Volumes
extras_triggers.qc			// REFINED Miscellaneous Triggers
extras_fx.qc				// REFINED Alternate Sparks and Sound Emitters
extras_misc.qc				// REFINED Miscellaneous Brush Entities

// Quake Rally...oh yes rally ;)
//-----------------------------------------------------------------------------
rally.qc					// Vehicle Handling and Weapons
rally_entry.qc				// REFINED Vehicle Entry and Exit

// Monsters
//-----------------------------------------------------------------------------
monsters.qc					// Global monster functions for spawning and death.
mon_demon.qc				// Fiend, vanilla, lunging jumping claw slinging son of a netherworldy kangaroo-tiger
mon_dog.qc					// Rottweiler, vanilla, bad doggie!
mon_fish.qc					// Rot Fish, vanilla, essentially a sluggish pirahna
mon_hknight.qc				// Death Knight, vanilla, basic knight with spikey armor that shoots magic spray at you
//mon_zmaster.qc			// Zombie Master, Custents, tough mysterious knight who can summon zombies
mon_knight.qc				// Knight, vanilla, standard tin-can with a sword
mon_ogre.qc					// Ogre, vanilla, ugly chainsaw toting monster that lobs grenades at you
mon_enforcer.qc				// Enforcer, vanilla, laser toting soldier with a helmet
mon_enforcers_lunaran.qc 	// Lunaran stuff, located here to inherit $frame references from mon_enforcer.qc
mon_shalrath.qc				// Vore, vanilla, three-legged spider-like she-witch that hurls a magical homing purple star that explodes
mon_shambler.qc				// Shambler, vanilla, large lightning shooting white bulky muscled creature with bloodied white seal fur and claws
mon_soldier.qc				// Grunt, vanilla, psychotic shotgun toting soldier who has had his mind rotted by Quake.
mon_tarbaby.qc				// Spawn, vanilla, bouncing bob of goo that explodes on death and is painful to the touch.
mon_wizard.qc				// Scrag, vanilla, flying and spits slime (no poison effects though)
mon_zombie.qc				// Zombie, vanilla, must be gibbed to kill
mon_boil.qc					// Boil, AD, walking ball of flesh that explodes on death
mon_centurion.qc			// Centurion, AD, floating enforcer on a hoverpad
mon_dcrossbow.qc			// Crossbow Knight, AD, medieval enforcer-type monster but with more dangerous bolts.
mon_dfury.qc				// Fury Knight, AD, a Persian looking knight with twin blades and magic attacks similar to a vore.  Lunges at you.
mon_dguard.qc				// Death Guard, AD,
mon_dknight.qc				// Death Knight, AD,
mon_drole.qc				// Drole, Quoth but with AD updates, a quad tentacled monstrosity that shoots exploding fireballs and chases you when enraged.
mon_dsergeant.qc			// Death Seargent, AD, blue flail knight with powerful sweeping flail attack.
mon_freddie.qc				// Freddie / Eddie, Quoth's ogre mech with AD updates, half ogre, half mech, all mean.
mon_gargoyle.qc				// Gargoyle, Kinn's imps but with AD's updates, hurls fire balls.
mon_gaunt.qc				// Gaunt, Quoth's bat winged lightning thrower with optional AD plasma bolts instead.
mon_golem.qc				// Golem, Hexen 2's stone giant with AD's effects.
mon_hogre.qc				// Hunter Ogre, AD,
mon_hogreham.qc				// Hammer Ogre, AD,
mon_hogremac.qc				// Mace Ogre, AD,
mon_jim.qc					// Jim / Bob, Quoth's lovable floating robot that shoots either lasers or rockets, with optional AD behavior.
mon_lostsoul.qc				// Lost Soul, Doom's floating skull heads as implemented in AD.
//mon_manglioch.qc			// Does not yet exist!
mon_megaforce.qc			// Mega Enforcer, Lunaran's mega enforcer with AD updates.
mon_minotaur.qc				// Minotaur / Shuffler / Gauroch, Kinn's implementation of the Hexen 2 goat demon with AD updates.
mon_pyro.qc					// Pyro, Rubicon's flamethrower wielding enforcer with AD updates.
mon_scorpion.qc				// Scorpions, AD's implementation of Hexen 2 scorpions.
mon_seeker.qc				// Hunter Seeker, Rubicon's robot with power shields and AD's updates.
mon_skullwiz.qc				// Skull Wizard, AD,
mon_voreling.qc				// Voreling, Quoth's baby vore, everyone's favorite monster with AD updates.
mon_spider.qc				// Spider, Kinn's cute spider monsters, with AD updates.
mon_wraith.qc				// Wraith, AD's reimplementation of Rogue's wrath, complete with two versions - fire or minion egg throwing.
mon_zombiek.qc				// Zombie Knight, AD,
mon_xmas_elf.qc				// Elf, Twisted Christmas's elf with candy cane club, Santa's helper, with AD updates.
mon_xmas_raindeer.qc		// Raindeer, Twisted Christmas's raindeer that shoots nails, with AD updates.
mon_xmas_snowman.qc			// Snowman, Twisted Christmas's nail shooting snowman with AD updates and Qmaster's addition of Rogue lava nail option.
mon_xmas_santa.qc			// Santa, Twisted Christmas's Santa with AD's evil option shooting a cannon.
mon_bossidchthon.qc // AD's ID1 Bosses
mon_bossidshub.qc
mon_bossxxchthon.qc
mon_bossxxshub.qc
mon_bossboglord.qc // AD Bosses
mon_bosseidolon.qc
mon_bossfiretop.qc
mon_bossicegolem.qc
mon_bossnour.qc
mon_deflector.qc // AD 1.81 additions
mon_dprince.qc
mon_steelclaw.qc
//mon_sweeper.qc 			// Hypnogogia Monsters  // Does not yet exist!
//mon_turretbal.qc 			// Hypnogogia Monsters  // Does not yet exist!
//mon_bossmammoth.qc		// Hypnogogia Monsters  // Does not yet exist!
//mon_bossphobetor.qc 		// Hypnogogia Monsters  // Does not yet exist!
//mon_bosspsyder.qc 		// Hypnogogia Monsters  // Does not yet exist!
mon_bossjudicator.qc		// Justice and Judicator, AD, powerful knights with Bal's heavenly theme.
mon_armagon.qc				// Armagon, Hipnotic, he who scourges, half robot and half gigantic gremlin-like creature.  Fires lasers and rockets in barrages.
mon_centroid.qc				// Scourge, Hipnotic, a scorpion with two nailguns in place of claws but still with a nasty tail.
mon_spikemine.qc			// Spikemine, Hipnotic, floating spikey ball that seeks targets and explodes on contact
mon_gremlin.qc				// Gremlin, Hipnotic, furry devil that steals your weapons and uses them against you, albeit not quite as efficiently.
mon_eel.qc					// Electric Eel, Rogue, that zaps nearby enemies, also includes AD variant that shoots plasma bolts.
mon_invis_sw.qc				// Invisible Swordsman, Rogue, a floating sword wielded by a swordsman who happens to be invisible. Also includes Redfield's version with eyes and leaning start.
mon_lavaman.qc				// Hephaestus, Rogue, a small version of Chthon.
mon_mummy.qc				// Mummy, Rogue, a bandage wrapped super zombie that takes a lot to kill.
mon_wrath.qc				// Wrath, Rogue, a floating ghoul in a hood that hurls magic stars and explodes on death leaving only a bit of bone.
mon_wrath_overlord.qc		// Overlord, Rogue, a 4-armed super Wrath that can teleport to random (mapper specified) locations.
mon_morph.qc				// Guardian, Rogue, 4 versions of different types of egyptian/greek guardians that morph out of the ground and spawn weaker copies.
mon_dragon.qc				// Dragon, Rogue, a large dragon that flies about a set path and shoots fire balls at you, with Qmaster's overhaul to make him more epic.
mon_tarbabymitosis.qc		// Mitosis Spawn, Rogue, a green spawn that can split into two.
mon_ogreflak.qc				// Flak Ogre, Kinn's ogre that shoots nails, with Qmaster's addition of Rogue lava nail option.
mon_supergrunt.qc			// Super Grunt, Kinn's more powerful grunt.
mon_deathguard.qc			// Death Guard, Quoth's slightly more powerful knight in between a knight and a death knight.
mon_dlord.qc				// Death Lord, Quoth's knight with magical aura shield
mon_polyp.qc				// Polyp, Quoth's floating blob of green goo.
mon_gug.qc					// Gug, Quoth's lovecraftian behemoth that shoots bile bombs at you and shakes the ground to hurt you.
mon_vermis.qc				// Vermis, Quoth, giant tentacled boss horror that emerges from a pit.
mon_sentinel.qc				// Sentinel, Quoth's floating tentacled robot behaving as a turret.
mon_floyd.qc				// Floyd, Madfox's copy of the funny cylindrical robot from Super Metroid, with Rubicon and AD updates.
mon_archer.qc				// Archer, Drake's implementation of the Hexen 2 Archer and a more powerful Assassin archer.
mon_baron.qc				// Baron, Drake's implementation of the Nehahra baron and Drakes 5 elemental barons intended as bosses.
mon_ryu.qc					// Dragons, Drake's dragons (ryu is Japanese for dragon), Fire, Ice, etc. variants.  Drake's namesake (Drake = Dragon)
mon_shade.qc				// Nightshade, Drake's dark and powerful ghostly dragon
mon_bandit.qc				// Bandit / Goblin, Drake's woodlands enforcer-type enemies.
mon_vomitus.qc				// Vomitus, Qtest, Drake's implementation.
mon_necro.qc				// Necromancer (boss), Acolyte, Warlock, and Sorceror, Drake's wizard reimplementations from Hexen series.
mon_cyber.qc				// Cyberdemon, Doom, Drake's implementation.
mon_hlord_dragon.qc			// The Beast (The Dark Lord transforms into a dragon beast), Drake.
mon_hlord.qc				// The Dark Lord, Bane, and Hell Knight Boss (HK Boss), various might Drake enemies from SOE, Rapture, and other Tronyn maps.
mon_rebel.qc				// Crossbow Bandit, Drake, enforcer-type enemy.
//mon_dreadwrath.qc			// Dread Lord (Drake's version of the Rogue Overlord aka super wrath)
mon_trog.qc					// Nemesant, Trogolodite, and Trogboss, Zerstorer, with Drake updates, floating voodoo-doll-like wizards with various spells.
//mon_zerst.qc				// Zerstorer, from Zerstorer, heavily modified by Qmaster to make use of Madfox's added poses.
//mon_enf2.qc				// Nehahra
//mon_enf3.qc				// Nehahra
//mon_beard.qc				// Nehahra
mon_nehahra.qc				// Nehahra, giant dragon-like creature that spits flame
//mon_mistermax.qc			// Maxwell, aka The Mister, Nehahra final boss.
//mon_archgaunt.qc			// Nehahra
//mon_jagger.qc				// Jagger, Nehahra, DENIZEN creature that likes swimming for fish.
mon_wraith_nehahra.qc		// Void Wraith, Nehahra, floats about collecting souls, but renamed for Keep since there are too many Wraths and Wraiths
mon_axeman.qc				// Axeman, Drake, from SOE (Soul of Evil).  Very fast axe wielding maniac.
mon_axegrunt.qc				// Axe Grunt, Lunaran's axe wielding grunt.
mon_drone.qc				// Drone, Drake, from OUM (Operation Urth Majik) flying small robot with lasers.  Early predecessor to Jim / Bob.
mon_tur.qc					// Turret, Drake, from OUM, stationary tech trap that can retract and extend.  Likely derived from Custents.
mon_turret.qc				// Turret, Custents, stationary tech trap that can shoot phase beams
//mon_srvomech.qc			// Servo Mech, Custents, walking robot. Also player controllable via the vehicle system
mon_hydra.qc				// Hydra, Hexen II, implemented by khreathor as part of extras_r5 update patch to extras_r4
mon_snakeman.qc				// Snakeman, a snake with twin nailguns.
mon_wspider.qc				// Willy the Spider, an old classic spider that shoots scrag spit.
mon_anaconda.qc				// Anaconda, Andaconda, a large snake-like boss made for a promo map for the Anaconda movie.
mon_virtusboss.qc			// Virtus Worm, Virtus, a large worm boss.  Likely made using an old demo CD's model, though it's not quite identical.
//mon_redback.qc			// Black Widow from tefdbl3 by T. H. Johansen (TJ)
mon_inquisitor.qc			// Inquisitor, by Qmaster, uses model from Hexen II but otherwise is all mine with collaborative ideas from Tronyn.
mon_ogle.qc					// Ogle, Heretic2, DENIZEN, Qmaster's implementation with special poses and behavior.
mon_octa.qc					// Octopus by madfox
//mon_lampoon.qc			// Lampoon fish by madfox
//mon_rhynch.qc =			// Jelly Fish by madfox
//mon_balrog.qc				// Balrog by madfox
//mon_xogre.qc				// Elden Ogre by madfox derived from QTest
mon_fragy.qc				// Frog by madfox
//mon_orgulus.qc			// Dr. Mhorbo Orgulus by madfox
//mon_samuri.qc				// Samuri Knight by madfox
mon_mcorn.qc				// Manticore by madfox
mon_swarm.qc				// Bees by madfox
mon_sheep.qc				// Hexen2 sheep, modified
mon_flytrap.qc				// Venus Fly Trap by madfox
mon_spellmas.qc				// Red worm boss called Baseboss from madfox's Phantom Pholly map.  Interesting trivia, this is probably the only mod that combines hipnotic and extras_r4
mon_fangel.qc				// Fallen Angel, Hexen 2, a fallen angel with two versions.
//mon_ubs.qc				// Uber Scrag, Travail, large scrag daddy that summons other scrags
mon_warlord.qc				// Warlord, SMC, using Quake 1.5 updates, special type of knight with a shield and sword.
mon_carnivean.qc			// Carnivean, SMC, using Quake 1.5 updates, giant frogman with a scythe.
mon_dfury_boss.qc			// Giant Fury Knight, Quake 1.5, giant upsized version of the AD Fury Knight, with noir version.
mon_shalrath_boss.qc		// Giant Vore, Quake 1.5, giant upsized version of the vore.
mon_reiver.qc				// Reiver, SMC, using Quake 1.5 updates, half skeleton that flies at you and sometimes has magical shield aura.
mon_oldone_tentacle.qc		// Tentacle, Quake 1.5, one of Shub-Niggurath's tentacles.  For use to spread her terror further than just her one small spot.
// mon_sknight.qc			// Crossbow Knight, The Lieutenant's version of the standard knight with a crossbow, enforcer-type.  Used in lthsp3, back2forwards.
mon_raven.qc				// Raven, Redfield, DENIZEN, black raven.
mon_huntress.qc				// Huntress, Redfield, A powerful swashbuckling huntress with sword and pistol.
mon_huntresscutscene.qc		// Huntress, Redfield, extra cutscene setup.
mon_karasu.qc				// Lord Karasu, Redfield, a powerful lord of a castle with magical attacks.
mon_spirit.qc				// Vengeful Spirit, Redfield, a ghostly lady who disappears and reappears when you least expect it most.
mon_wolf.qc					// Moonlight Guardian, Redfield, a giant wolf with a sword in his mouth.
mon_queen.qc				// Queen, Redfield, DENIZEN, non-combatant queen of the tower who can magically summon portals for you.
//mon_esquid.qc				// TaoV's Blue squid barnacle stationary plantlike monster (derived from shub)
//mon_ranger.qc				// Ranger, Drake, implemenation of the player as a singleplayer monster.  Capable of being a buddy.
mon_ogrelibrary.qc				// Nehahra library ogre and his cart

// Spawn System
//-----------------------------------------------------------------------------
spawn.qc					// Hipnotic spawn - must be LAST since it needs to know about EVERY monster for randomized spawning or explicit mapper spawning.

// General notes:
// Compiled with fteqccgui.exe (even on my Linux build via wine as it's nice)
//
// To use cpd (CopyPasteDetector) I have it installed and run the following:
// clear; sleep 1; ~/Downloads/pmd/pmd-bin-6.47.0/bin/run.sh cpd --files /home/qmaster/QUAKE/keep/keepsrc/*.qc --minimum-tokens 50 --language c
//
// Sometimes I vary the 50 above for the minimum tokens to find larger chunks
// of duplicate code.  Quite handy!