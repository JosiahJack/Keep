//=============================================================================
//       ___  ___  __            __   __  
// |__/ |__  |__  |__)     |\/| /  \ |  \
// |  \ |___ |___ |        |  | \__/ |__/                                                    
//
// Compiled by Qmaster
//
// Attributions: Arcane Dimensions (AD)
//
//
// Distribution / Copyright / Permissions 
//
// Please do not use any of these assets in ANY COMMERCIAL PROJECT.
// and remember to give credit if you use any of these assets. Please credit
// the appropriate authors of the various content used.  Refer to the credits
// folder.
//				  
// The QC files in this MOD are based on 1.06 source files by ID Software.
// These files are released under the terms of GNU General Public License v2 or
// later. You may use the source files as a base to build your own MODs as long
// as you release them under the same license and make the source available.
// Please also give proper credit. Check http://www.gnu.org for details.
//
// Quake is a registered trademark of id Software, Inc.
//
// All of these resources may be electronically distributed only at 
// NO CHARGE to the recipient.
//
// Stats:
// Entity count: 1
// Function count: 10
//
// Implements: Path Following for monsters and other entities such as trains
//
// Description:
// Handles following paths, their waypoints being path_corner entities.
// Also handles events at corners such as targets or attaching other entities
// to monsters.
//=============================================================================

float PATHC_EXACT = 1;		// Exact route logic
float PATHC_INSTANT = 2;	// Instantly move to this path_corner
float PATHC_REVERSE = 4;	// Train direction is reversed at this corner
float PATHC_NOPAUSE = 8;	// Train does not pause on this corner
float PATHC_RESET = 15;		// Use to reset spawnflags
float PATHC_TARGET1 = 16;	// Has target been found
float PATHC_TARGET2 = 32;	// Has target2 been found
float PATHC_BACKLINK = 64;	// Backward path route
float PATHC_DEADEND = 128;	// no targets found
float ARROW_PRIMARY = 1.5;	// Active route highlight
float ARROW_GREEND = 0;
float ARROW_BROWN = 1;
float ARROW_GREENL = 2;
float ARROW_WHITE = 3;
float ARROW_RED   = 4;
float STATE_ROUTE1 = 1;		// Route 1 is the priority (forward)
float STATE_ROUTE2 = 2;		// Route 2 is the priority (forward)
float STATE_ROUTE3 = 3;		// Route 3 is the priority (backward)
float STATE_EXACT = 4;		// Switch to exact route selection
float STATE_RANDOM = 5;		// Switch to random route selection


/*QUAKED path_corner (0.5 0.3 0) (-8 -8 -24) (8 8 48) EXACT INSTANT REVERSE NOPAUSE
Node based path routing system
-------- KEYS --------
targetname   : Name of current path corner
corner_event : Name of target(s) to trigger when used/touched
corner_route : Change path_corner route (1-3 routes, 4=exact, 5=random)
corner_switch: Change spawnflags REVERSE (-1=NO, 1=YES, 2=Toggle)
corner_pause : Change spawnflags NOPAUSE (-1=NO, 1=YES, 2=Toggle)
corner_pstate: Change passive state (-1=OFF, 1=ON, 2=TOGGLE)
state        : Starting route (1=forward, 2=alt forward, 3=backward)
target       : Targetname of FORWARD route
target2      : Alternative FORWARD route
targetback   : Override default BACKWARD route
wait   : fixed amount of time to pause at corner (=-1 stop)
delay  : random amount of time to pause at corner
alpha  : Override default for visual arrows (def=0.35)
speed  : Override default speed of func_train (def=100)
-------- SPAWNFLAGS --------
EXACT     : Exact route logic (def=random route choices)
INSTANT   : Move instantly to this corner if next destination
REVERSE   : Train direction is reversed for next corner
NOPAUSE   : Train does not pause on this path corner
-------- NOTES --------
Node based path routing system

======================================================================*/
entity(string arrowmdl, vector arroworg) path_corner_spawnarrow = {
	local entity arrow;

	arrow = spawn();
	arrow.classtype = CT_ATTACHMENT;
	arrow.movetype = MOVETYPE_NONE;
	arrow.solid = SOLID_NOT;
	setmodel(arrow, arrowmdl);
	setorigin(arrow, arroworg);
	setsize(arrow, VEC_ORIGIN, VEC_ORIGIN);
	if (engine == ENG_DPEXT) arrow.effects = arrow.effects + EF_NOSHADOW; // If DP engine active remove particle shadow
	return arrow;
};

// Forward  - PATH_TARGET1  (self.attachment)
// Forward2 - PATH_TARGET2  (self.attackment2)
// Backward - PATH_BACKLINK (self.attachment3)
// PATHC_DEADEND = Back link is missing
// Original logic did not cope with broken or missing target/target2.  Moved red arrow updates to the end to catch all broken links
void() path_corner_updatearrow = {
	if (self.spawnflags & PATHC_TARGET2 && self.state == STATE_ROUTE2) {
		// ROUTE 2 (forward2) active
		if (self.attachment) { self.attachment.skin = ARROW_GREENL; self.attachment.alpha = self.alpha; }
		if (self.attachment2) { self.attachment2.skin = ARROW_WHITE; self.attachment2.alpha = self.alpha*ARROW_PRIMARY; }
		if (self.attachment3) { self.attachment3.skin = ARROW_GREEND; self.attachment3.alpha = self.alpha; }
	} else if (self.spawnflags & PATHC_BACKLINK && self.state == STATE_ROUTE3) {
		// ROUTE 3 (backward) active
		if (self.attachment) { self.attachment.skin = ARROW_GREEND; self.attachment.alpha = self.alpha; }
		if (self.attachment2) { self.attachment2.skin = ARROW_GREENL; self.attachment2.alpha = self.alpha; }
		if (self.attachment3) { self.attachment3.skin = ARROW_WHITE; self.attachment3.alpha = self.alpha*ARROW_PRIMARY; }
	} else {
		// ROUTE 1 (forward) active (default)
		if (self.attachment) { self.attachment.skin = ARROW_WHITE; self.attachment.alpha = self.alpha*ARROW_PRIMARY; }
		if (self.attachment2) { self.attachment2.skin = ARROW_GREENL; self.attachment2.alpha = self.alpha; }
		if (self.attachment3) { self.attachment3.skin = ARROW_GREEND; self.attachment3.alpha = self.alpha; }
	}
	// Draw any broken/missing routes with RED arrows
	if (!(self.spawnflags & PATHC_TARGET1) && self.attachment) { self.attachment.skin = ARROW_RED; self.attachment.alpha = self.alpha; }
	if (!(self.spawnflags & PATHC_TARGET2) && self.attachment2) { self.attachment2.skin = ARROW_RED; self.attachment2.alpha = self.alpha; }
	if (!(self.spawnflags & PATHC_BACKLINK) && self.attachment3) { self.attachment3.skin = ARROW_RED; self.attachment3.alpha = self.alpha; }
};

void() path_corner_setuparrow = {
	if (query_configflag(SVR_DEVHELPER)) return; // Visual AI pathing only active in dev mode

	if (!self.alpha) self.alpha = 0.35; // Setup default alpha for arrows
	if (self.spawnflags & PATHC_BACKLINK) { // Draw back link arrow
		self.attachment3 = path_corner_spawnarrow( self.mdl, self.oldorigin+'0 0 -8');
		self.movedir = normalize(self.movetarget3.oldorigin - self.oldorigin);
		self.attachment3.angles = vectoangles(self.movedir);
	} else {
		// Missing backlink, this is a bad situation!
		// Highlight this problem with a pointing up RED arrow

		// There is no back link, so use forward target instead
		if (self.spawnflags & PATHC_TARGET1) self.oldenemy = self.movetarget;
		else self.oldenemy = self;
		
		self.attachment3 = path_corner_spawnarrow( self.mdl, self.oldorigin+'0 0 -8');
		self.movedir = normalize(self.oldenemy.oldorigin - self.oldorigin);
		self.attachment3.angles = vectoangles(self.movedir);
		makevectors(self.movedir);
		self.attachment3.angles = self.attachment3.angles + vectoangles(v_up);
	}
	
	// Draw route choice 1 (target)
	if (self.spawnflags & PATHC_TARGET1) {
		self.attachment = path_corner_spawnarrow( self.headmdl, self.oldorigin);
		self.movedir = normalize(self.movetarget.oldorigin - self.oldorigin);
		self.attachment.angles = vectoangles(self.movedir);
	} else {
		// Missing forward link (deadend)
		// Highlight this issue with a pointing up RED arrow

		// There is no forward link, so use back link instead
		if (self.spawnflags & PATHC_BACKLINK) self.oldenemy = self.movetarget3;
		else self.oldenemy = self;
		self.attachment = path_corner_spawnarrow( self.headmdl, self.oldorigin);
		self.movedir = normalize(self.oldenemy.oldorigin - self.oldorigin);
		self.attachment.angles = vectoangles(self.movedir);
		makevectors(self.movedir);
		self.attachment.angles = self.attachment.angles + vectoangles(v_up);
	}
	
	// Draw route choice 2 (target2)
	if (self.spawnflags & PATHC_TARGET2) {
		self.attachment2 = path_corner_spawnarrow( self.headmdl, self.oldorigin);
		self.movedir = normalize(self.movetarget2.oldorigin - self.oldorigin);
		self.attachment2.angles = vectoangles(self.movedir);
	}

	path_corner_updatearrow(); // Update arrows if route logic active
};

void() path_corner_setuptargets = {
	local entity fdest;
	
	self.movetarget = self.movetarget2 = self.movetarget3 = world; // Reset primary, secondary and backlink target entities

	// PRIMARY TARGET (target / self.movetarget)
	if (self.target != "") { // Not used for entity I/O, just pathing
		fdest = find (world, targetname, self.target);
		while(fdest) {
			if (fdest.classtype == CT_PATHCORNER) {
				// Update (spawnflags) path_corner and save entity
				self.spawnflags = self.spawnflags | PATHC_TARGET1;
				self.movetarget = fdest;
				fdest = world; // Exit loop
			}
			// Keep searching for path_corner entity
			else fdest = find(fdest, targetname, self.target);
		}
	}

	// SECONDARY TARGET (target2 / self.movetarget2)
	if (self.target2 != "") { // Not used for entity I/O, just pathing
		fdest = find (world, targetname, self.target2);
		while(fdest) {
			if (fdest.classtype == CT_PATHCORNER) {
				// Update (spawnflags) path_corner and save entity
				self.spawnflags = self.spawnflags | PATHC_TARGET2;
				self.movetarget2 = fdest;
				fdest = world; // Exit loop
			}
			// Keep searching for path_corner entity
			else fdest = find(fdest, targetname, self.target2);
		}
	}

	// BACKLINK TARGET (targetback / self.movetarget3)  Has the path corner back link override key been used?  If this override string does not exist, weird things will happen 
	if (self.targetback != "") {
		fdest = find (world, targetname, self.targetback);
		while(fdest) {
			// Update (spawnflags) path_corner and save entity
			if (fdest.classtype == CT_PATHCORNER) {
				self.spawnflags = self.spawnflags | PATHC_BACKLINK;
				self.movetarget3 = fdest;
				fdest = world; // Exit loop
			}
			// Keep searching for path_corner entity
			else fdest = find(fdest, targetname, self.targetback);
		}
	} else {
		// Setup back link name, if none exist use targetname
		self.targetback = self.targetname;
		
		// Cycle through list for BACKLINK path_corner
		fdest = find (world, target, self.targetback);
		while(fdest) {
			// Update (spawnflags) path_corner and save entity
			if (fdest.classtype == CT_PATHCORNER) {
				self.spawnflags = self.spawnflags | PATHC_BACKLINK;
				self.movetarget3 = fdest;
				fdest = world; // Exit loop
			}
			// Keep searching for path_corner entity
			else fdest = find(fdest, target, self.targetback);
		}
	}

	// Double check TARGET2 before declaring a deadend
	if ( !(self.spawnflags & PATHC_BACKLINK) ) {
		fdest = find (world, target2, self.targetback);
		while(fdest) {
			if (fdest.classtype == CT_PATHCORNER) {
				self.spawnflags = self.spawnflags | PATHC_BACKLINK;
				self.movetarget3 = fdest;
				fdest = world; // Exit loop
			}
			// Keep searching for path_corner entity
			else fdest = find(fdest, target2, self.targetback);
		}
	}

	// Bad situation : Found a path corner with no back-link
	// label as deadend (direction reverse) and circular link
	if ( !(self.spawnflags & PATHC_BACKLINK) ) {
		dprint("\b[PATH_CORNER]\b ("); dprint(self.targetname);
		dprint(") - Deadend found\n");
		if (self.movetarget) self.movetarget3 = self.movetarget;
		else self.movetarget3 = self;
		self.spawnflags = self.spawnflags | PATHC_DEADEND;
	}
	
	// Random time interval as this is not important
	// Generate developer arrow models on path_corner
	if (developer > 0) {
		self.nextthink = time + 0.5 + random();
		self.think = path_corner_setuparrow;
	}
	
};

// This is a TRIGGER entry point only!
void() path_corner_use = {
	// Change spawnflags NOPAUSE (-1=NO, 1=YES, 2=Toggle)
	if (other.corner_pause) {
		// Store the parameter locally so it can modified
		self.corner_pause = other.corner_pause;
		if (self.corner_pause == 2) {
			if (self.spawnflags & PATHC_NOPAUSE) self.corner_pause = 1;
			else self.corner_pause = -1;
		}
		// The toggle state uses the on/off code by storing the value locally and modifying it beforehand
		if (self.corner_pause > 0) {
			if (self.spawnflags & PATHC_NOPAUSE) self.spawnflags = self.spawnflags - PATHC_NOPAUSE;
			self.wait = -1;
		} else if (self.corner_pause < 0) {
			self.spawnflags = self.spawnflags | PATHC_NOPAUSE;
			self.wait = 0;
		}
	}

	// Change spawnflags REVERSE (-1=NO, 1=YES, 2=Toggle)
	if (other.corner_switch) {
		// Store the parameter locally so it can modified
		self.corner_switch = other.corner_switch;
		if (self.corner_switch == 2) {
			if (self.spawnflags & PATHC_REVERSE) self.corner_switch = -1;
			else self.corner_switch = 1;
		}
		// The toggle state uses the on/off code by storing the value locally and modifying it beforehand
		if (self.corner_switch > 0) {
			self.spawnflags = self.spawnflags | PATHC_REVERSE;
		} else if (self.corner_switch < 0) {
			if (self.spawnflags & PATHC_REVERSE) self.spawnflags = self.spawnflags - PATHC_REVERSE;
		}
	}

	// Change speed of train moving towards path_corner (default=100)
	if (other.corner_speed > 0) self.speed = other.corner_speed;

	// Changing routes?
	if (other.corner_route) {
		// Double check that the routes exist before setting them
		if (other.corner_route == STATE_ROUTE1 && 
			self.spawnflags & PATHC_TARGET1) self.state = STATE_ROUTE1;
		else if (other.corner_route == STATE_ROUTE2 && 
			self.spawnflags & PATHC_TARGET2) self.state = STATE_ROUTE2;
		else if (other.corner_route == STATE_ROUTE3 && 
			self.spawnflags & PATHC_BACKLINK) self.state = STATE_ROUTE3;
		// If changing routing logic, make sure spawnflag is updated
		else if (other.corner_route == STATE_EXACT) {
			self.spawnflags = self.spawnflags | PATHC_EXACT;
			self.state = STATE_ROUTE1;
		} else if (other.corner_route == STATE_RANDOM) {
			// When routing logic is changed, need to reset state
			if (self.spawnflags & PATHC_EXACT) self.spawnflags = self.spawnflags - PATHC_EXACT;
			self.state = STATE_ROUTE1;
		}
		dprint("Corner ("); dprint(self.targetname);
		dprint(") Route ("); dprint(ftos(self.state));
		dprint(")\n");
	} else {
		// Toggle route selection if EXACT routing logic is active
		// and the path corner has multiple routes available
		if (self.spawnflags & PATHC_EXACT && self.spawnflags & PATHC_TARGET2) {
			if (self.state == STATE_ROUTE1) self.state = STATE_ROUTE2;
			else if (self.state == STATE_ROUTE2) self.state = STATE_ROUTE3;
			else self.state = STATE_ROUTE1;
		}
	}

	// Visual AI pathing only active in dev mode
	if (developer > 0) path_corner_updatearrow();
};

void() path_corner_stop = {
	other.goalentity = other.movetarget = world;
	other.pausetime = time + LARGE_TIMER;
	other.think = other.th_stand;
	other.nextthink = time + 0.05;
};

void() ogle_pushcart1;

void(entity mon, entity obj) give_monster_object = {
	local entity tself;
	local vector org, out, up;

	tself = self;
	self = mon;
	makevectors(self.angles);
	out = v_forward;
	out = normalize (out);
	up = NewVector(0,0,self.attachment_offset_z);  // put out in front of monster OBJECT_OFFSET units
	org = ((self.origin + (((self.bbmaxs_x * 2)+self.attachment_offset_x) * out)) + up);
	mon.entattachment = obj;
	setorigin(obj,org); // ok we got it.
	mon.hasobject = "true"; // signal that we are holding something
	if (self.classtype == CT_MONOGLE) ogle_pushcart1();
	self = tself; // restore previous self
};

void(entity mon) take_monster_object = {
	mon.hasobject = "";
	mon.entattachment = world;
};

void() path_corner_touch = {
	if (!(other.flags & FL_MONSTER)) return;	// ONLY Monsters can use path corners
	if (other.health < 1) return;				// Dead things don't need path guidance
	if (other.enemy) return;					// In combat, no time to follow paths
	if (other.movetarget != self) return;		// Suppose to follow this corner?

	// If ogre, play chainsaw drag sound(50% of the time)
	if (other.classtype == CT_MONOGRE || other.classtype == CT_MONHOGRE) {
		if (random() > 0.5) sound(other, CHAN_VOICE, "ogre/ogdrag.wav", 1, ATTN_IDLE);
	}

	// Fire any event targets (activator = monster)
	if (self.corner_event) trigger_strs(self.corner_event,other);

	// We have an object to give the monster!
	if (self.entactive && self.counttarget != "") {
		self.entactive = FALSE;
		self.entattachment = find(world,targetname,self.counttarget);
		if (self.entattachment) {
			give_monster_object(other,self.entattachment);
			self.entattachment = world; // reset, we don't have one anymore
		}
	} else if (self.entactive) {
		if (other.attachment != world) take_monster_object(other);
	}

	// Check if passive state switch active (-1=OFF, 1=ON, 2=TOGGLE)
	if (self.corner_pstate != 0) {
		// Only use exact values (-1,1,2) no default/else functionality
		if (self.corner_pstate == -1) change_passivestate(other,0);
		else if (self.corner_pstate == 1) change_passivestate(other,1);
		else if (self.corner_pstate == 2) change_passivestate(other,2);
	}
	// Check if this path_corner is a dead end? (no target)
	if (self.spawnflags & PATHC_DEADEND) path_corner_stop();
	// Has this path corner been linked yet? Try again?
	if ( !(self.spawnflags & PATHC_TARGET1) ) path_corner_setuptargets();

	// Is there a target to move towards?
	if (self.spawnflags & PATHC_TARGET1) {
		// Check for a second random path?
		if (self.spawnflags & PATHC_TARGET2) {
			// Check route logic (only use forward routes)
			if (self.spawnflags & PATHC_EXACT) {
				if (self.state == STATE_ROUTE1) other.goalentity = self.movetarget;
				else other.goalentity = self.movetarget2;
			} else {
				// Default = random routes
				if (random() < 0.5) other.goalentity = self.movetarget;
				else other.goalentity = self.movetarget2;
			}
		} else other.goalentity = self.movetarget; // Default, 1 path = 1 choice
		
		other.movetarget = other.goalentity; // Setup goal for monster to move toward
		
		if (self.wait < 0) path_corner_stop(); // Does the monster need to pause at current path_corner?
		else if (self.wait > 0) {
			other.pausetime = time + self.wait + random()*self.delay;
			other.think = other.th_stand;
			other.nextthink = time + 0.05;
		} else { // no pause, turn and keep walking towards next goal
			if (other.goalentity.classtype == CT_PATHCORNER && other.goalentity.spawnflags & PATHC_INSTANT && other.goalentity.movetarget) {
				setorigin(other,other.goalentity.origin + '0 0 24');
				other.angles_y = vectoyaw(other.goalentity.origin - other.goalentity.movetarget.origin);
				other.ideal_yaw = vectoyaw(other.goalentity.movetarget.origin - other.origin);
				force_retouch = 2;
			} else other.ideal_yaw = vectoyaw(other.goalentity.origin - other.origin);
			other.pausetime = 0;
		}
	} else path_corner_stop(); // No new target to follow, stand around
};

// Used by monsters, func_trains and tether system
void() path_corner = {
	// Really need to prevent path corners with no targetname otherwise it will cause problems with linking later
	if (self.targetname == "") {
		dprint("\b[PATH_CORNER]\b Missing targetname!\n");
		spawn_marker(self.origin, SPNMARK_YELLOW);
		remove(self);
		return;
	}
	
	// Cache arrow models if devmode active
	if (developer > 0) {
		self.headmdl = MODEL_CORNER1;	// Top of Arrow (forward)
		self.mdl = MODEL_CORNER2;		// Bottom of Arrow (backward)
	}

	precache_model(MODEL_CORNER1); // Always precache so saves aren't broken by toggling developer 1 midgame
	precache_model(MODEL_CORNER2);
	
	// Setup time delay at corner ( wait + delay*random() )
	if (self.wait == 0) self.wait = 0;
	if (self.delay <= 0) self.delay = 0;
	
	// Reset all path targets/entities, spawnflags (low 4 bits only)
	self.spawnflags = self.spawnflags & PATHC_RESET;
	self.movetarget = self.movetarget2 = self.movetarget3 = world;
	self.solid = SOLID_TRIGGER;				// always touchable
	self.movetype = MOVETYPE_NONE;			// Does not move
	self.classtype = CT_PATHCORNER;			// Self identification
	setsize (self, '-8 -8 -16', '8 8 16');	// Size of trigger
	self.touch = path_corner_touch;			// Useable by monsters
	self.use = path_corner_use;				// Used by trigger events
	
	// Work out which (random/toggle) route logic is active
	if (self.spawnflags & PATHC_EXACT) {
		if (self.state < STATE_ROUTE1 || self.state > STATE_ROUTE3) self.state = STATE_ROUTE1; // If state is specified and outside range, reset
	}
	else self.state = STATE_ROUTE1;
	// Cannot start with route 2 (alt forward) if target2 is empty!?!
	if (self.state == STATE_ROUTE2 && self.target2 == "") self.state = STATE_ROUTE1;

	// Many of the ID maps have path_corners buried in solid architecture which makes it difficult to see where they are and impossible to draw visual arrows on them.
	// Checks for solid content and keep nudging the temporary origin upwards 8 units at a time (max 64 units).
	// If no empty space above, give up and use the original origin point instead.
	self.oldorigin = self.origin;
	if (pointcontents(self.oldorigin) == CONTENT_SOLID) {
		self.lip = 8;
		while (self.lip > 0) {
			self.lip = self.lip - 1;
			self.oldorigin = self.oldorigin + '0 0 8';
			if (pointcontents(self.oldorigin) != CONTENT_SOLID) self.lip = -1;
		}
	}
	// Origin is still in something solid, reset
	if (self.lip != -1) self.oldorigin = self.origin;

	// Check for alt corner speed (its really a duplicate of speed)
	if (self.corner_speed > 0 && self.speed == 0) self.speed = self.corner_speed;
	
	// Check for dead end path_corner
	if (self.target == "") self.spawnflags = self.spawnflags | PATHC_DEADEND;

	// Allow time for path_corners to spawn
	// Got to start linking before func_train (2nd frame)
	self.think = path_corner_setuptargets;
	self.nextthink = time + 0.1;
};