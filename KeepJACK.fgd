//======================================================================
// ENTITIES FGD file
// MOD    : Keep
// VERSION: v0.90
// Editor : Worldcraft, Jackhammer 
//======================================================================
@baseclass = Appearflags [
	spawnflags(Flags) = [
		256 : "Not in Easy" : 0 : "Will not spawn for EASY skill"
		512 : "Not in Normal" : 0 : "Will not spawn for NORMAL skill"
		1024 : "Not in Hard" : 0 : "Will not spawn for HARD skill"
		2048 : "Not in Deathmatch" : 0 : "Will not spawn for DEATHMATCH skill"
	]
]
@baseclass = Targetname [ targetname(target_source) : "TargetName" : : "Name of entity, used for triggering/targetting other entities" ]
@baseclass = Target [ target(target_destination) : "Target" : : "Targets to affect" ]
@baseclass = Target2 [ target(target_destination) : "Target 2" : : "More targets to affect" ]

// WORLDSPAWN
@SolidClass = worldspawn : "World entity" [
	worldtype(choices) : "World Type" : 0 = [
		0 : "Medieval"
		1 : "Runic (metal)"
		2 : "Present (base)"
	]
	message(string) : "Level Name" : : "Enter a level name that will show ingame when the player presses 'Tab', otherwise it's just the name of the bsp file minus the extension."
	sounds(integer) : "CD/Music track" :  : "Music track to automatically play."
	wad(string) : "Wads" : "" : "List of wad files used by the compiler, use a semicolon for seperation."
    sky(string) : "Sky Texture" :  : "Use a skybox instead of an id standard animated sky. Skyboxes(.tga) consist of 6 images and are typically referenced as: interstellar_, moonrise_, voidsmoke_ etc with these letters(bk, dn, ft, lf, rt, and up) appended at the end. The underscore is not neccesary but used for clarity. The important part is to just leave off the last 'two' trailing letters from the name of your skybox for 'Sky Texture' here. NOTE: Directory paths are allowed so, '...env/mycustomfolder/mycustomsky_' is perfectly valid. FYI - Quakespasm/Darkplaces both look for skybox files in '...id1/gfx/env/'. Using a Mod directory is also acceptable(ex '... ad/gfx/env'."
    gravity(integer) : "Gravity" :  : "Gravity of the map, default 800."
	passive_state(choices) : "Global Passive State" : :  "All monsters are setup in a passive state." = [
		0 : "Off, Normal behaviour"
		1 : "On, All monsters are Passive"
	]
	no_trackondeath(choices) : "Homing on Death" : : "Homing missiles stop tracking when monsters die." = [
		0 : "Off, homing missiles track after death"
		1 : "On, homing missiles stop tracking after death"
	]
	hazard_dmg(vector) : "Hazard Damage Change" : : "Hazard damage override for the map, x,y,z for water,slime,lava (2,4,10 is default)"
    
	//-------- World Lighting Options  --------     
	_minlight(integer) : "Ambient Light" :  : "Set a global minimum light level(Default 0). While this can help light completey black areas of your map, it can also have unwanted side affects(lost contrast) globally on all of your lights/shadows. Use with caution."
	_minlight_color(color255) : "Ambient Light Color" :  : "Sets the global minimum light color. Default white(255 255 255)."
	_minlight_dirt(choices) : "Ambient Light Dirt(AO)" :  : "1 enables dirtmapping (ambient occlusion) on minlight lit surfaces, -1 to disable. Default is to use the value of '_dirt'." = [
        -1 : "Disabled"
         0 : "Default"
         1 : "Enabled"
    ]   	
	_range(integer) : "Global Light Range" :  : "Scales the brightness range of all lights without affecting their fade distance. Values more than 0.5 makes lights brighter and values less than 0.5 makes lights less bright. The same effect can be achieved on individual lights by adjusting both the 'light' and 'wait' attributes."
	_dist(integer) : "Global Light Scale" :  : "Scales the fade distance of all lights by a factor of 'n'. If 'n' is more than 1 lights fade more quickly with distance and if 'n' is less than 1, lights fade more slowly with distance and the light reaches further."
	_gamma(integer) : "Lightmap gamma" :  : "Adjust brightness of the final lightmap. Default 1, values >1 are brighter while values <1 are darker."
	_spotlightautofalloff(integer) : "Spotlight Falloff" :  : "When set to 1, spotlight falloff is calculated from the distance to the targeted 'info_null'. Ignored when '_falloff' is not 0. Default 0."

	//-------- SUN options -------- 
	_sunlight(integer) : "Sunlight" :  : "Set the brightness of the sunlight coming from an unseen sun in the sky. Sky brushes, or more accurately bsp leafs with sky contents, will emit sunlight at an angle specified by the '_sunlight_mangle' key. Default 0."
	_sunlight_color(color255) : "Sunlight Color" :  : "Specify the red(r), green(g) and blue(b) components for the colour of the sunlight. Default is white(255 255 255)." 
	_sunlight_mangle(string) : "Sunlight Direction" :  : "Specifies the direction of sunlight using yaw(x), pitch(y), and roll(z) in degrees (YES THIS IS DIFFERENT THAN mangle OR angles!). Yaw specifies the angle around the Z-axis from 0 to 359 degrees, in a counter clockwise rotation. Looking top down(top=X/Y) in the editor, a yaw value of 1/359 is effectively placing the Sun's starting position at 9:00 A.M. Pitch specifies the angle from 90 'straight up' to -90 'straight down'. Roll has no effect(use 0). Default is straight down (0 -90 0)."
	_sun_mangle(string) : "Duplicate version of sunlight_mangle"
	_anglescale(integer) : "Sunlight Angle Scale" :  : "Sets a scaling factor for how much influence, the angle of incidence, sunlight has on the brightness of a surface. Values must be between '0.0' and '1.0'. Smaller values mean less attenuation, with zero meaning that angle of incidence has no effect at all on the brightness. Default 0.5"
	_sunlight_dirt(choices) : "Sunlight Dirt" :  : "1 enables dirtmapping (ambient occlusion) on sunlight, -1 to disable (making it illuminate the dirtmapping shadows). Default is to use the value of '_dirt'." = [
		-1 : "Disabled"
		 0 : "Default"
		 1 : "Enabled"
	]
	_sunlight_penumbra(integer) : "Sunlight Penumbra" :  : "Specifies the penumbra width, in degrees, of sunlight. Useful values are 3-4 for a gentle soft edge, or 10-20+ for more diffuse sunlight. Default is 0."
	_sunlight2(integer) : "Sunlight 2" :  : "Set the brightness of a large dome of lights positioned around the map (16K unit radius). Useful for simulating higly diffused light (e.g. cloudy skies) in outdoor areas (def=0)."
	_sunlight2_color(color255) : "Sunlight 2 color" :  : "Specifies the color of '_sunlight2', same format as '_sunlight_color'. Default (255 255 255)"
	_sunlight2_dirt(choices) : "Sunlight 2 dirt" :  : "1 enables dirtmapping (ambient occlusion) on sunlight2, -1 to disable. Default is to use the value of '_dirt'." = [
		-1 : "Disabled"
		 0 : "Default"
		 1 : "Enabled"
	]
	_sunlight3(integer) : "Sunlight 3" :  : "Same as _sunlight2, but for the bottom hemisphere, where ambient light is coming from below the horizon. Combine '_sunlight2' and '_sunlight3' to have light coming equally from all directions. Useful in levels with a Sky/Void theme. Default 0."
	_sunlight3_color(color255) : "Sunlight 3 color" :  : "Specifies the color of '_sunlight3', same format as '_sunlight_color'. Default (255 255 255)"
	
	//-------- Fog Options --------------------
	fog(string) : "Fog Command" :  : "ENGINE only 'console command' for setting fog parameters, Density/R/G/B example = (0.05 0.3 0.3 0.3). NOTE- If you plan to use 'trigger_fog' in your map, be sure to set both INDIVIDUAL 'Fog Density' and 'Fog Colour' values for proper operation."
	fog_density(integer) : "Fog Density" :  : "Global fog density (def 0.1). NOTE - An Initial value MUST be entered for proper 'trigger_fog' operation."
	fog_colour(color1) : "Fog Colour" :  : "Initial global fog colour (def 0.1 0.1 0.1). NOTE - An initial value MUST be entered for proper trigger_fog operation."
	fog_dpextra(string) : "Fog DP Extra" :  : "Extra fog parameters for Darkplaces, (def= 1 0 8192 1024 32)."
	skyfog_density(integer) : "Sky Fog Density" : : "Trigger skyfog starting density (default = 0.5)"
	_skyfog(integer) : "Sky fog affect" : : "use 0 to disable fog on sky or skybox"
	
	//-------- Liquid Options -------------------- 
	water_alpha(string) : "Water Alpha" :  : "Set the transpareny of water (ex .70), which are brushes textured with a water(ex *04water) texture. This setting tranfers directly to the other 'liquid' types and teleporters, UNLESS you are using an engine that supports individual 'alpha's' for each(see below). NOTE - Defaults to the players own 'r_wateralpha' settings if no value is assigned."
	lavaalpha(string) : "Lava Alpha" :  : "Set the individual transparency of Lava, brush solids textured with a lava(ex *lava1) texture. Default inherits the 'water_alpha' setting. If 'water_alpha' is not set then it defaults to the players own 'r_wateralpha' setting."
	slimealpha(string) : "Slime Alpha" :  : "Transparency of Slime, works the same as 'lavaalpha' except for solids textured with a slime(ex *slime0) texture."
	telealpha(string) : "Teleporter Alpha" :  : "Transparency of Teleporters, works the same as 'lavaalpha' except for solids textured with a teleporter(ex *teleport) texture."
	
	//-------- Ambient Occlusion options -------------	     
	_dirt(choices) : "Dirt Mapping (AO)" :  : "1 Enables dirtmapping (ambient occlusion) on all lights adding  shadows to corners and crevices. You can override the global setting for specific lights with the '_dirt' key, for point light entities, and the '_sunlight_dirt', '_sunlight2_dirt', '_minlight_dirt' keys, in worldspawn. Default -1, no dirtmapping." = [
		-1 : "Disabled"
		 0 : "Default"
		 1 : "Enabled"
	]
	_dirtmode(choices) : "Dirt mode" :  : "Choose between ordered or randomized dirtmapping, default 0" = [
		 0 : "Ordered (def)"
		 1 : "Randomized"
	]
	_dirtscale(integer) : "Dirt scale" :  : "Scale factor used in dirt calculations. Lower values(ex 0.5) make the dirt fainter while larger values (ex 2.0) would create much darker shadows, default 1."
	_dirtgain(integer) : "Dirt Gain" :  : "Exponent used in dirt calculation. Lower values(ex 0.5) make the shadows darker and stretch further away from corners, default 1."
	_dirtdepth(integer) : "Dirt Depth" :  : "Maximum depth of occlusion checking for dirtmapping, default 128."
	_dirtangle(integer) : "Dirt Angle" :  : "Cone angle in degrees for occlusion testing. Lower values can avoid unwanted dirt on arches, pipes, interiors etc. Allowed range is (x=1->90), default 88."
	
	//-------- Bounce Lighting Options ---------------
    _bounce(choices) : "Bounce Lighting" :  : "1 enables bounce lighting, default 0." = [
		 0 : "Default"
		 1 : "Enabled"
	]
    _bouncescale(integer) : "Bounce Scale" :  : "Scales the brightness of bounce lighting, default 1."
    _bouncecolorscale(choices) : "Bounce Color" :  : "Weight for bounce lighting to use texture colors from the map. 0 ignores map textures (default), 1 multiplies bounce light color by texture color." = [
		 0 : "Default"
		 1 : "Enabled"
	]
    _bouncestyled(choices) : "Bounce Styled Lights" :  : "1 makes styled lights bounce (e.g. flickering or switchable lights), default is 0, they do not bounce." = [
		 0 : "Default"
		 1 : "Enabled"
	]

	//-------- Arcane Dimension Options--------------------
	no_item_offset(choices) : "Item Offset for ammo/health" = [
		-1 : "Disabled"
		 0 : "Use Default"
		 1 : "Enabled"
	]
	no_item_rotate(choices) : "Item Rotate for ammo/health" = [
		-1 : "Disabled"
		 0 : "Use Default"
		 1 : "Enabled"
	]
	no_zaware(choices) : "Monsters - Z Aware attacks" = [
		-1 : "Disabled"
		 0 : "Use Default"
		 1 : "Enabled"
	]	
	no_liquiddmg(choices) : "Monsters - slime/lava Damage" = [
		-1 : "Disabled"
		 0 : "Use Default"
		 1 : "Enabled"
	]
	knight_defskin(choices) : "Default Red knight skin" = [
		0 : "Default - Red"
		1 : "No colour, grey"
		2 : "Vertical stripes"
		3 : "Swampy green/red"
	]
	bodyflrcheck(choices) : "Monster dead body check floor" = [
		0 : "(Default) No Check"
		1 : "Yes - Check for gravity"
	]
	bodyfadeaway(integer) : "Monster dead body fade timer" :  : "Time in seconds"
	playerweather(string) : "Name of weather effect active above player"
	ckeyhint(integer) : "Set to 1 to supress the Arcane Key inventory messages"
	plasmagun_dmg(integer) : "Plasma gun damage override" : : "Plasma gun damage override, x y z where x is direct damage, y is random additional damage, z is splash damage (def=45 0 20). A high splash damage will alow plasma climbing."
	no_moncountdevmsg(integer) : "Set to 1 to stop monster-no-count warning messages in Dev console"

	//_____Weapons /Ammo / Health Setup_____	
	upgrade_axe(choices) : "Upgrade Axe" = [
		-1 : "Remove from Inventory"
		 0 : "Use Default"
		 1 : "Add to Inventory"
	]
	upgrade_ssg(choices) : "Upgrade Shotgun" = [
		-1 : "Remove from Inventory"
		 0 : "Use Default"
		 1 : "Add to Inventory"
	]
	upgrade_lg(choices) : "Upgrade Lightning Gun" = [
		-1 : "Remove from Inventory"
		 0 : "Use Default"
		 1 : "Add to Inventory"
	]
	give_weapons(integer) : "Give weapons/items at start" :  : "SG=1, SSG=2, NG=4, SNG=8, GL=16, RL=32, LG=64, AX=2048, SK=131072, GK=262144, XBW=8388608"
	take_weapons(integer) : "Take weapons/items away at start" :  : "SG=1, SSG=2, NG=4, SNG=8, GL=16, RL=32, LG=64, AX=2048, SK=131072, GK=262144, XBW=8388608"
	take_perms(integer) : "Take permanent powerups away at start" : : "Default=0.  Must be greater than 0 to reset"
	useold_axe(choices) : "Axe Model to Use" = [
		 0 : "Use original id1 Axe (w/ dwereweps upgrade)"
		 1 : "Use AD Axe"
	]
	max_health(integer) : "Minimum Health at start" :  : "Update player health if below this value"
	reset_health(integer) : "Reset Health at start" :  : "Reset player health to this value"
	currentammo(choices) : "Setup Players Ammo" = [
		0 : "Minimum values"
		1 : "Reset values"
	]
	ammo_shells(integer) : "Ammo Shells" :  : "Player starting quantity"
	ammo_nails(integer) : "Ammo Nails" :  : "Player starting quantity"
	ammo_rockets(integer) : "Ammo Rockets" :  : "Player starting quantity"
	ammo_cells(integer) : "Ammo Cells" :  : "Player starting quantity"
	ammo_bolts(integer) : "Ammo Bolts" :  : "Player starting quantity"
	ammo_poison(integer) : "Ammo Poison Bolts" :  : "Player starting quantity"
	ammo_lava_nails(integer) : "Ammo Lava Nails" :  : "Player starting quantity"
	ammo_multi_rockets(integer) : "Ammo Multi Rockets" :  : "Player starting quantity"
	ammo_plasma(integer) : "Ammo Plasma" :  : "Player starting quantity"
	ammo_bloodcrystals(integer) : "Ammo Blood Crystals" :  : "Player starting quantity"
	ammo_voidshards(integer) : "Ammo Void Shards" :  : "Player starting quantity"
	ammo_elemental(integer) : "Ammo Elemental Mana" :  : "Player starting quantity"
	armortype(choices) : "Armour Type" = [
		0 : "No Armour given"
		1 : "Green Armour"
		2 : "Yellow Ammour"
		3 : "Red Armour"
	]
	armourvalue(integer) : "Armour Quantity" :  : "Quantity of armour to reset player (100/150/200)"
	no_axestart(integer) : "Set to 1 to start the player with no axe and no shotgun!"

//_____Engine  Setup_____   
    
	sprite_particles(choices) : "Sprite Particles ONLY" :  : "Switch all custom particles to sprites (builtins excluded)." = [
		 0 : "Default"
		 1 : "Enabled"
    ]
    particlemax(integer) : "Max ACTIVE Particles" :  : "Amount of ACTIVE particles per map"
    
    no_sgprojectile(choices) : "Hide Shotgun Projectiles" = [
	    -1 : "Disabled"
		 0 : "Use Default"
		 1 : "Enabled"	
	]
	no_sgcasing(choices) : "Hide Shotgun Casings" = [
	    -1 : "Disabled"
		 0 : "Use Default"
		 1 : "Enabled"	
	]    
    no_bigprojectiles(choices) : "AD Style Projectiles (small)": : "Turn OFF standard ID Software style 'large player' projectile sizes(collision boxes). This change affects the following ammo type/weapons: shells(SG/SSG/WSG), nails(NG/SNG), rockets(RL) and cells(PG). NOTE: This may make the game more challenging, but may also have the side affect of making it less fun. You can toggle this yourself with the 'impulse 105' console command." = [
		 0 : "Default(OFF)"
		 1 : "Enabled"
    ]
    mapvar_update(string) : "Map Variables (Range X->Y=Z)" :  : "Essentially (X->Y=Z) simply states that, X thru Y is a range of variables(0-132 available) and that Z is a value of either 0 or 1. Thus, setting 'mapvar_update' to '0 3 1' would set variables 0 thru 3 to equal 1."
	compilerstyle_start(integer) : "Starting point for target lights (set by compiler)"
  
 //Patch2 additions  
 //_____Jumping and Falling_____ 
 
   	jump_height(integer) : "Jump boots velocity (def=270)" : : "When jumping you get a 270 velocity boost, which combined with other movement can be up to 600+"
   	fall_dmg(integer) : "Fall damage (def=5, <-1=no dmg/sound)" : : "Custom fall damage, values <-1 disables sound and damage"
	fall_dmgwater(integer) : "Water damage (def=0, >0=dmg+sound)" : :  "Custom water damage, from falling, values >0 enables sound and damage"  
	fall_heightlow(integer) : "Fall height sound only (no dmg (def=300)" : : "Custom fall height that triggers a thud sound without inflicting player damage"
	fall_heighthigh(integer) : "Fall height sound+damage (def=650)" : : "Custom fall height that triggers a bone crush sound with inflicting player damage"	
	fall_speeddebug(integer) : "Set to 1 to display players fall velocity to console"

	// Specialty mod independently toggleable options
	copperoptions(Flags) = [
		1 : "Shotguns always pierce" : 0
		2 : "Imprecise vore ball tracking" : 0
		4 : "Semi-Z-Aware monster grenade lobbing" : 0
		8 : "One hit from axe always knocks zombies" : 0
		16 : "Gibable downed zombies" : 0
		32 : "Turret enforcers" : 0
		64 : "Spawn jump calming out of sight" : 0
		128 : "Chthon projectile speed progression" : 0
		256 : "Forgetful infighters" : 0
		512 : "Coop party item share" : 0
		1024 : "Coop backpack protection" : 0
		2048 : "Coop megahealth whole party heal" : 0
		4096 : "Fast Nailgun nails" : 0
		8192 : "Perforator files double nails" : 0
	]
	hipnoticoptions(Flags) = [
		1 : "Old Mjolnir weapon behavior" : 0
	]
	doomoptions(Flags) = [
		1 : "Shotguns always have knockback" : 0
	]	
	noise(string) : "Start music for Secondary Drake Music System" : : "Example music/shadows.wav"
	noise2(string) : "Intermission music for Secondary Drake Music System" : : "Example music/soultrap.wav"
	noise3(string) : "Episode end music for Secondary Drake Music System" : : "Example music/halo.wav"
]

//======================================================================
//
// Ambient Sounds
//
//======================================================================
@Baseclass base(Targetname,Appearflags) size(-16 -16 -8, 16 16 8) color(128 25 204) = Sound [
	spawnflags(Flags) = [
		8 : "Global" : 0 : "Plays everywhere"
	]
	speed(choices) : "Falloff Attenuation" = [
	    0 : "Plays Everywhere"
		1 : "Default"
		2 : "Idle"
		3 : "Static"
		4 : "Quiet (small radius)"		
	]   
	volume(integer) : "Volume" :  : "volume of sound (default=1, capped at 1)"
]
@PointClass base(Sound) = ambient_generalpurpose : "Loud Machines" [
	noise(string) : "Sound to Play" :  : "Example ambient/demonwind.wav"
]

@PointClass base(Sound) = ambient_comp_hum : "Computer background sounds" []
@PointClass base(Sound) = ambient_drain : "Drain Gargling" []
@PointClass base(Sound) = ambient_drip : "Dripping sound" []
@PointClass base(Sound) = ambient_drone : "Engine/machinery sound" []
@PointClass base(Sound) = ambient_eerie : "Eerie Humming" []
@PointClass base(Sound) = ambient_factory : "Factory" []
@PointClass base(Sound) = ambient_fan_blowing : "Fan Blowing" []
@PointClass base(Sound) = ambient_flies : "Nehahra Flies" []
@PointClass base(Sound) = ambient_flouro_buzz : "Fluorescent buzzing sound" []
@PointClass base(Sound) = ambient_flys : "Hipnotic Flies" []
@PointClass base(Sound) = ambient_grinder : "Grinder" []
@PointClass base(Sound) = ambient_highwind : "High Wind" []
@PointClass base(Sound) = ambient_hum1 : "Teleporter Hum sound" []
@PointClass base(Sound) = ambient_humming : "Humming" [
	spawnflags(Flags) = [
		4 : "Use Nehahra maydn.wav" : 0 : "Can respawn after being picked up"
	]
]
@PointClass base(Sound) = ambient_lapping : "Lapping Water" []
@PointClass base(Sound) = ambient_lapping2 : "Lapping Water 2" []
@PointClass base(Sound) = ambient_lavagurg : "Lapping Lava Gurgle" []
@PointClass base(Sound) = ambient_hevifals : "Heavy Waterfall" []
@PointClass base(Sound) = ambient_bublfals : "Waterfall" []
@PointClass base(Sound) = ambient_light_buzz : "Buzzing sound from light" []
@PointClass base(Sound) = ambient_machines : "Loud Machines" []
@PointClass base(Sound) = ambient_nehum : "Humming" []
@PointClass base(Sound) = ambient_rain : "Dripping sound" [
	count(choices) : "Rain Type" = [
		0 : "Rain Runoff"
		1 : "Steady Rain"
		2 : "Heavy Rain"
	]
]
@PointClass base(Sound) = ambient_riftpower : "Riftpower" []
@PointClass base(Sound) = ambient_running_lava : "Lava Flowing" []
@PointClass base(Sound) = ambient_running_water : "Water Flowing" []
@PointClass base(Sound) = ambient_rushing : "Whirring" []
@PointClass base(Sound) = ambient_sizzle : "Cooking Sizzle" []
@PointClass base(Sound) = ambient_stargate_hum : "Stargate Hum" []
@PointClass base(Sound) = ambient_suck_wind : "Wind sound" []
@PointClass base(Sound) = ambient_swamp1 : "Frogs croaking" []
@PointClass base(Sound) = ambient_swamp2 : "Frogs croaking B" []
@PointClass base(Sound) = ambient_swamp3 : "Frogs croaking C" []
@PointClass base(Sound) = ambient_teeth : "Teeth" []
@PointClass base(Sound) = ambient_teleport : "Teleporter Hum sound" []
@PointClass base(Sound) = ambient_thrum : "Thrum" []
@PointClass base(Sound) = ambient_thunder : "Thunder sound" [
	spawnflags(Flags) = [
		4 : "Regular Thunder" : 0 : "Regulary Thunders"
		16 : "Randomize" : 0 : "Adds Randomness"
	]
	wait(integer) : "Interval time(if spawnflag)" : : "Time between sounds (default 20)"
	target(string) : "Target(s) fired when thundering"
]
@PointClass base(Sound) = ambient_waterfall : "Waterfall" []
@PointClass base(Sound) = ambient_water_fall : "Waterfall" []
@PointClass base(Sound) = ambient_whnoise : "Wierd Humming" []
@PointClass base(Sound) = ambient_zzxzz : "Strange Machinery" []

//_____Custom Sounds_____
//setup base for custom sounds
@baseclass base(Targetname,Appearflags) size(-16 -16 -8, 16 16 8) color(230 230 0) = CustomSound []

//@baseclass for custom ambients SPAWNFLAGS, a couple don't require these 
@baseclass = AmbCustSpwnFlags [	
	spawnflags(Flags) = [
		2 : "Play One"  : 0 
		64 : "Start OFF" : 0
	]
]

@PointClass base(Appearflags,Targetname) = ambient_custom_sound : "Ambient Custom Sound" [
	target(string) : "Sound Trigger" : : "Fires each time the sound is played."
	volume(integer) : "Volume" :  : "volume of sound (default=1, capped at 1)"
	noise(string) : "Sound Primary" :  : "Path/sound file (ambience/windgust1a.wav)."
	noise1(string) : "Sound Stop" :  : "Path/sound file (ambience/switch6_off.wav)."
	noise2(string) : "Sound Random" :  : "Path/sound file (ambience/windgust1b.wav)."
	wait(integer) : "Random time" :  : "Random Time between sounds (default 20)."
	delay(integer) : "Minimum time" :  : "Time between sounds (default 2)."
	waitmin(integer) : "Starting delay" :  : "Initial starting time of sound (delay + random() x waitmin)."
	waitmin2(integer) : "Do Not Silence" : : "Will not silence sound if switching off."
	impulse(integer) : "Channel" :  : "Channel to play sound (0-7) (0 automatic is default)."
	speed(choices) : "Attenuation" :  : "How quickly the sound fades with distance away from it." = [
	   -1 : "No Attenuation"
		0 : "Default"
		1 : "Normal(def)"
		2 : "Idle"
		3 : "Static"
		4 : "Quiet"
	]
	spawnflags(Flags) = [
		2 : "Play One"  : 0 
		64 : "Start OFF" : 0
	]
]
@PointClass base(Sound) = ambient_custom_loop : "Ambient Custom Loop"
[
	volume(integer) : "Volume" :  : "volume of sound (default=1, capped at 1)"
	noise(string) : "Custom sound" :  : "looped sound file to play (ambience/windgust1.wav)"
]

//_____WATER_____
@PointClass size(-16 -16 -8, 16 16 8) color(80 160 255) = ambient_custom_water : "Play a LOOPED Water Sound. See ambient_custom_loop for 'looping' information." [
	volume(choices) : "Volume" :  : "Volume of Sound (default=.75)" = [
		0.1 : "Barely Audible"
		0.2 : "0.2"
		0.3 : "0.3"
		0.4 : "0.4"
		0.5 : "0.5"
		0.6 : "0.6"
		0.75 : "0.75(def)"
		0.8 : "0.8"
		0.9 : "0.9"
		1.0 : "Full Volume"
	]	
	noise(string) : "Custom sound" :  : "Custom Sound to Play(default = ambience/water1.wav)"
]
//_____RAIN_____
//Rain does not get spawnflags for 'start off'/'play once'
@PointClass base(CustomSound) = ambient_custom_rain : "Play a rain sound. Always starts off and must be triggered. NOTE - If you re-trigger(ex button) this entity off it will not restart henceforth." [
    count(choices) : "Type of Rain" = [
       0 : "Default"
       1 : "Fast Dripping"
       2 : "Dowmpour(def)" 
    ]    
	volume(choices) : "Volume" :  : "Volume of sound  (0.1->1,(def=1)." = [
		0.1 : "Barely Audible"
		0.2 : "0.2"
		0.3 : "0.3"
		0.4 : "0.4"
		0.5 : "0.5"
		0.6 : "0.6"
		0.7 : "0.7"
		0.8 : "0.8"
		0.9 : "0.9"
		1.0 : "Full Volume(def)"
	]
	spawnflags(Flags) = [
		2 : "Play One"  : 0 
		64 : "Start OFF" : 0
	]
]
//_____CHIME_____
@PointClass base(CustomSound) = ambient_custom_chime : "Play a predefined CHIME sound on a periodic basis. Works with entity state system." [
	volume(choices) : "Volume" :  : "Volume of sound (0.1->1,(def=1)." = [
		0.1 : "Barely Audible"
		0.2 : "0.2"
		0.3 : "0.3"
		0.4 : "0.4"
		0.5 : "0.5"
		0.6 : "0.6"
		0.7 : "0.7"
		0.8 : "0.8"
		0.9 : "0.9"
		1.0 : "Full Volume(def)"
	]
	speed(choices) : "Attenuation" :  : "How quickly the sound fades with distance away from it,(1->4,(def=2)." = [
	   -1 : "No Attenuation"
		0 : "Default"
		1 : "Normal"
		2 : "Idle(def)"
		3 : "Static"
		4 : "Quiet"
	]
	spawnflags(Flags) = [
		2 : "Play One"  : 0 
		64 : "Start OFF" : 0
	]
    wait(integer) : "Random Time" :  : "Random Time Between Sounds(default 10)."
	delay(integer) : "Minimum Time" :  : "Minimum time between sounds (default 10)."
	waitmin(integer) : "Start Time" : : "Starting time, once the level has loaded (default = 10 + random() x 10)."
]
//_____RUMBLE_____
@PointClass base(AmbCustSpwnFlags,CustomSound) = ambient_custom_rumble : "Play a RUMBLE sound on a periodic basis. Works with entity state system." [
	count(choices) : "Type of Rumble" = [
	   -1 : "Random"
	    0 : "Default"
	    1 : "Rumble1"
	    2 : "Rumble2"
	    3 : "Rumble3"
	]
	lefty(choices) : "Alternate Sound" : : "1 = Will alternate between several sound files." = [
		0 : "Default)"
		1 : "Enabled"
	]
	__seperator_ignore_me(integer) : "------ Customize Setup ------" : : "ignore, editor use only."
		
	volume(choices) : "Volume" :  : "Volume of sound (0.1->1,(def=0.5)" = [
		0.1 : "Barely Audible"
		0.2 : "0.2"
		0.3 : "0.3"
		0.4 : "0.4"
		0.5 : "0.5(def)"
		0.6 : "0.6"
		0.7 : "0.7"
		0.8 : "0.8"
		0.9 : "0.9"
		1.0 : "Full Volume(def)"
	]
	speed(choices) : "Attenuation" :  : "How quickly the sound fades with distance away from it, (0->4,(def=1)." = [
	   -1 : "No Attenuation"
		0 : "Default"
		1 : "Normal"
		2 : "Idle(def)"
		3 : "Static"
		4 : "Quiet"
	]
    wait(integer) : "Random" :  : "Random Time Between Sounds(default 20)."
	delay(integer) : "Minimum time" :  : "minimum time between sounds (default 20)."
	waitmin(integer) : "Start Time" : : "Starting time once the level has loaded (default = 6 + random() x 6)"
]
//_____WIND_____
@PointClass base(AmbCustSpwnFlags,CustomSound) = ambient_custom_wind : "Play a WIND sound on a periodic basis. Works with entity state system." [
	count(choices) : "Type of Wind" = [
	   -1 : "Random"
	    0 : "Default"
	    1 : "Windgust1"
	    2 : "Windgust2"
	    3 : "Windgust3"
	    4 : "Windgust4"
	    5 : "Windgust5"    
	    6 : "Windgust6"
	]
	lefty(choices) : "Alternate Sound" : : "1 = Will alternate between several sound files." = [
		0 : "Default)"
		1 : "Enabled"
	]
	__seperator_ignore_me(integer) : "------ Customize Setup ------" : : "ignore, editor use only."
	
	volume(choices) : "Volume" :  : "volume of sound (0.1->1,(def=1)" = [
		0.1 : "Barely Audible"
		0.2 : "0.2"
		0.3 : "0.3"
		0.4 : "0.4"
		0.5 : "0.5"
		0.6 : "0.6"
		0.7 : "0.7"
		0.8 : "0.8"
		0.9 : "0.9"
		1.0 : "Full Volume(def)"
	]
	speed(choices) : "Attenuation" :  : "How quickly the sound fades with distance away from it, (0->4,(def=2)" = [
	   -1 : "No Attenuation"
		0 : "Default"
		1 : "Normal(def)"
		2 : "Idle"
		3 : "Static"
		4 : "Quiet"
	]
    wait(integer) : "Random time" :  : "Random Time Between Sounds(default 10)"
	delay(integer) : "Minimum time" :  : "minimum time between sounds (default 10)"
	waitmin(integer) : "Start Time" : : "Starting time (default = 4 + random() x 4)"	
]
//_____WOOD_____
@PointClass base(AmbCustSpwnFlags,CustomSound) = ambient_custom_wood : "Play a WOOD sound on a periodic basis. Works with entity state system." [
	count(choices) : "Type of Creaking" = [
	   -1 : "Random"
	    0 : "Default"
	    1 : "Woodcreak2a"
	    2 : "Woodcreak2b"
	    3 : "Woodcreak2c"
	    4 : "Woodcreak2d"
	]
	lefty(choices) : "Alternate Sound" : : "1 = Will alternate between several sound files." = [
		0 : "Default)"
		1 : "Enabled"
	]
	__seperator_ignore_me(integer) : "------ Customize Setup ------" : : "ignore, editor use only."
	
	volume(choices) : "Volume" :  : "volume of sound (0.1->1,(def=1)" = [
		0.1 : "Barely Audible"
		0.2 : "0.2"
		0.3 : "0.3"
		0.4 : "0.4"
		0.5 : "0.5"
		0.6 : "0.6"
		0.7 : "0.7"
		0.8 : "0.8"
		0.9 : "0.9"
		1.0 : "Full Volume(def)"
	]
	speed(choices) : "Attenuation" :  : "How quickly the sound fades with distance away from it, (0->4,(def=2)" = [
	   -1 : "No Attenuation"
		0 : "Default"
		1 : "Normal"
		2 : "Idle(def)"
		3 : "Static"
		4 : "Quiet"
	]
    wait(integer) : "Random time" :  : "Random Time Between Sounds(default 20)"
	delay(integer) : "Minimum time" :  : "minimum time between sounds (default 20)"
	waitmin(integer) : "Start Time" : : "Starting time (default = 8 + random() x 8)"
]

//======================================================================
//
// INFO entities - player starts, deathmatch, coop, teleport
//
//======================================================================
@baseclass base(Appearflags) flags(Angle) studio("progs/player.mdl")
	size(-16 -16 -24, 16 16 24) offset(0 0 24) color(255 0 0)
	= PlayerClass [
		target(string) : "Target(s) fired when used"
	]
@baseclass = StartSpawn2 [ startspawn2(integer) : "Unique spawn location number matching a trigger_changelevel" ]

//----------------------------------------------------------------------
@PointClass base(PlayerClass) = info_player_start : "Player Start" []
@PointClass base(PlayerClass) = info_player_startdev : "Player Start Developer Only" []
@PointClass base(PlayerClass,StartSpawn2) = info_player_start2 : "Player Return" []
@PointClass base(PlayerClass,StartSpawn2) = info_player_coop : "Player COOP Start" [ spawnflags(Flags) = [ 64 : "Start OFF" : 0 : "Start off" ] ]
@PointClass base(PlayerClass,StartSpawn2) = info_player_coop2 : "Player COOP Return" [ spawnflags(Flags) = [ 64 : "Start OFF" : 0 : "Start off" ] ]
@PointClass base(PlayerClass) = info_player_deathmatch : "Player DM Start" [ spawnflags(Flags) = [ 64 : "Start OFF" : 0 : "Start off" ] ]
@PointClass base(Appearflags, Targetname) flags(Angle)
	size(-16 -16 -24, 16 16 24) offset(0 0 24) color(255 128 128)
	= info_teleport_destination : "Teleport destination" [
		target(string) : "Target(s) fired when used"
	]
@PointClass base(Appearflags) = info_skyroom : "Intermission QSS/FTE 3D Skybox Skyroom" []
@PointClass base(Appearflags) = info_intermission : "Intermission camera" [
	spawnflags(Flags) = [
		1 : "Not Intermission" : 0 : "Exclude from intermission"
		2 : "Solid Interaction" : 0 : "Solid world interaction"
	]
	target(string) : "target(s) fire when used as a viewing camera"
	mangle(string) : "Mangle (Pitch Yaw Roll)"
	fog_density(integer) : "Fog density (Must be >0 to activate feature)"
	fog_colour(string) : "Fog colours (def=0.1 0.1 0.1)"
	speed(integer) : "Fog time to change (def=2s)"
]
@PointClass base(Appearflags,Targetname, Target) size(-16 -16 -24, 16 16 40) color(153 0 192) = trigger_vigend : "Go to Congratulations Intermission" [
	message(integer) : "Initial long message"
	message2(integer) : "Message to display after delay"
	delay(integer) : "Time between messages(def=28)"
	pos1(integer) : "Position to spawn player"
	pos2(integer) : "Position to spawn 2nd player(Martin) at 2nd message"
	cnt(integer) : "Frame to spawn 2nd player(Martin) at(def=14)"
]
@PointClass base(Appearflags) size(-16 -16 -24, 16 16 40) color(153 0 192)
	= info_skullwiz_destination : "Skull Wizard Tele Dest" [
	targetname(string) : "Unique name in chain group"
	target(string) : "Next entity in chain"
	distance(integer) : "Min distance before spawning"
]
@PointClass base(Appearflags) size(-16 -16 -24, 16 16 40) color(153 0 192) = info_overlord_destination : "Wrath Overlord Teleport Destination" []
@PointClass base(Appearflags) size(-16 -16 -24, 16 16 40) color(153 0 192) = info_morph_destination : "Morph Teleport Destination" []

//----------------------------------------------------------------------
@PointClass base(Targetname) = info_target : "info_target (Invisible entity)" []
@PointClass base(Targetname) = info_home : "info_home.  Used for setting robot origin." []
@PointClass base(Targetname) = info_null : "info_null (spotlight target)" []
@PointClass base(Targetname) = info_notnull : "info_notnull (map hack)" [
	use(string) : "self.use"
	think(string) : "self.think"
	nextthink(integer) : "nextthink"
]
@PointClass size(-16 -16 -24, 16 16 32) color(255 128 128) flags(Angle) = info_camera_destination : "Marker for a Cinematic Camera System" [
	targetname(target_source) : "Name (use w/misc_camera)"
	angles(integer) : "Facing angle" : : "Ex: 0 360 0 (pitch yaw roll)"
]

@PointClass base(Targetname) = info_command : "Trigger Send Console Command" [
	spawnflags(Flags) = [
		8 : "No auto newline" : 0
	]
	message(string) : "Console command"
]

@PointClass base(Targetname) = info_command_server : "Trigger Send Console All" [
	spawnflags(Flags) = [
		2 : "Activator Only" : 0
		8 : "No auto newline" : 0
	]
	message(string) : "Server Console command"
]

@PointClass base(Targetname) = info_command_spawn : "Trigger Send Console All Map Start" [
	spawnflags(Flags) = [
		8 : "No auto newline" : 0
		16: "Resend on Load" : 0
	]
	message(string) : "Console command"
]

@PointClass base(Targetname) = info_bomb : "Quoth Coop Bomb Effect" []

@PointClass base(Targetname) = info_effect_pulse : "Projectile Light Effect" [
	speed(integer) : "Speed (def=400)"
	delay(integer) : "Delay B4 Start (def=0.1)"
	wait(integer) : "Wait (def=1, -1=once)"
]


//======================================================================
//
// ITEM entities
//
//======================================================================
@baseclass size(0 -0 0, 32 32 56) = ItemSize []
@baseclass size(-16 -16 -24, 16 16 32) offset(0 0 24) = PowerupSize []
@baseclass = PowerTimer [ cnt(integer) : "Duration override (def=30, -1 = infinite)" ]
@baseclass size(-16 -16 -24, 16 16 32) = ArmourSize []
@baseclass size(-16 -16 -24, 16 16 32) offset(0 0 24) = KeySize []
@baseclass base(Appearflags,Targetname,Target) flags(Angle) = Items [
	spawnflags(Flags) = [
		16 : "Respawn" : 0 : "Can respawn after being picked up"
		32 : "Floating" : 0 : "Spawns floating, trigger entity to drop it"
		64 : "Start OFF" : 0 : "Starts off and waits for trigger to spawn"
		128 : "No Particles" : 0 : "No particle or effects active on this entity"
	]
	upgrade_axe(choices) : "Axe Upgrade" = [
		 0 : "Do Nothing"
		 1 : "Only spawn if got upgrade"
	]
	upgrade_ssg(choices) : "Shotgun Upgrade" = [
		 0 : "Do Nothing"
		 1 : "Only spawn if got upgrade"
	]
	upgrade_lg(choices) : "Lightning Gun Upgrade" = [
		 0 : "Do Nothing"
		 1 : "Only spawn if got upgrade"
	]
	message(string) : "Message when picked up"
	respawn_time(integer) : "Respawn time (=-1 instant)"
	respawn_count(integer) : "Total times to respawn"
	respawn_trig(choices) : "respawn trigger condition" = [
		 0 : "Default Respawn"
		 1 : "Wait for trigger"
	]
	netname(string) : "Override name to display on pickup"
]
@baseclass = ItemWorldType [
	skin_override(choices) = [
		0 : "Worldspawn Worldtype"
		1 : "Base Green"
		2 : "Medieval Wood"
	]
]
@baseclass color(80 0 200) base(Items,ItemSize,ItemWorldType) = AmmoBase [
	spawnflags(flags) = [
		1 : "Large box" : 0
	]
	frame_box(integer) : "animation frame (1-7)"
	aflag(integer) : "ammo quantity"
]
@baseclass = AmmoLid [ spawnflags(flags) = [ 2 : "Lid" : 0 ] ]

//----------------------------------------------------------------------
//@PointClass base(Items,ItemSize,ItemWorldType) studio(
//        {{
//            spawnflags & 2 ->   ":progs/ad171/health_100.mdl",
//            spawnflags & 1 ->   ":progs/ad171/health_15.mdl",
//                                ":progs/ad171/health_25.mdl"
//        }}) = item_health : "Health pak" [

@PointClass base(Items,ItemSize,ItemWorldType) studio("progs/ad171/health_25.mdl") = item_health : "Health pak" [
	spawnflags(flags) = [
		1 : "Rotten" : 0
		2 : "Megahealth" : 0
	]
]
@PointClass base(Items,ItemSize,ItemWorldType) studio("progs/ad181/health_5.mdl") = item_healthvial : "Health Vial" []
//----------------------------------------------------------------------
//@PointClass base(AmmoBase,AmmoLid) studio({{
//	spawnflags & 1 ->	":progs/ad171/ammo_shells1.mdl",
//						":progs/ad171/ammo_shells0.mdl"
//}}) = item_shells : "Shells" []
@PointClass base(AmmoBase,AmmoLid) studio("progs/ad171/ammo_shells1.mdl") = item_shells : "Shells" []
//@PointClass base(AmmoBase,AmmoLid) studio({{
//	spawnflags & 1 ->	":progs/ad171/ammo_nails1.mdl",
//						":progs/ad171/ammo_nails0.mdl"
//}}) = item_spikes : "Nails" []
@PointClass base(AmmoBase,AmmoLid) studio("progs/ad171/ammo_nails0.mdl") = item_spikes : "Nails" []
@PointClass base(AmmoBase) studio("progs/ad171/ammo_rockets0.mdl") = item_rockets : "Rockets" []
@PointClass base(AmmoBase) studio("progs/ad171/ammo_battery0.mdl") = item_cells : "Cells" []
@PointClass base(AmmoBase) studio("maps/b_plas0.bsp") = item_plasma : "Plasma" []
@PointClass base(AmmoBase) studio("maps/b_lnail0.bsp") = item_lava_spikes : "Lava Nails" []
@PointClass base(AmmoBase) studio("maps/b_mrock0.bsp") = item_multi_rockets : "Multi-Rockets" []
@PointClass base(AmmoBase) studio("progs/qmaster/ammo_bolts0.mdl") = item_bolts : "Bolts" []
@PointClass base(AmmoBase) studio("progs/its/item_poison0.mdl") = item_poison : "Poison" []

@PointClass base(AmmoBase) studio("progs/aoa/ammo_bloodcrystals.mdl") = item_bloodcrystals : "Blood Crystals" []
@PointClass base(AmmoBase) studio("progs/aoa/ammo_voidshards.mdl") = item_voidshards : "Void Shards" []
@PointClass base(AmmoBase) studio("progs/redfield/g_light.mdl") = item_elemental: "Elemental Mana" []

//----------------------------------------------------------------------
@PointClass base(Items,ArmourSize) studio("progs/ad171/armour.mdl") skin(0) = item_armor1 : "100% armor (Green)" []
@PointClass base(Items,ArmourSize) studio("progs/ad171/armour.mdl") skin(1) = item_armor2 : "150% armor (Yellow)" []
@PointClass base(Items,ArmourSize) studio("progs/ad171/armour.mdl") skin(2) = item_armorInv : "200% armor (Red)" []
@PointClass base(Items,ArmourSize) studio("progs/drake/courage.mdl") = item_armor4 : "Courage armor" []
@PointClass base(Items,ArmourSize) studio("progs/drake/armor.mdl") = item_armor_exotic : "Exotic Armor" [
	count(choices) : "Armor Type" = [
		0 : "Courage Armor (Zerstorer)"
		1 : "Dragonscale Armor (Invulnerability)"
		2 : "Onyx Armor (50% Damage)"
		3 : "Power Armor (Toggleable Shield)"
		4 : "Berserker Armor (Quad Damage)"
		5 : "Spirit Shroud (Invisibility)"
		6 : "Chaos Armor (Resistance + Telefrag Reflect)"
		7 : "Ninja Fall Armor"
	]
	aflag(integer) : "Override Power Armor cells bonus(def=15)"
]

//----------------------------------------------------------------------
@PointClass base(Items,KeySize) studio("progs/ad171/key_medieval.mdl") skin(2) = item_key1 : "Silver key" []
@PointClass base(Items,KeySize) studio("progs/ad171/key_medieval.mdl") skin(6) = item_key2 : "Gold key" []
@PointClass base(Items,KeySize) = item_keyx : "Custom key" [
	mdl(studio) : "model name to load/display (progs/model.mdl)"
	model(studio) : "Model Preview (Editor)"
	netname(string) : "XXX Part of pickup string 'You got the XXX'"
	skin(integer) : "Skin number for custom model"
	spawnflags(Flags) = [
		1 : "Custom Key 1" : 0
		2 : "Custom Key 2" : 0
		4 : "Custom Key 3" : 0
		8 : "Custom Key 4" : 0
	]
	message2(choices) : "Particle Style" = [
		"KEYGOLD" : "KEYGOLD - Yellow"
		"KEYSILVER" : "KEYSILVER - Blue"
		"KEYRED" : "KEYRED - Red"
		"KEYGREEN" : "KEYGREEN - Green"
		"KEYPURPLE" : "KEYPURPLE - Purple"
		"KEYWHITE" : "KEYWHITE - White"
	]
]
@PointClass base(Items,KeySize) studio("progs/qmaster/w_sk_key.mdl") = item_key_skeleton : "Skeleton key" []

@PointClass base(Items,KeySize) studio("progs/qmaster/coinitem.mdl") = item_coin : "Coin Currency for Versus" [
	count(integer) : "Number of Coins"
]

@PointClass base(Items,KeySize) studio("progs/qmaster/boneitem.mdl") = item_bone : "Bone Currency for Versus" [
	count(integer) : "Number of Bones"
]

//----------------------------------------------------------------------
@PointClass base(Items,KeySize) studio("progs/drake/t_gem.mdl") = item_treasure : "Tiny Health or Armor Pickup, +10" [
	spawnflags(Flags) = [
		1 : "Small +5" : 0
		2 : "Big +20" : 0
	]
	healtype(choices) : "Treasure Type" = [
		0 : "Armor - Gold coin (default)"
		1 : "Health - Gem"
	]
	skin(choices) : "Skin (gems only, fullbright)" = [
		0 : "Red"
		1 : "Orange"
		2 : "Yellow"
		3 : "Blue-white"
	]
]

//----------------------------------------------------------------------
@PointClass base(Items,KeySize) studio( "progs/drake/t_coin.mdl") = item_treasure_coin : "Tiny Armor Pickup, +10" [
	spawnflags(Flags) = [
		1 : "Small +5" : 0
		2 : "Big +20" : 0
	]
]

@PointClass base(Items,KeySize) studio( "progs/drake/t_coin.mdl") = item_treasure_gem : "Tiny Health Pickup, +10" [
	spawnflags(Flags) = [
		1 : "Small +5" : 0
		2 : "Big +20" : 0
	]
	skin(choices) : "Skin (gems only, fullbright)" = [
		0 : "Red"
		1 : "Orange"
		2 : "Yellow"
		3 : "Blue-white"
	]
]


@PointClass base(Items,KeySize) studio("progs/rrp/fromitz.mdl") = item_circuitboard : "17mm Fromitz Board!" []

@PointClass base(Items,KeySize) = item_custom : "Custom Pickup Item" [
	mdl(studio) : "model name to load/display (progs/model.mdl)"
	model(studio) : "Model Preview (Editor)"
	netname(string) : "XXX Part of pickup string 'You got the XXX'"
	noise(string) : "Pickup Sound (def=weapons/lock4.wav)"
	pos1(string) : "Pickup bounding box minimum (def=-16 -16 -24)"
	pos2(string) : "Pickup bounding box maximum (def=16 16 32)"
	skin(integer) : "Skin number for custom model"
	bodyfadeaway(integer) : "Model will fade away on pickup"
	part_active(choices) : "Particle Pickup Setup" = [
		0 : "Not Active"
		1 : "Active"
	]
	part_ofs(string) : "Particle Origin Offset"
	part_tcount(integer) : "Particle Quantity (def=20)"
	part_life(integer) : "Particle Life time (def=2s)"
	part_style(choices) : "Particle Colour" = [
		0 : "Default - White"
		1 : "Yellow"
		2 : "Green"
		3 : "Red"
		4 : "Blue"
		5 : "Purple"
		6 : "Fire"
		7 : "White"
	]
	part_movetype(choices) : "Particle Movement" = [
		0 : "Default - Center"
		2 : "Center"
		3 : "Up"
		4 : "Shockwave"
		5 : "Skull"
		6 : "Lost"
		7 : "Minotaur"
	]	
]
//----------------------------------------------------------------------
//@PointClass base(Items,KeySize) studio({{
//	spawnflags & 1 -> 	"progs/ad171/key_rune1.mdl",
//	spawnflags & 2 -> 	"progs/ad171/key_rune2.mdl",
//	spawnflags & 3 -> 	"progs/ad171/key_rune3.mdl",
//	spawnflags & 4 -> 	"progs/ad171/key_rune4.mdl",
//						"progs/ad171/key_rune1.mdl"
//}}) = item_sigil : "Sigil" [
//	spawnflags(Flags) = [
//		1 : "Episode 1" : 0
//		2 : "Episode 2" : 0
//		4 : "Episode 3" : 0
//		8 : "Episode 4" : 0
//	]
//]

@PointClass base(Items,KeySize) studio("progs/ad171/key_rune1.mdl") = item_sigil : "Sigil" [
	spawnflags(Flags) = [
		1 : "Episode 1" : 0
		2 : "Episode 2" : 0
		4 : "Episode 3" : 0
		8 : "Episode 4" : 0
	]
]
//----------------------------------------------------------------------
@PointClass base(Items,KeySize) studio("progs/drake/end_bane.mdl") = item_sigil_bane : "Bane Sigil" []
//----------------------------------------------------------------------
@PointClass base(Items,PowerupSize,PowerTimer) studio("progs/ad171/artifact_envsuit.mdl") = item_artifact_envirosuit : "Environmental Protection Suit" [
	exactskin(choices) : "Exact Skin" = [
		0 : "Default"
		1 : "Green"
		2 : "Brown"
		3 : "Aqua"
		4 : "Blue"
	]	
]
@PointClass base(Items,PowerupSize,PowerTimer) studio("progs/ad171/artifact_pent.mdl") = 
	item_artifact_invulnerability : "Pentagram of Protection" []
@PointClass base(Items,PowerupSize,PowerTimer) studio("progs/ad171/artifact_invis.mdl") = 
	item_artifact_invisibility : "Ring of Shadows" []
@PointClass base(Items,PowerupSize,PowerTimer) studio("progs/ad171/artifact_quad.mdl") = 
	item_artifact_super_damage : "Quad damage" []
@PointClass base(Items,PowerupSize,PowerTimer) studio("progs/ad171/artifact_tome.mdl") = 
	item_artifact_tomeofpower : "Tome of Power" []
@PointClass base(Items,PowerupSize,PowerTimer) studio("progs/ad171/artifact_piercer.mdl") = 
	item_artifact_nail_piercer : "Nail Piercer" []
@PointClass base(Items,PowerupSize,PowerTimer) studio("progs/ad171/artifact_sharp.mdl") = 
	item_artifact_sharp_shooter : "Sharp Shooter" []
//_____JUMP BOOTS_____
@PointClass base(Items,PowerupSize,PowerTimer) studio("progs/ad181/artifact_jumpboots.mdl") = item_artifact_jumpboots : "Jump Boots, Permanent upgrade! Primary : Player can do (1-4) extra jumps. Secondary : Can jump while falling off ledges or midair." [
	noise(sound) : "Custom Sound (pickup)"
	cnt(integer) : "Duration" : : "Override default duration of artifact (default = infinite)"
	mdl(string) : "Override the model used"
	netname(string) : "Override name of pickup"
	count(choices) : "Power level override" = [ 
	   -1 : "Endless"
		0 : "Default(1)"
		2 : "2 Jumps" 
		3 : "3 Jumps"
		4 : "4 Jumps"
	]
]
//_____LAVA SHIELD_____
@PointClass base(Items,PowerupSize,PowerTimer) studio("progs/ad181/artifact_lavashield.mdl") = item_artifact_lavashield : "Lava Shield, Permanent upgrade! Primary : Player takes no HP/armour damage from lava. Secondary : Flame and lava attack damage is reduced (Chthon, Drole, Gargoyle, Quoth Dguard)." [
	cnt(integer) : "Duration" : : "Override default duration of artifact (default = infinite)"
	noise(sound) : "Custom Sound (pickup)"
	mdl(string) : "Override the model used"
	netname(string) : "Override name of pickup"
	volume(integer) : "Volume (Max range (def=1, no sound=-1)"
]
//_____BLAST BELT_____
@PointClass base(Items,PowerupSize,PowerTimer) studio("progs/ad181/artifact_blastbelt.mdl") = item_artifact_blastbelt : "Blast Belt, Permanent upgrade! Primary : Player does not take splash damage, but take direct damage. Secondary : Immune to floor impact attacks (hammer ogre, golems etc)" [
	cnt(integer) : "Duration" : : "Override default duration of artifact (default = infinite)"
	noise(sound) : "Custom Sound (pickup)"
	mdl(string) : "Override the model used"
	netname(string) : "Override name of pickup"
]

@PointClass base(Items,PowerupSize,PowerTimer) studio("progs/suit2.mdl") = item_artifact_lavasuit : "Thermal Protection Suit" []
@PointClass base(Items,PowerupSize,PowerTimer) studio("progs/ad172/artifact_blastbelt.mdl") = item_powerup_belt : "Anti-gravity belt" []
@PointClass base(Items,PowerupSize,PowerTimer) studio("progs/rogue/shield.mdl") = item_powerup_shield : "Power Shield" []
@PointClass base(Items,PowerupSize,PowerTimer) studio("progs/ad171/artifact_wetsuit.mdl") = item_artifact_wetsuit : "Under Water Wet Suit" [
	exactskin(choices) : "Exact Skin" = [
		0 : "Default"
		1 : "Green"
		2 : "Brown"
		3 : "Aqua"
		4 : "Blue"
	]
	cnt(integer) : "Duration override (def = -1 for inifinite)"
]
@PointClass base(Items,PowerupSize,PowerTimer) studio("progs/hipnotic/empathy.mdl") = item_artifact_empathy_shields : "Empathy Shield" []
@PointClass base(Items,PowerupSize,PowerTimer) studio("progs/quoth/trinity.mdl") = item_artifact_trinity : "Trinity" []
@PointClass base(Items,PowerupSize,PowerTimer) studio("progs/quoth/cross.mdl") = item_artifact_cross : "Cross of Deflection" []
@PointClass base(Items,PowerupSize) studio("progs/hipnotic/horn.mdl") = item_artifact_horn : "Horn of Conjuring" []
@PointClass base(Items,PowerupSize) studio("progs/redfield/cat.mdl") = item_secrethunter : "Secret Hunter, Loki's Cat" []
@PointClass base(Items,PowerupSize,PowerTimer) studio("progs/drake/wings2.mdl") = item_artifact_haste : "Haste" []
@PointClass base(Items) size(-32 -32 -24, 32 32 40) studio("progs/qrally/sumabase.mdl") = item_rallycar : "Drivable Vehicle" []
@PointClass base(Items,PowerupSize) studio("progs/madfox/mushroom_item.mdl") = item_mariomushroom : "A Strange Shroom" []

@PointClass base(Items,PowerupSize,PowerTimer) = 
	item_artifact_random : "Random Powerup or Backpack" []
@PointClass base(Items,PowerupSize) = 
	item_taunt : "Taunt Unusable Item" [
	model(string) : "Model"
]
@PointClass base(Items,PowerupSize) studio("progs/drake/zerkhelm.mdl") = 
	item_artifact_berserker : "Berserker Helm" []
@PointClass base(Items,PowerupSize) studio("progs/drake/shotty.mdl") = 
	item_artifact_optimizer : "Shotgun Optimizer" []
@PointClass base(Items,PowerupSize) studio("progs/drake/gemini.mdl") = 
	item_artifact_equalizer : "Twin Shot" []
@PointClass base(Items,PowerupSize,PowerTimer) studio("progs/drake/levitate.mdl") = 
	item_artifact_levitation : "Boots of Levitation" []
@PointClass base(Items,PowerupSize,PowerTimer) studio("progs/drake/regen.mdl") = 
	item_artifact_regeneration : "Rejuvenation" [
	spawnflags(Flags) = [
		1 : "Lesser" : 0
	]	
	skin(choices) : "Type" = [
		0 : "Normal Green"
		1 : "Red Respawning"
	]
]
@PointClass base(Items,PowerupSize,PowerTimer) studio("progs/drake/life_up.mdl") = item_artifact_vitality : "Heart of Darkness" []

@baseclass  = BackPackArmourSettings [
    armorvalue(integer) : "Armour Amount - override def(15)/30/45) "
]

@PointClass base(Targetname,BackPackArmourSettings,Items,PowerupSize) studio("progs/ad171/w_backpack.mdl") = item_backpack_armour : "Backpack with exact amounts of armor" [
	spawnflags(Flags) = [
		1 : "Green Armor" : 0
		2 : "Yellow Armor" : 0
		4 : "Red Armor" : 0
	]	
]

@PointClass base(Items,PowerupSize) studio("progs/ad171/w_backpack.mdl") = item_backpack : "Backpack full of random/exact amounts of ammo" [
	spawnflags(Flags) = [
		1 : "Shells" : 0
		2 : "Nails" : 0
		4 : "Rockets" : 0
		8 : "Cells" : 0
		4096 : "Bolts" : 0
		8192 : "Poison" : 0
		16384 : "Lava Nails" : 0
		32768 : "Multi-Rockets" : 0
		65536 : "Plasma" : 0
		131072 : "Blood Crystals" : 0
		262144 : "Void Shards" : 0
		524288 : "Elemental Mana" : 0
	]
	count(integer) : "Amount (random) of ammo to give"
	ammo_shells(integer) : "Exact amount of shells"
	ammo_nails(integer) : "Exact amount of spikes"
	ammo_rockets(integer) : "Exact amount of rockets"
	ammo_cells(integer) : "Exact amount of cells"
	ammo_lava_nails(integer) : "Exact amount of lava nails"
	ammo_multi_rockets(integer) : "Exact amount of multi-rockets"
	ammo_plasma(integer) : "Exact amount of plasma"
	ammo_bolts(integer) : "Exact amount of bolts"
	ammo_poison(integer) : "Exact amount of poison"
	ammo_bloodcrystals(integer) : "Exact amount of blood crystals"
	ammo_voidshards(integer) : "Exact amount of void shards"
	ammo_elemental(integer) : "Exact amount of elemental mana"
	armorvalue(integer) : "Armour Shards"
	armortype(choices) : "Armour Quantity" = [
		0 : "Do Nothing"
		1 : "Random Quantity (use count)"
	]
	exactskin(choices) : "Backpack skin" = [
		0 : "Original brown"
		1 : "Green"
		2 : "Blue"
		3 : "Red"
		4 : "Yellow"
		5 : "Swampy"
		6 : "White"
		7 : "Pale"
	]
]

//_____ITEM PROGRESSION SPAWNER_____
@PointClass size(-16 -16 0, 16 16 32) base(Appearflags) color(0 0 200) = item_progspawn : "Spawn location for progression list, use with a list of items, ammo, weapons, with the progspawnlist key and targeting each other" [
	spawnflags(Flags) = [
		32 : "No Tele FX" : 0 : "No tele FX effect when changing item at spawn marker"
	]	
	targetname(target_source) : "Must exist and be the same for all markers in same list"
	target(target_destination) : "Must point to the first item in the progresion list"
	target2(target_destination) : "Targets to fire when the spawn marker is used"
	message(string) : "message to display when triggered"
]

@PointClass size(-16 -16 -16, 16 16 16) color(255 200 128) flags(Angle) = info_shrine : "Shrine Effects (bless if player targets, desecrate if breakable)" [
	style(choices) : "Shrine Type" = [
		0 : "Earth"
		1 : "Water"
		2 : "Air"
		3 : "Fire"
		4 : "Blood"
		5 : "Spirit"
	]
	targetname(target_source) : "Name (required)"
	target(target_source) : "Angry target, only if respects were payed before desecration"
	message(string) : "god Name(def=Cthulhu)"
	ckeyname1(string) : "Optional text to add after respect message"
	ckeyname2(string) : "Optional text to add after desecration message"
	proj_limit(integer) : "Projection limit radius for the aura(def=384)"
	delay(integer) : "Time interval between aura effects(def=0.5 or 0.3 depending on type)"
	cnt(integer) : "Bless amount per blessing interval(def=1)"
]
	
//======================================================================
//
// WEAPON entities
//
//======================================================================
@baseclass size(-16 -16 0, 16 16 56) color(0 0 200) base(Appearflags) = Weapon [
	spawnflags(Flags) = [
		16 : "Respawn" : 0 : "Can respawn after being picked up"
		32 : "Floating" : 0 : "Spawns floating, trigger entity to drop it"
		64 : "Start OFF" : 0 : "Starts off and waits for trigger to spawn"
		128 : "No Particles" : 0 : "No particle or effects active on this entity"
	]
	upgrade_axe(choices) : "Axe Upgrade" = [
		 0 : "Do Nothing"
		 1 : "Only spawn if got upgrade"
	]
	upgrade_ssg(choices) : "Shotgun Upgrade" = [
		 0 : "Do Nothing"
		 1 : "Only spawn if got upgrade"
	]
	upgrade_lg(choices) : "Lightning Gun Upgrade" = [
		 0 : "Do Nothing"
		 1 : "Only spawn if got upgrade"
	]
	message(string) : "Message when picked up"
	respawn_time(integer) : "Respawn time (=-1 instant)"
	respawn_count(integer) : "Total times to respawn"
	respawn_trig(choices) : "respawn trigger condition" = [
		 0 : "Default Respawn"
		 1 : "Wait for trigger"
	]
	progspawnlist(choices) : "Part of an item progression list, use in conjunction with item_progspawn, and target/targetname items in the list" = [
		0 : "Default, not part of a list"
		1 : "Part of an item progression list"
	]
	aflag(integer) : "Override ammo quantity for pickup"
	netname(string) : "Override name of the weapon"
]

//----------------------------------------------------------------------
@PointClass base(Weapon) studio("progs/ad171/g_shadaxeplain.mdl") = weapon_axe : "Axe" []
@PointClass base(Weapon) studio("progs/g_shot.mdl") = weapon_supershotgun : "Super shotgun" []
@PointClass base(Weapon) studio("progs/ad171/g_nail.mdl") = weapon_nailgun : "Nailgun" []
@PointClass base(Weapon) studio("progs/g_lava2.mdl") = weapon_lava_super_nailgun : "Lava Perforator" []
@PointClass base(Weapon) studio("progs/g_lava.mdl") = weapon_lava_nailgun : "Lava Nailgun" []
@PointClass base(Weapon) studio("progs/ad171/g_nail2.mdl") = weapon_supernailgun : "Perforator" []
@PointClass base(Weapon) studio("progs/g_rock.mdl") = weapon_grenadelauncher : "Grenade launcher" []
@PointClass base(Weapon) studio("progs/g_rock2.mdl") = weapon_rocketlauncher : "Rocket launcher" []
@PointClass base(Weapon) studio("progs/g_rock.mdl") skin(2) = weapon_multi_grenade : "Multi-Grenade launcher" []
@PointClass base(Weapon) studio("progs/g_rock2.mdl") skin(1) = weapon_multi_rocket : "Multi-Rocket launcher" []
@PointClass base(Weapon) studio("progs/ad171/g_light.mdl") = weapon_lightning : "Thunderbolt" []
@PointClass base(Weapon) studio("progs/g_crossbow.mdl") = weapon_crossbow : "Crossbow" []
@PointClass base(Weapon) studio("progs/ad171/g_shot1.mdl") = weapon_shotgun : "Sawn-off Shotgun" []
@PointClass base(Weapon) studio("progs/ad171/g_shadaxe.mdl") = weapon_upgrade_axe : "Shadow Axe" []
@PointClass base(Weapon) studio("progs/ad171/g_shot3.mdl") = weapon_upgrade_ssg : "Widowmaker Shotgun" []
@PointClass base(Weapon) studio("progs/ad171/g_plasma.mdl") = weapon_upgrade_lg : "Plasma Gun" []
@PointClass base(Weapon) studio("progs/g_light.mdl") = weapon_plasmalightning : "Plasma Gun" []
@PointClass base(Weapon) studio("progs/hipnotic/g_laserg.mdl") = weapon_laser_gun : "Laser Cannon" []
@PointClass base(Weapon) studio("progs/g_rock.mdl") skin(1) = weapon_proximity_gun : "Proximity Grenade launcher" []
@PointClass base(Weapon) studio("progs/hipnotic/g_hammer.mdl") = weapon_mjolnir : "Mjolnir's Hammer" []
@PointClass base(Weapon) studio("progs/q15/g_saw.mdl") = weapon_chainsaw : "Chainsaw" [
	spawnflags(Flags) = [
		1 : "Use Zerstorer/Drake Version" : 0 : "Change appearance to original version"
	]
]
@PointClass base(Weapon) studio("progs/drake/g_grpple.mdl") = weapon_grapple : "Grappling Hook" []
@PointClass base(Weapon) studio("progs/drake/g_wand.mdl") = weapon_wand : "Wand" []
@PointClass base(Weapon) studio("progs/rrp/g_axe.mdl") = weapon_sword : "Sword" []
@PointClass base(Weapon) studio("progs/drake/g_light2.mdl") = weapon_chain_lightning : "Chain Lightning Gun" []
@PointClass base(Weapon) studio("progs/w_blaster.mdl") = weapon_blaster : "Laser Blaster" []
@PointClass base(Weapon) studio("progs/nehahra/mg_sh2.mdl") = weapon_gshotgun : "Auto Shotgun" []
@PointClass base(Weapon) studio("progs/nehahra/mg_rock2.mdl") = weapon_sprocket : "Sprocket Launcher" []
@PointClass base(Weapon) studio("progs/drake/g_mirv.mdl") = weapon_mirv : "MIRV - Multiple Independently Targeted Reentry Vehicles" []
@PointClass base(Weapon) studio("progs/qmaster/g_airgun.mdl") = weapon_airgun : "Air Fist" []
@PointClass base(Weapon) studio("progs/drake/g_rocks.mdl") = weapon_sidewinder : "Sidewinder" []
@PointClass base(Weapon) studio("progs/drake/g_xbow.mdl") = weapon_buriza : "Asgard Arbalest" []

// Arms of Asgard weapons from Ryan "ryanscissorhands" Holaday
@PointClass base(Weapon) studio("progs/aoa/g_rapier.mdl") = weapon_rapier : "Ghost Rapier" []
@PointClass base(Weapon) studio("progs/aoa/g_mace.mdl") = weapon_mace : "Vampiric Mace" []
@PointClass base(Weapon) studio("progs/redfield/g_lightstaff.mdl") = weapon_ice: "Blizzard Sphere" []
@PointClass base(Weapon) studio("progs/aoa/g_scimitar.mdl") = weapon_scimitar : "Fire Scimitar" []
@PointClass base(Weapon) studio("progs/aoa/g_voidstaff.mdl") = weapon_voidstaff : "Void Staff" []
@PointClass base(Weapon) studio("progs/aoa/g_gungnir.mdl") = weapon_gungnir : "Gungnir" []
@PointClass base(Weapon) studio("progs/aoa/g_sanguinators.mdl") = weapon_sanguinators : "Sanguinators" []
@PointClass base(Weapon) studio("progs/aoa/g_flak.mdl") = weapon_flak : "Flak Cannon" []

//======================================================================
//
// FUNCTIONS
//
//======================================================================
@baseclass base(Appearflags,Targetname,Target) flags(Angle) = FuncItems [
	spawnflags(Flags) = [
		64 : "Start OFF" : 0 : "Start off & wait for trigger"
	]
	_dirt(integer) : "Dirt mapping (override)"
	_minlight(integer) : "Min light for all surface"
	_mincolor(string) : "Min light color R G B"
	_mirrorinside(choices) : "Mirror all faces (e.g. foliage)" = [
		0 : "Normal"
		1 : "Draw back faces"
	]
	_shadow(choices) : "Shadows" = [
		0 : "Do Nothing"
		1 : "Cast shadows"
	]
	_shadowself(choices) : "Self Shadow" = [
		0 : "Do Nothing"
		1 : "Cast shadows on Self"
	]
]

//_____baseclass for BModel lighting options_____
@baseclass = FuncLighting [			

    _separator_ignore_me(string) : "----- Lighting Options -----" :  : "ignore, editor use only."
	
	_minlight(integer) : "Min Light" :  : "Set the minimum light level for every surface of a brush model(BModel). A very useful feature for BModels to make them fit more 'naturally' into their surroundings. Especially where often times light can leave compeletely unlit(black) faces due to their nature(non-static w/hidden faces)."
	_minlight_color(string) : "Min Light color" :  : "Specify RGB component values for the color of the  minlight. Values are between 0 and 255 (between 0 and 1 is also accepted). Default is white(ex 255 255 255)."
	_lightignore(choices) : "Min Light ONLY" :  : "Set a BModel to receive minlight only, ignoring all other forms of lighting. Could be useful on rotators / trains." = [
	   	0 : "OFF(def)"
		1 : "Ignore ALL(Entity/Sun) lighting"
	]
	_minlight_exclude(string) : "Min light exclude (texture name)" :  : "Faces with the given texture name are excluded from receiving minlight on this brush model."	 	
	_shadow(choices) : "Shadows" : : "Set to 1, this model will cast shadows on the world, other BModels and itself. The use of '_shadow' intrinsically implies '_shadowself'. Set -1 on 'func_detail' and 'func_group' to prevent them from casting shadows. Default 0. NOTE - Shadows are STATIC and do NOT move with moving BModels." = [
	   -1 : "Disable Func_detail(_group)" 
	    0 : "Default"
		1 : "Cast shadows"
	]
	_shadowself(choices) : "Self Shadow" :  : "Set to 1, this model will cast shadows on itself if one part of the model blocks the light from another model surface. This can be a better compromise for moving models than full shadowing. Default 0." = [
		0 : "OFF(def)"
		1 : "Cast Shadows on Self"
	]	
	_shadowworldonly(choices) : "Shadow World Only" :  : "Set to 1 this model will cast shadows on the world only, not other BModels. If you are having problems with BModels shadowing each other, this setting sometimes helps to alleviate that." = [
		0 : "OFF(def)"
		1 : "Do NOT Shadow other BModels"
	]	
	_switchableshadow(choices) : "Toggle BModel Shadow" : : "ADVANCED - Set to 1, this BModel casts a shadow that can be switched on/off using QuakeC. To make this work, a lightstyle is automatically assigned and stored in a key called 'switchshadstyle', which the QuakeC will need to read and call the 'lightstyle() builtin' with an 'a' or 'm' to switch the shadow on or off. BModels sharing the same targetname, and with '_switchableshadow' set to 1, will share the same lightstyle." = [
		0 : "Do Nothing"
		1 : "Enabled"
	]	
	_phong(choices) : "Phong Shading" :  : "1 enables phong shading on this model with a default '_phong_angle' of 89 degrees. Simply put, phong shading attempts to hide the 'hard' edges on rounded bruskwork to give the appearance of a smooth rounded surface. For instance, pipes, columns etc."  = [
	    0 : "OFF(def)"
		1 : "Enabled(Smooth Edges)"
	]
	_phong_angle(integer) : "Phong Angle (override, def=89)" :  : "Enter a custom angle for phong shading calculations. Adjacent faces with normals 'x' many degrees apart, or less will, be smoothed." 
	_dirt(choices) : "Dirt Mapping (override)" :  : "-1 disables dirtmapping on the brush model. Useful if the BModel touches or sticks into the world, and you want to keep those areas from turning black. Default 0." = [
	     0 : "Do Nothing"
	    -1 : "Disable Dirt Mapping"
	]		
]

//----------------------------------------------------------------------
@SolidClass base(FuncItems, FuncLighting) = func_button : "Button" [
	speed(integer) : "Speed (def=40)"
	wait(integer) : "Delay before reset (def=1)"
	delay(integer) : "Delay before trigger"
	lip(integer) : "Lip (def=4)"
	health(integer) : "Health (shootable)"
	sounds(choices) : "Sounds" = [
		0 : "Steam metal"
		1 : "Wooden clunk"
		2 : "Metallic clink"
		3 : "In-out"
		4 : "Silent"
		5 : "Custom"
	]
	noise(string) : "Custom sound - 1st move"
	noise1(string) : "Custom sound - 2nd move"
	message(string) : "Message" 
	spawnflags(flags) = [
        32: "Start Disabled" : 0
	]
	alpha(integer) : "Alpha Transparency(def=1,opaque)"
]

@SolidClass base(FuncItems, FuncLighting) = func_door : "Door (Basic)" [
	spawnflags(flags) = [
		1 : "Start Open" : 0
		2 : "Spawn trigger field" : 0
		4 : "Don't link" : 0
		8 : "Gold Key" : 0
        16: "Silver Key" : 0
        32: "Toggle" : 0
	]
	speed(integer) : "Speed (def=100)"
	yaw_speed(integer) : "Speed (returning)"
	wait(integer) : "Delay before close (def=4)"
	lip(integer) : "Lip (def=8)"
	health(integer) : "Health (shootable)"
	dmg(integer) : "Damage when blocked (def=2)"
	message(string) : "Message if triggered"
	sounds(choices) : "Sound" = [
		0 : "Silent"
		1 : "Stone"
		2 : "Base"
		3 : "Stone Chain"
		4 : "Screechy Metal"
		5 : "Custom"
	]
	locksounds(choices) : "Sound (locked)" = [
		0 : "Default talktalk"
		1 : "Short rattle"
		2 : "Medium rattle"
		3 : "Long rattle"
	]
	noise(string) : "Custom sound - Locked"
	noise1(string) : "Custom sound - moving"
	noise2(string) : "Custom sound - Stopped"
	noise3(string) : "Custom sound - Locked"
	noise4(string) : "Custom sound - Key open"
	customkey(choices) : "Custom Key" = [
		0 : "Do nothing"
		1 : "Custom Key 1"
		2 : "Custom Key 2"
		3 : "Custom Key 3"
		4 : "Custom Key 4"
		5 : "Any Key"
	]
	persistentkey(choices) : "Persistent Key" = [
		0 : "Key is taken away when door is unlocked."
		1 : "Key persists in the player's inventory."
	]
	message2(string) : "Custom key message"
	alpha(integer) : "Alpha Transparency(def=1,opaque)"
]

@SolidClass base(FuncItems, FuncLighting) = func_door_secret : "Door (Secret)" [
	spawnflags(flags) = [
		1 : "Open once only" : 0
		2 : "Moves left first" : 0
		4 : "Moves down first" : 0
		8 : "Not shootable" : 0
       16 : "Always shootable" : 0
	]
	speed(integer) : "Speed (def=50)"
	yaw_speed(integer) : "Speed (returning)"
	t_width(integer) : "First distance"
	t_length(integer) : "Second distance"
	wait(integer) : "Delay before close (def=5)"
	dmg(integer) : "Damage when blocked (def=2)"
	message(string) : "Message if touched"
	sounds(choices) : "Sound" = [
		1 : "Medieval"
		2 : "Metal"
		3 : "Base (default)"
		4 : "Silent"
		5 : "Custom"
	]
	locksounds(choices) : "Sound (locked)" = [
		0 : "Default talktalk"
		1 : "Short rattle"
		2 : "Medium rattle"
		3 : "Long rattle"
	]
	noise(string) : "Custom sound - Locked"
	noise1(string) : "Custom sound - Open"
	noise2(string) : "Custom sound - Opening"
	noise3(string) : "Custom sound - Closed"
	alpha(integer) : "Alpha Transparency(def=1,opaque)"
]

//----------------------------------------------------------------------
@SolidClass base(FuncItems, FuncLighting) = func_plat : "Platform" [	
	spawnflags(Flags) = [
		1 : "Low trigger" : 0
		4 : "Min trigger" : 0
		8 : "Start Lower" : 0
		16 : "Start Open" : 0
	]
	speed(integer) : "Speed (def=150)"
	height(integer) : "Distance to move"
	sounds(choices) : "Sound" = [
		1 : "Base (fast)"
		2 : "Medieval (default)"
		4 : "Silent"
		5 : "Custom"
	]
	noise(string) : "Custom sound - Moving"
	noise1(string) : "Custom sound - Stopped"
	alpha(integer) : "Alpha Transparency(def=1,opaque)"
]	

@SolidClass base(FuncItems, FuncLighting) = func_new_plat : "Rogue Plat" [
	spawnflags(Flags) = [
		1 : "Down n'wait" : 0
		2 : "Toggle" : 0
		4 : "Elevator" : 0
		8 : "Elvtr at top" : 0
		16 : "Fixed plat" : 0
		32 : "Start at bottom" : 0
	]
	cnt(integer) : "Number of floors"
	height(integer) : "Height between floors"
	delay(integer) : "Delay before return" : 3
	speed(integer) : "Speed" : 150
	sounds(choices) : "Sounds" : 1 = [
		1: "Base fast"
		2: "Chain slow"
	]
	alpha(integer) : "Alpha Transparency(def=1,opaque)"
]
@SolidClass base(FuncItems, FuncLighting) = func_multi_exploder : "Multiple Explosions"
[
	spawnflags(flags) =
	[
		1 : "Use Particles" : 0
	]
	netname(string) : "Classname to protect from explosion, or targetname if classname not found (Zerstorer hack)"
	dmg(integer) : "Damage for each Explosion"
	duration(integer) : "Duration of Explosions"
	speed(choices) : "Explosion Attonation" : 1 = 
	[
		0: "None"
		1: "Normal"
		2: "Idle"
		3: "Static"
	]
	volume(string) : "Explosion Volume"
	wait(string) : "Pause Between Explosions"
	delay(integer) : "Triggered Delay"
]

//----------------------------------------------------------------------
@SolidClass base(FuncItems, FuncLighting) = func_train : "Train" [
	spawnflags(Flags) = [
		1 : "Start ON" : 0
		2 : "Non Solid" : 0
		4 : "Use Model" : 0
		8 : "Touch damage" : 0
		32: "Start Reversed" : 0
	]
    mdl(studio) : "Use a model"
    model(studio) : "Model Preview (Editor)"
	speed(integer) : "Speed (def=100)"
	dmg(integer) : "block damage (def=2)"
	sounds(choices) : "Sound" = [
		0 : "Silent"
		1 : "Ratchet Metal"
		5 : "Custom"
	]
	noise(string) : "Custom sound - Stopped"
	noise1(string) : "Custom sound - Moving"
	alpha(integer) : "Alpha Transparency(def=1,opaque)"
]



@SolidClass base(FuncItems) = func_particlefield : "Particle Field" [
	spawnflags(flags) =
	[
		1 : "Use Counter" : 0
	]
	cnt(integer) : "Activate on count #" : 1
	count(integer) : "Paticle Density" : 2
	col(choices) : "Particle color (type value 0-255)" : 192 =[
		  1 : "Gray"
		 15 : "White"
		 63 : "Greenish"
		 79 : "Red"
		192 : "Yellow"
		208 : "Blue"
	]
	noise(string) : "Activate Sound"
	dmg(integer) : "Damage"
]

@PointClass base(Target, Targetname) = func_counter : "Counter" [
	spawnflags(flags) = [
		1 : "Toggle" : 0
		2 : "Loop" : 0
		4 : "Step" : 0
		8 : "Reset" : 0
		16 : "Random" : 0
		32 : "Finish Count" : 0
		64 : "Start On" : 0
	]
	count(integer) : "Count" : 2
	delay(integer) : "Delay B4 Output"
]

@PointClass base(Target, Targetname) = func_oncount : "Output On Count" [
	count(integer) : "Fire on Count(def=1)"
]

//----------------------------------------------------------------------
@PointClass base(Appearflags) flags(Angle) size(-8 -8 -8, 8 8 8) = path_corner : "Path Corner" [
	spawnflags(Flags) = [
		1 : "Exact logic" : 0
		2 : "Instant" : 0
		4 : "Reverse" : 0
		8 : "No Pause" : 0
	]
	targetname(target_source) : "Name of path corner"
	corner_event(string) : "Target to trigger when used"
	corner_route(choices) : "Change route logic" = [
		0 : "Do nothing"
		1 : "Forward"
		2 : "Alt Forward"
		3 : "Backward"
		4 : "Exact"
		5 : "Random"
	]
	corner_switch(choices) : "Change reverse state" = [
		-1 : "No"
		 0 : "Do Nothing"
		 1 : "Yes"
		 2 : "Toggle"
	]
	corner_pause(choices) : "Change pause state" = [
		-1 : "No"
		 0 : "Do Nothing"
		 1 : "Yes"
		 2 : "Toggle"
	]
	state(choices) : "Starting route" = [
		0 : "Do Nothing"
		1 : "Forward"
		2 : "Alt Forward"
		3 : "Backward"
	]
	target(target_destination) : "Targetname of Forward route"
	target2(target_destination) : "Targetname of Alt Forward route"
	targetback(target_destination) : "Targetname of backward route"
	wait(integer) : "Wait at corner"
	delay(integer) : "Random delay at corner"
	alpha(integer) : "Visual Arrow (def=0.35)"
	speed(integer) : "Speed between corners (def=100)"
]

@PointClass base(Appearflags) flags(Angle) size(-8 -8 -24, 8 8 24) = dragon_corner : "Dragon Path Corner" [
	targetname(target_source) : "Name of path corner"
	target(target_destination) : "Targetname of Forward route"
]

//----------------------------------------------------------------------
@SolidClass base(FuncItems, FuncLighting) = func_wall : "Wall" [
	spawnflags(Flags) = [
		2 : "A Frame" : 0
		16: "Mod Check" : 0
	]
	alpha(integer) : "Alpha Transparency(def=1,opaque)"
]

@SolidClass base(FuncItems) = func_nodraw : "Invisible Wall" [
	spawnflags(Flags) = [
		1 : "Show brush geometry" : 0
	]
	alpha(integer) : "Alpha Transparency(def=1,opaque)"
]

@SolidClass base(FuncItems) = func_bspframe : "Alternate Frame for explobox brush" [
	alpha(integer) : "Alpha Transparency(def=1,opaque)"
]

@SolidClass base(FuncItems, FuncLighting) = func_pushable : "Pushable Wall" [alpha(integer) : "Alpha Transparency(def=1,opaque)"]
@SolidClass base(FuncItems, FuncLighting) = func_togglewall : "Toggleable Blocker" []
@SolidClass base(FuncItems, FuncLighting) = func_breakawaywall : "SUB_Remove-able Wall" [alpha(integer) : "Alpha Transparency(def=1,opaque)"]
@SolidClass base(FuncItems, FuncLighting) = func_slidebox : "Slicky Surface" [alpha(integer) : "Alpha Transparency(def=1,opaque)"]

@SolidClass base(FuncItems, FuncLighting) = func_illusionary : "Wall Illusionary" [
	spawnflags(Flags) = [
		2 : "A Frame" : 0
	]
	alpha(integer) : "Alpha Transparency(def=1,opaque)"
]
@SolidClass base(FuncItems, FuncLighting) = func_episodegate : "Episode Gate" [
	spawnflags(Flags) = [
		1 : "Episode 1" : 0
		2 : "Episode 2" : 0
		4 : "Episode 3" : 0
		8 : "Episode 4" : 0
	]
	alpha(integer) : "Alpha Transparency(def=1,opaque)"
]
@SolidClass base(FuncItems, FuncLighting) = func_bossgate : "Boss gate" [alpha(integer) : "Alpha Transparency(def=1,opaque)"]
//----------------------------------------------------------------------
@SolidClass base(FuncItems, FuncLighting) = func_laser : "Lasers" [
	spawnflags(Flags) = [
		2 : "Solid" : 0
		16: "No Damage" : 0
	]
	message(string) : "Switched off Message"
	message2(string) : "Switched on Message"
	wait(integer) : "-1 = display switched message once"
	dmg(integer) : "Touch damage (1 per 0.1s)"
	alpha(integer) : "Alpha Transparency(def=0.5)"
	sounds(choices) : "Sounds" = [
		0 : "Silent"
		1 : "Laser"
		5 : "Custom"
	]
	noise1(string) : "Custom sound : Switch ON"
	noise2(string) : "Custom sound : Switch OFF"
]
//----------------------------------------------------------------------
@SolidClass base(FuncItems, FuncLighting) = func_skill : "Skill Select" [
	spawnflags(Flags) = [
		1 : "Start Open" : 0
	]
	target(target_destination) : "Target - Particle Emitters"
	target2(target_destination) : "Target2 - When touched/damaged"
	style(choices) : "Skill level" = [
		0 : "Easy (default)"
		1 : "Normal"
		2 : "Hard"
		3 : "Nightmare"
	]
	message2(string) : "Alternative touch/damage message"
	health(integer) : "Can be damaged instead of touched"
	speed(integer) : "Movement Speed (def=100)"
	lip(integer) : "Lip (def=8)"
	noise1(string) : "Custom sound : Stopped"
	noise2(string) : "Custom sound : Start/Loop"
	noise3(string) : "Custom sound : Touch"
	alpha(integer) : "Alpha Transparency(def=1,opaque)"
]
//----------------------------------------------------------------------
@SolidClass base(FuncItems, FuncLighting) = func_bob : "Bobbing Bmodel" [	
	height(integer) : "Intensity (def=4)"
	count(integer) : "Cycle timer (def=2, min=1)"
	waitmin(integer) : "Speed up scale (def=1)"
	waitmin2(integer) : "Slow down scale (def=0.75)"
	delay(integer) : "Delay start (-1=random)"
	alpha(integer) : "Alpha Transparency(def=1,opaque)"
]	
//----------------------------------------------------------------------
@SolidClass base(FuncItems, FuncLighting) = func_explobox : "Exploding Brushwork" [
	noise(string) : "Custom Sound - Explosion"
	health(integer) : "Health (def=15)"
	dmg(integer) : "Radius Damage (def=160)"
	alpha(integer) : "Alpha Transparency(def=1,opaque)"
]

//NOTE- These two directly below still need sorted out
//_____func_pressureswitch Settings_____
@baseclass = PSwitchSettings [
	message(string) : "Message" :  : "Message to display when triggered"
	speed(integer)  : "Move Speed (def=40)"
	lip(integer) : "Lip (def 4)" :  : "Lip remaining at end of move. (def=4)"
	//wait(integer) : "Wait (-1 = display message and fire target(s) only once)"
	//angle(integer) : "Direction" :  : "Always moves downward (needs to reflect gravity pressure)"
	sounds(choices) : "Sound Style" = [
		0 : "Steam Metal" 
		1 : "Wooden" 
		2 : "Metallic" 
		3 : "In-out" 
		4 : "Silent" 
		5 : "Custom"
	]
	noise(string) : "Custom Sound (1st movement)"
	noise1(string) : "Custom Sound (2nd movement)" : : "(default = noise wav file)"	
]

//_____PRESSURE SWITCH_____
@SolidClass base(FuncItems,PSwitchSettings,FuncLighting) = func_pressureswitch : "Pressure Switch - NOTE - To be used in conjunction with 'func_insidevolume' and 'trigger_doorstate'." [alpha(integer) : "Alpha Transparency(def=1,opaque)"]
//_____INSIDE VOLUME_____
@SolidClass base(Appearflags) = func_insidevolume : "Function to test if an entity bounding box is inside of this volume." [
	spawnflags(flags) = [
		1 : "Payer" : 0 : "Will react to Player(s)"
	    2 : "Monster" : 0 : "Will react to Monster(s)"
	    4 : "Item" : 0 : "Will react to item(s)"
		8 : "Pushable" : 0 : "Will react to pushable(s)"
		64 : "Start OFF" : 0 : "Start OFF, wait for trigger"
	]
	targetname(target_source) : "Name" :  : "Works with entity state system."
	target(target_destination) : "Target (fully inside)" :  : "Name of target(s) to trigger when something is FULLY INSIDE the volume (fires every 0.1s)."
	target2(target_destination) : "Target2 (partly inside)" :  : "Name of target(s) to trigger when something is PARTIALLY INSIDE the volume (fires every 0.1s)."
	message(target_destination) : "Target3 (volume exit)" :  : "Name of target(s) to trigger when exiting the VOLUME(fires on exit only)."
	wait(choices) : "Wait" :  : "-1 = Fire the FULLY INSIDE/EXIT volume targets once." = [
		0 : "Default"
	   -1 : "Only ONCE"
	]
	delay(integer) : "Delay" :  : "Time before the volume controller becomes active."
	message2(target_destination) : "Triggered ONLY by -" :  : "Name of the only entity that can interact with this volume."
	no_deadbody(choices) : "Corpse Activate" :  : "1 = Monster dead bodies will not trigger." = [
		0 : "Enabled(def)"
		1 : "Disabled"
	]
]

//======================================================================
//
// TRIGGERS
//
//======================================================================
@baseClass base(Appearflags) = TrigOFF [ 
	spawnflags(flags) = [ 64 : "Start OFF" : 0 ] ]
@baseClass = TrigSound [
	sounds(choices) : "Sound style" : 0 = [
		0 : "Default"
		1 : "Secret"
		2 : "Beep beep"
		3 : "Large switch"
		4 : "Silent"
		5 : "Custom"
		6 : "Secret 3 (MWubwubwub)"
		7 : "Secret 2 (Bell)"
	]
	noise(string) : "Custom Sound - Triggered"
]
@baseClass = TrigUpg [
	upgrade_axe(choices) : "Axe Upgrade" = [
		 0 : "Do Nothing"
		 1 : "Only trigger if got upgrade"
	]
	upgrade_ssg(choices) : "Shotgun Upgrade" = [
		 0 : "Do Nothing"
		 1 : "Only trigger if got upgrade"
	]
	upgrade_lg(choices) : "Lightning Gun Upgrade" = [
		 0 : "Do Nothing"
		 1 : "Only trigger if got upgrade"
	]
]

//----------------------------------------------------------------------
@baseClass base(TrigUpg,TrigSound,Appearflags,Targetname,Target)
	flags(Angle) color(128 0 128) = TrigBasic [
	spawnflags(flags) = [ 
		1 : "No Touch" : 0
		64 : "Start OFF" : 0
	]
	health(integer) : "Health"
	delay(integer) : "Delay before trigger"
	message(string) : "Message when triggered"
	killtarget(string) : "Kill target" : : "Use trigger_entitystate_off instead!"
]
@SolidClass base(TrigBasic) = trigger_once : "Trigger ONCE" [
	spawnflags(flags) = [ 
		8 : "In View" : 0
		16: "MOD Check" : 0
		32: "Monsters" : 0
	]
	t_length(integer) : "Inview Distance"
]
@SolidClass base(TrigBasic) = trigger_multiple : "Trigger MULTIPLE" [
	spawnflags(flags) = [ 
		16: "MOD Check" : 0
		32: "Monsters" : 0
	]
	wait(choices) : "Wait before reset" = [
		-1 : "Never reset"
		 4 : "Default"
	]
]
@SolidClass base(TrigBasic) = trigger_secret : "Trigger Secret" [
	spawnflags(flags) = [ 2: "Remove/Block Message" : 0 ]
]

// Drake cutscene entities (derived from Zerstorer)
@SolidClass base(TrigBasic) = trigger_camera : "Trigger Drake Cutscene" []
@PointClass base(TrigBasic) = trigger_camera_point : "Trigger Drake Cutscene" []
@PointClass base(Targetname) = trigger_gocamera : "Use to start Zerstorer Cutscene" []
@PointClass base(Targetname,Target) size(-8 -8 -8, 8 8 8) = info_movie_camera : "8x8x8 Drake Cutscene Camera Corner Trigger" [
	focal_point(string) : "Targetname of the object to look at when passing this corner"
]
@PointClass base(Targetname) = info_script : "Drake Custscene Centerprints" [
	next_script(integer) : "Next script's script_num, set to 0 if last"
	script_num(integer) : "This Script's reference number"
	script_delay(integer) : "Delay before printing this script's message"
	message(string) : "Message to centerprint"
]
@PointClass base(Targetname) = info_focal_point : "Drake Custscene Camera Target(same as info_target or info_notnull)" []

//----------------------------------------------------------------------
@PointClass base(TrigUpg,TrigSound,Appearflags,Targetname,Target,Target2) color(128 0 128)
	size(-8 -8 -8, 8 8 8) = trigger_relay : "Trigger relay" [
	spawnflags(flags) = [ 
		2: "Random" : 0
		64: "Starts Off" : 0
	]
	cnt(integer) : "Random Time Qty to add to delay"
	wait(choices) : "Wait before reset" = [
		-1 : "Trigger Once"
		 0 : "Always reset"
	]
	delay(integer) : "Delay before trigger"
	message(string) : "Message when triggered"
	waitmin(integer) : "% random chance (0.0-1.0)"
]

@PointClass base(TrigOFF,TrigSound,Targetname,Target) color(128 0 25)
	size(-8 -8 -8, 8 8 8) = trigger_counter : "Trigger counter" [
	spawnflags(flags) = [ 1: "No Messages" : 0 ]
	message(string) : "Final Message"
	message2(string) : "Final Message (cannot be blocked)"
	count(integer) : "Count before firing"
	delay(integer) : "Delay before trigger"
]

//_____TRIGGER ENGINE_____
//NOTE - NEEDS better descriptive text for comments and functionality
@PointClass base(Targetname, Target)size(-8 -8 -16, 8 8 16) color(0 0 255) = trigger_engine : "When targetted(triggered), it triggers target(s) when certain engines are active." [
    spawnflags(flags) = [ 
	    1 : "FITZ" : 0
	    2 : "DP" : 0
	    4 : "FTE" : 0
	   16 : "RAIN" : 0
	   32 : "SNOW" : 0  
	]
    wait(integer)  : "Wait" :  :  "-1 = will only fire targets once."
    delay(integer) : "Delay" :  : "Delay before firing (after being triggered)."
    cnt(integer)   : "Randomize" :  : "Random amount of time to add to delay."
]
//_____TRIGGER GIVEITEMS_____
@SolidClass base(Appearflags, Targetname, Target) = trigger_giveitems : "A 'trigger brush' used to give items to the player. The target items only work when the 'delay spawned' or 'Start OFF' spawnflag is set. The item pickup sound can be turned off by adding a key/value pair of 'sounds' '4', to the item. The target items will not respawn or work more than once. NOTE - This entity is designed for itself to be triggered, for special use situations that are more 'event' based than location." [
    spawnflags(flags) = [ 
	    1 : "No Touch" : 0  
	   64 : "Start OFF" : 0 
	]
	message(string)  : "Message" : : "Message to display when triggered."
    angle(integer)   : "Direction(facing) to Activate" :  : "Facing Direction for the trigger to work, use '360' for angle 0. If not set activates from all directions."
    sounds(choices) : "Sound style" : 0 = [
		0 : "Default"
		1 : "Secret"
		2 : "Beep beep"
		3 : "Large switch"
		4 : "Silent"
		5 : "Custom"
		6 : "Secret 3 (MWubwubwub)"
		7 : "Secret 2 (Bell)"
	]
	noise(string) : "Custom Sound"
]

//_____TRIGGER TAKEARTIFACT_____
@SolidClass base(Appearflags, Targetname, Target, TrigSound) = trigger_takeartifact : "Trigger volume used to remove powerups from the player" [
    spawnflags(flags) = [ 
	    1 : "No Touch" : 0  : "Triggered via other entities"  
		2 : "id" : 0 : "Remove id artifacts (Quad, Pentgram, Ring, Envsuit)" 
		4 : "Arcane Dimensions" : 0 : "Remove AD artifacts (Nail Piercer, Sharp Shooter)"
		8 : "Vania" : 0 : "Remove Vania artifacts (Jump Boots, Blast Belt, Lavashield, Wetsuit)"
		64 : "Start OFF" : 0 : "Starts off, waits for trigger" 
	]
	message(string) : "Message to display when triggered"
	waitmin(integer) : "Override timer for powerup, anything below value is ignored (def=0)"
	waitmin2(integer) : "Slow down timer for trigger working again (def=0.1s)"
	waitmin3(integer) : "Slow down timer for sound playing (def=1s)"
	wait(integer) : "-1 = trigger once functionality (def=0)"
]

@PointClass base(Targetname,Target) color(128 0 128)
	size(-8 -8 -16, 8 8 16) = trigger_itemrespawnupd : "Change respawn flag" [
	spawnflags(flags) = [ 16: "Respawn" : 0 ]
]

@PointClass base(TrigSound,Targetname,Target) color(128 128 0)
	size(-8 -8 -16, 8 8 16) = trigger_clientmsg : "Client message" [
	message(string) : "Message when triggered"
]

//_____TRIGGER CD TRACK_____
@PointClass base(Targetname) size(-8 -8 -8, 8 8 8) color(200 128 0) = trigger_cdtrack : "Allows for CD/Music Track change to occur mid map. Suitable for ALL clients. Non CD external music tracks(.ogg/.mp3) are typically named with the format of: track01,  track02... track99 etc. Only the trailing numbers are required for 'Track Number'. NOTE - Quakespasm looks for music files in '... id1/music' while Darkplaces looks in '... id1/sound/cdtracks'. Using a Mod directory is also acceptable(ex '... ad/music' or '... ad/sound/cdtracks'." [
    count(integer) : "Track Number (ex 02->xx)" :  : "Number of the CD/Music Track to Play/Change to."
]
//_____TRIGGER SKY BOX_____
@PointClass base(Targetname) size(-16 -16 -8, 16 16 8) color(230 230 230) = trigger_skybox : "Allows for a custom Skybox change to occur mid map. Suitable for ALL clients. Skyboxes(.tga) are typically referenced as: interstellar_, moonrise_, voidsmoke_ etc. The underscore is not neccesary but used for clarity. The important part is to just leave off the last 'two' trailing letters(bk, dn, ft, lf, rt, and up) from the name of your skybox for 'Skybox Name'. NOTE: Directory paths are allowed so, '...env/mycustomfolder/mycustomsky_' is perfectly valid. NOTE - Quakespasm/Darkplaces both look for skybox files in '...id1/gfx/env/'. Using a Mod directory is also acceptable(ex '... ad/gfx/env'." [
    message(string) : "Skybox Name (EX: interstellar_)" :  : "Name of the Skybox to Load/Change to."
]

@PointClass base(Targetname,Target) color(128 0 25) size(-8 -8 -16, 8 8 16)
	= trigger_monstermovespeed : "Change movement speed" [
	wait(choices) : "Only work Once" = [
		-1 : "Trigger Once"
		 0 : "Always reset"
	]
	state(choices) : "Monster Movement" = [
		-1 : "No Movement"
		 0 : "Toggle (Default)"
		 1 : "Free Movement"
	]
]

@PointClass base(Targetname,Target) color(128 0 128)
	size(-8 -8 -16, 8 8 16) = trigger_monsterkill : "Remove Monster(s)" [
	spawnflags(Flags) = [
		8 : "Only Damage to Flinch" : 0
		16 : "Death Function" : 0
		32 : "Gib" : 0
	]
]

@PointClass base(Targetname,Target,Target2) color(128 0 128)
	size(-8 -8 -16, 8 8 16) = trigger_monsterattack : "Force Monster Attack" [
]

//_____DOOR STATE_____
@PointClass base(Appearflags,TrigOFF,Targetname) size(-8 -8 -16,8 8 16) color(0 200 128) = trigger_doorstate : "Trigger func_door(s) to exact state (open/close)" [
	
	target(target_destination) : "Target (func_door's ONLY!)"
	state(choices) : "Door State" = [	
		1 : "Open"
		0 : "Closed"		
	]
	wait(choices) : "Trigger" = [
		0 : "Default"
	   -1 : "Only Once"
	]
]

//_____TRIGGER TELEPORT_____
//Teleport player/monsters to target location
//if targetname is setup, the teleporter requires a trigger to activate
//This entity cannot be damaged and is always touchable once activated
@SolidClass base(Appearflags, Targetname) 
	= trigger_teleport : "Trigger Teleport - Teleporters consist typically of three parts. Two brushes(a world brush with a special '*teleporter' texture and a 'trigger_teleport' brush) and an 'info_teleport_destination' point entity. Example, 1)Place an 'info_teleport_destination' somewhere in your map and give it a name of 'dest1'. 2)Now, in another part of your map draw out a 64X64X64 brush near floor level, give it a 'trigger' texture and then: r.click >'tie to entity/create brush entity > trigger> trigger_teleport', and give it a target of 'dest1'. 3)Lastly duplicate that brush, in place, and 'move to world/make structural' (r.click) and give it a teleporter texture. That's the basics, decorate/customize as needed." [
	target(target_destination) : "Target" : "Points to info_teleport_destination/info_teleportinstant_dest entity"
	spawnflags(Flags) = [
		1 : "Player Only" : 0 : "Can only be used by players (nothing else)"
		2 : "No Ambient" : 0 : "No teleporter ambient sound regardless of state"
		4 : "Start ON" : 0 : "Will start active regardless of targetname setting"
		8 : "Instant" : 0 : "Instant teleporter, no change to velocity, use with info_teleportinstant_dest"
		16 : "Projectiles" : 0 : "Allow projectiles to use regular/instant teleporters"
		32 : "No Tele FX" : 0 : "No player sound + FX when teleporting entities"
		64 : "Start OFF" : 0 : "Starts off, waits for trigger" 
	   128 : "All Physicals" : 1 : "Affect all physical objects"
	]
	wait(choices) : "Wait before reset" = [
		-1 : "Trigger Once"
		 0 : "Always reset"
	]
	wait2(choices) : "target2 only fires once" = [
		-1 : "Trigger Once"
		 0 : "Always reset"
	]
	speed(integer) : "Speed after teleport (def=300)"
	target(string) : "Points to info_teleport_destination entity"
	target2(string) : "Can be used to fire additional targets"
	volume(integer) : "Teleport hum sound (def=0.5)"
	noise(sound) : "Custom sound to play when active (must be looped, def=hum1.wav)"
	waitmin(integer) : "Custom Sound Length(def=3.622)"
	waitmin2(integer) : "Time between teleport sound/fx (def=0.2s) being played"
	waitmin3(integer) : "Alpha value for debug lvl showing triggers ingame (def=0.75)"
	dmg(integer) : "damage from using the teleport trigger (def=0)"
	dmgskill(string) : "damage based on skill level X=Easy, Y=Normal, Z=Hard/NM (def=0,0,0)"
	debuglvl(choices) : "shows extra info" = [
		1 : "Impact markers"
		2 : "Impact arrows"
		3 : "Console text"
	]
	telefixangle(choices) : "Fixed or preserve angle direction for instant teleporters" = [
		0 : "Preserve angle (default)"
		1 : "Fixed angle"
	]
	no_trackondeath(choices) : "" = [
		0 : ""
		1 : "Homing projectiles don't stop tracking"
	]
]
//_____INFO_TELEPORTINSTANT_DEST_____
@SolidClass = info_teleportinstant_dest : "Destination for an instant teleporter" [
    targetname(target_source) : "link to trigger_teleport" 
	target(target_destination) : "fires when used as a destination (works only once)"
	angletarget(target_destination) : "targeting entity used for custom direction"
	angles(string) : "Pitch Yaw Roll (destination angle after teleporting)"
	teledest(integer) : "Unique number for multiple teleporter destinations"
]
//_____TRIGGER MAXHP_____
@SolidClass base(Appearflags) = trigger_maxhp : "Change the player maximum hp and maximum mega values" [
	targetname(target_source) : "trigger entity (works with entity state system)"
	target(target_destination) : "trigger all these targets when activated"
	max_health(integer) : "Maximum Health for ALL the player / client"
	mega_health(integer) : "Maximum Health for picking up the mega health item"
	count(integer) : "Skill level (0=ALL, 1=EASY, 2=NORMAL, 4=HARD, 8=NM, 15=ALL)"
	wait(integer) : "-1=will only fire targets once (switches off)"
	sounds(integer) : "1=Secret,2=talk,3=switch,4=silent,6=secret2"
	noise(integer) : "custom sound to play when triggered"
	message(string) : "message to display when triggered"
]
//_____TRIGGER GRAVITY_____
@SolidClass base(Appearflags) = trigger_gravity : "Trigger Gravity - change entity/entities/player or server (world) gravity" [
	spawnflags(Flags) = [
		1 : "NO Touch" : 0 : "Only triggered via other entities"
		2 : "Server" : 0 : "Change server gravity vs entity gravity"
		4 : "Player" : 0 : "Player(s) only can touch this trigger"
		8 : "Monsters" : 0 : "Monster(s) only can touch this trigger"
	   16 : "Reset" : 0 : "Reset any entity to default gravity (does not affect server)"
	   64 : "Start OFF" : 0 : "Requires trigger to activate"
	  128 : "All Physicals" : 1 : "Affect all physical objects"
	]
	targetname(target_source) : "Name" : : "Name to trigger this entity (works with entity state system)"
	target(target_destination) : "Target" : : "Entities to affect with gravity update"
	target2(target_destination)  : "Target2" : : "Fire event(s) everytime gravity is changed"
	count(integer) : "Gravity (server=0-1000 (def=800) entity=0-1, can be negative)"
	wait(integer) : "Wait (def -1)": : "-1, only fire targets once"
	waitmin2(integer) : "Minimum time between re-triggering fire events"
	noise2(sound) : "Custom Sound" : : "Sound to play everytime gravity is changed"
	waitmin(integer)  : "Minimum time between re-triggering sound"	
]
//Patch2 addition
//_____TRIGGER VELOCITY_____
@SolidClass base(Appearflags) = trigger_velocity : "Trigger Velocity - Check for projectile / player velocity! This entity cannot be damaged and is always touchable." [
	spawnflags(Flags) = [
		1 : "Player" : 0 : "Player only trigger"
		2 : "Monster" : 0 : "Monster only trigger"
		4 : "Grenade" : 0 : "Grenade projectile only trigger"
		8 : "Rocket" : 0 : "Rocket projectile only trigger"
	   64 : "Start OFF" : 0 : "Starts off, waits for trigger"
	]
	targetname(target_source) : "Name" : : "Name used as a target by other entities (works with entity state system)"
	target(target_destination) : "Target" : : "Fire event(s) everytime trigger conditions successful"
	message (string)  :  "Message (conditions met)" : : "Display a message everytime trigger conditions successful"
	waitmin(integer) : "Target retrigger delay (def=1s)" : : "Time between target/message working again"
	target2(target_destination)  : "Target2" : : "Fire event(s) everytime trigger exceptions fail"
	message2(string)  : "Message2 (exceptions fail)" : : "Display a message everytime trigger exceptions fail"
	waitmin2(integer) : "Target2 retrigger delay (def=1s)" : : "Time between target2/message2 working again"
	wait(integer) : "Wait (def -1)" : : " -1, only fire the triggers functionality once"
	speed(integer) : "Minimum velocity speed to trigger (def=500)"
	angle(integer) : "Direction(facing) to Activate" : : "Facing Direction for trigger to work, use '360' for angle 0."
	ideal_yaw (integer) : "Facing angle sensitivity (def=0.3, range = 0 - 1)"
	delay (integer) : "Delay spawn(def 1 sec / -1 none)" : :  "-1 = No spawn delay, 0 (def=1s), +0 = spawn delay"
	dmg_take(integer) : "Grenades will explode on impact of this trigger"	
]
@SolidClass base(TrigOFF,Targetname,Target) flags(Angle)
	= trigger_push : "Trigger Push" [
	spawnflags(flags) = [ 
		1 : "Once Only" : 0
		2 : "Silent" : 0
		4 : "No Monsters" : 0
		8 : "Affect All Physical Objects" : 0
		16: "Additive Velocity" : 0
		32: "Guide To Target" : 0
	]
	angle(string) : "Angle of push"
	speed(integer) : "Speed of push (def=1000)"
	noise(string) : "Custom Sound to play(def=ambience/windfly.wav)"
	tetherrange(integer) : "Distance from target before starting movement(def=512)"
	tetherdist(integer) : "Distance to stop applying force (def=32)"
]

@SolidClass base(TrigBasic) = trigger_jump : "Q3-style Jump Pad" [
	speed(integer) : "Speed of push" : 40
]

@SolidClass base(TrigOFF,Targetname,Target) flags(Angle)
	= trigger_fog : "Trigger Fog" [
	speed(integer) : "Time to fade (-1=Instant)"
	wait(choices) : "Wait before reset" = [
		-1 : "Trigger Once"
		 0 : "Always reset"
		 2 : "Default"
	]
	fog_density(integer) : "Fog Density (def=0.1)"
	fog_colour(string) : "Fog Colour (0.1 0.1 0.1)"
]
@SolidClass base(TrigOFF,Targetname,Target) flags(Angle)
	= trigger_ladder : "Trigger Ladder" [
	waitmin(integer) : "Time between climbing sound"
	speed(integer) : "Velocity to climb (def=160)"
	sounds(choices) : "Sounds" = [
		1 : "Metal"
		2 : "Wood (def)"
		3 : "Rope"
		4 : "Silent"
		5 : "Custom"
	]
	noise1(string) : "Custom Sound - Climb 1"
	noise2(string) : "Custom Sound - Climb 2"
	noise3(string) : "Custom Sound - Climb 3"
	noise4(string) : "Custom Sound - Climb 4"
]
//----------------------------------------------------------------------
@BaseClass base(TrigOFF,Targetname) flags(Angle) = TrigBubbles [
	spawnflags(flags) = [ 2 : "Bubbles" : 0 ]
	count(integer) : "Bubble active total(def=5)"
	height(integer) : "Max Travel distance"
	yaw_speed(integer) : "Delay between emissions(def=0.5)"
	style(choices) : "Bubble Type" = [
		1 : "Grey"
		2 : "Brown 1"
		3 : "Blue 1"
		4 : "Green 1"
		5 : "Red 1"
		6 : "Brown 2"
		7 : "Pink / Yellow"
		8 : "Brown 3"
		9 : "Purple 1"
		10: "Purple 2"
		11: "Brown 4"
		12: "Green 2"
		13: "Yellow"
		14: "Blue 2"
		15: "Red 2"
	]
	old_velocity(string) : "Bubble speeds (shake base multi)(def=5 10 15)"
]
//_____Trigger Hurt Settings_____
@baseclass = TriggerHurtSettings  [
    dmg(integer) : "Damage (def=5)"
	wait(integer) : "Time between pain touch (def=1s)"
	speed(integer) : "Falling Velocity (def=300)"
]
//_____TRIGGER HURT_____
@SolidClass base(Targetname, TriggerHurtSettings, TrigBubbles, Target) = trigger_hurt : "Trigger Hurt" [
        spawnflags(flags) = [ 
		4 : "Monster ONLY" : 0 : "Will only affect monsters"	
		16: "MOD Check" : 0 : "Will remove this entity if THIS mod is active"
		32: "Falling" : 0 : "Only hurts if the player is falling (speed=velocity)"
	]
	dmgskill(string) : "damage based on skill level X=Easy, Y=Normal, Z=Hard/NM (def=0,0,0)"
]
@SolidClass base(TrigBubbles) = trigger_heal : "Trigger Heal" [
	target(target_destination) : "Target - first heal"
	target2(target_destination) : "Target - healing expired"
	wait(integer) : "Time between heals (def=1s)"
	healamount(integer) : "Heal Amount (def=10)"
	max_health(integer) : "Max Amount to Heal (def=50)"
	sounds(choices) : "Sounds" = [
		0 : "Silent"
		1 : "Heal 15"
		2 : "Heal 25"
		3 : "Heal 100"
		4 : "Respawn"
		5 : "Custom"
	]
	noise(string) : "Custom Sound"
	lip(choices) : "Block Message" = [
		0 : "Do Nothing"
		1 : "Block Healing"
		2 : "Block All"
	]
	message(string) : "Healing Message"
	message2(string) : "Healing Expired"
]

@SolidClass base(Targetname) = trigger_smite : "Trigger Lightning Strike Relay" [
	cnt(integer) : "Number of lightning strikes (def=1)"
]

@SolidClass base(TrigBubbles) = func_bubbles : "Bubble generator volume" []
@SolidClass base(Misc) = func_drips : "Dripping water volume" [
	spawnflags(Flags) = [ 
		2 : "Silent" : 0
		8 : "Large drips" : 0
		16 : "Blood" : 0
		32 : "Slime" : 0
	]
	count(integer) : "Drip active total (def=5)"
	wait(integer) : "Delay before start (def=0.2)"
	yaw_speed(integer) : "Delay between emissions(def=0.5)"
	noise1(string) : "Drip noise (def=misc/drip1.wav)"
	noise2(string) : "Drip noise (def=misc/drip2.wav)"
	noise3(string) : "Drip noise (def=misc/drip3.wav)"
]

//----------------------------------------------------------------------
@SolidClass base(TrigOFF,Targetname,Target) = trigger_changelevel : "Trigger Change Level" [
	spawnflags(flags) = [ 
		1: "No Intermission" : 0
		2: "Reset Inventory" : 0
	]
	map(string) : "Next map name" : : "Leave blank to reload same map"
	message(string) : "Congratulations text"
	message2(string) : "Congratulations text 2nd page"
	message3(string) : "Congratulations text 3rd page"
	message4(string) : "Congratulations text 4th page"
	startspawn2(integer) : "Spawn number in next map (1-7)"
]
@SolidClass base(TrigOFF,Targetname,Target) = trigger_setskill : "Trigger Set Skill" [
	health(integer) : "Health"
	wait(integer) : "Time between re-trigger (def=0.2)"
	message(choices) : "Skill to change to" = [
        0 : "Easy"
        1 : "Medium"
        2 : "Hard"
        3 : "Nightmare!"
	]
]
@SolidClass base(Targetname) = trigger_touchsound : "Trigger Touch Sounds" [
	spawnflags(flags) = [
		8 : "World Geo"
		16: "Drain"
	]
	message(choices) : "Sounds" = [
        0 : "Default"
        1 : "Water (DEF)"
        2 : "Slime"
        3 : "Lava"
		4 : "Silent"
		5 : "Custom"
	]
	noise(string) : "Custom Touch Sound"
	noise1(string) : "Custom Exit Sound"
	noise2(string) : "Custom Drain Sound"
	speed(integer) : "Drain Time"
	yaw_speed(integer) : "Drain Movement"
	water_alpha(integer) : "Water Alpha"
]
@SolidClass base(TrigOFF,Targetname) = trigger_rune : "Trigger Rune" [
	spawnflags(flags) = [
		1 : "Rune 1"
		2 : "Rune 2"
		4 : "Rune 3"
		8 : "Rune 4"
	]
	health(integer) : "Health"
	target(target_destination) : "RUNE MIXTURE - Targets to fire"
	noise1(target_destination) : "RUNE 1 - Targets to fire"
	noise2(target_destination) : "RUNE 2 - Targets to fire"
	noise3(target_destination) : "RUNE 3 - Targets to fire"
	noise4(target_destination) : "RUNE 4 - Targets to fire"
]
@SolidClass base(TrigOFF,Targetname,Target) = trigger_void : "Trigger Void" [
	spawnflags(flags) = [
		1 : "Ignore Clients"
		2 : "Ignore Monsters"
		4 : "Ignore Ammo"
		8 : "Ignore Minion eggs"
		16: "Ignore Temporary ents"
		32: "Ignore Items"
	]
]

@SolidClass base(TrigOFF,Targetname,Target) = trigger_remove : "Trigger Void" [
	spawnflags(flags) = [
		1 : "Ignore Clients"
		2 : "Ignore Monsters"
		4 : "Ignore Ammo"
		8 : "Ignore Minion eggs"
		16: "Ignore Temporary ents"
		32: "Ignore Items"
	]
]

@SolidClass base(TrigOFF,Targetname,Target) = trigger_setgravity : "Trigger Set Gravity (Same as trigger_gravity, legacy compat)" [
	gravity(integer) : "Gravity percent (value 0 to 1)"
]

@SolidClass base(TrigOFF,Targetname,Target) = trigger_command : "Trigger Send Console Command" [
	message(string) : "Console command"
]

@SolidClass base(TrigOFF,Targetname,Target) = trigger_setcvar : "Trigger Set Console Variable" [
	netname(string) : "Cvar to set"
	message(string) : "Value"
]

@SolidClass base(TrigOFF,Targetname,Target) = trigger_waterfall : "Trigger Waterfall Push" [
	count(integer) : "Side Push Force (def=100)"
	speed(integer) : "Flow Velocity (* movedir, def=50)"
	movedir(string) : "Flow Direction"
]

@SolidClass base(TrigOFF,Targetname,Target) = trigger_damagethreshold : "Triggers When Hurt" [
	health(integer) : "Threshold To Activate (def=60)"
	spawnflags(flags) = [
		1 : "Multiple Use"
		2 : "Invisible"
	]
]

@SolidClass base(TrigOFF,Targetname) = trigger_earthquake : "Earthquake generator" [
	weapon(integer) : "x/y movement" : 40
]

@SolidClass base(TrigOFF) = trigger_earthquake_kill : "Kill level-wide earthquakes" []

//----------------------------------------------------------------------
@SolidClass base(TrigOFF,Targetname,Target) = trigger_monsterjump : "Trigger Monster Jump" [
	spawnflags(flags) = [
		2 : "Flying Monsters"
		4 : "Swiming Monsters"
	]
	wait(choices) : "Wait before reset" = [
		-1 : "Trigger Once"
		 0 : "Always reset"
	]
	speed(integer) : "Jump Speed (def=200)"
	height(integer) : "Jump Height (def=200)"
	noise1(string) : "Monster classname ONLY can use trigger"
]
@SolidClass base(TrigOFF,Targetname,Target) = trigger_drolejump : "Trigger Drole Jump" [
	wait(choices) : "Wait before reset" = [
		-1 : "Trigger Once"
		 0 : "Always reset"
	]
	speed(integer) : "Jump Speed (def=200)"
	height(integer) : "Jump Height (def=200)"
]
// Renamed to below
//@SolidClass base(TrigOFF,Targetname,Target) = trigger_nomonjump : "Stop Monster Jumping" [
//	wait(choices) : "Wait before reset" = [
//		-1 : "Trigger Once"
//		 0 : "Always reset"
//	]
//	delay(integer) : "Delay Jumping (def=0.5)"
//	waitmin(integer) : "Re-trigger timer (def=0.1s)"
//	noise1(string) : "Monster classname ONLY can use trigger"
//]

//_____TRIGGER MONSTER NO JUMP_____
@SolidClass base(Appearflags, TrigOFF, Targetname) = trigger_monsternojump : "Stop monsters from using jump attacks." [
    wait(choices) : "Wait before reset" = [
		-1 : "Trigger Once"
		 0 : "Always reset"
	]
	delay(integer)   : "Delay - jump attack by (def=0.5s)"
	waitmin(integer) : "Re-trigger timer (def=0.1s)"
	noise1(string) : "Monster classname ONLY can use trigger"
] 
//_____TRIGGER MONSTER DROP_____
@PointClass base(Appearflags, TrigOFF, Targetname) size (-8 -8 -8, 8 8 8) color(0 128 128) = trigger_monsterdrop : "Drop monster(s) to the floor" [
    wait(choices) : "Wait before reset" = [
		-1 : "Trigger Once"
		 0 : "Always reset"
	]
	height(integer) : "Speed - thrown upwards (def 50)"	
]

@SolidClass base(Target,Targetname) = trigger_control : "Ballista Control Volume" []

@PointClass base(Targetname) size (-8 -8 -8, 8 8 8) color(220 0 255) = trigger_victory : "Runs targets after all monsters have been killed" [
	filterstyle(choices) : "Filter Style (def=0)" = [
		0 : "All Monsters"
		1 : "Threshold Monsters"
		2 : "Any Some Monsters"
		3 : "None Monsters"
		4 : "None Denizens"
		5 : "Threshold Denizens"
		6 : "Any Some Denizens"
		7 : "All Denizens"
	]
	spawnflags(flags) = [
		1 : "Not Automatic On Any Kill"
	]
	message(string) : "Message to center print on success"
	delay(integer) : "Delay before trigger"
	count(integer) : "Threshold creature kills, <1 is %,>=1 is number of kills(def = 1)"
]
@PointClass base(Targetname) size (-8 -8 -8, 8 8 8) color(220 0 255) = trigger_enemy : "Makes multiple target enemies fight a single enemy" [
	spawnflags(flags) = [
		1 : "Ignore Alignment"
		2 : "Hate Neutral Sighttarget"
		4 : "Forget Current Enemy"
	]
	sighttarget(string) : "Monster to hate"
]

@SolidClass base(TrigOFF,Targetname,Target) = trigger_monsterturret : "Trigger Monster Turret" [
	wait(choices) : "Wait before reset" = [
		-1 : "Trigger Once"
		 0 : "Always reset"
	]
	count(choices) : "Random chance to pause" = [
		-1 : "Constant"
		0.25 : "Default"
	]
	noise1(string) : "Monster classname ONLY can use trigger"
]

//----------------------------------------------------------------------
@PointClass base(Appearflags,Targetname,Target,Target2) size(-8 -8 -16, 8 8 16) color(192 128 255)
	= trigger_entitystate_on : "Entity state ON" [
	target(target_destination) : "Targets to affect"
	target2(target_destination) : "More Targets to affect"
    sounds(choices) : "Sound style" : 0 = [
		0 : "Default"
		1 : "Secret"
		2 : "Beep beep"
		3 : "Large switch"
		4 : "Silent"
		5 : "Custom"
		6 : "Secret 3 (MWubwubwub)"
		7 : "Secret 2 (Bell)"
	]
]
@PointClass base(Appearflags,Targetname) size(-8 -8 -16, 8 8 16) color(192 128 255)
	= trigger_entitystate_off : "Entity state OFF" [
	target(target_destination) : "Targets to affect"
	target2(target_destination) : "More Targets to affect"
    sounds(choices) : "Sound style" : 0 = [
		0 : "Default"
		1 : "Secret"
		2 : "Beep beep"
		3 : "Large switch"
		4 : "Silent"
		5 : "Custom"
		6 : "Secret 3 (MWubwubwub)"
		7 : "Secret 2 (Bell)"
	]
]
@PointClass base(Appearflags,Targetname) size(-8 -8 -16, 8 8 16) color(192 128 255)
	= trigger_entitystate_disable : "Entity state DISABLE" [
	target(target_destination) : "Targets to affect"
	target2(target_destination) : "More Targets to affect"
    sounds(choices) : "Sound style" : 0 = [
		0 : "Default"
		1 : "Secret"
		2 : "Beep beep"
		3 : "Large switch"
		4 : "Silent"
		5 : "Custom"
		6 : "Secret 3 (MWubwubwub)"
		7 : "Secret 2 (Bell)"
	]
]
@PointClass base(Appearflags,Targetname) size(-8 -8 -16, 8 8 16) color(192 128 255)
	= trigger_entitystate_reset : "Entity state RESET" [
	target(target_destination) : "Targets to affect"
	target2(target_destination) : "More Targets to affect"
    sounds(choices) : "Sound style" : 0 = [
		0 : "Default"
		1 : "Secret"
		2 : "Beep beep"
		3 : "Large switch"
		4 : "Silent"
		5 : "Custom"
		6 : "Secret 3 (MWubwubwub)"
		7 : "Secret 2 (Bell)"
	]
]

//_____ENTITY STATE AFRAME_____
@PointClass base(Appearflags, Targetname) size(-8 -8 -16, 8 8 16) color(192 128 200)
	= trigger_entitystate_aframe : "Entity state AFRAME - Switch the target(s) AFRAME(animation frame) state. Targets are currently limited to 'func_wall/illusionary' entities, which have special textures applied. Think of it like this - textures with a common name but prefixed in a sequentially 'numbered' fashion, such as this typical ID base button('+0basebtn','+1basebtn'(blinking red), will be animated. THIS is the 'primary' frame(s) state. When the 'button' is used, it switches to the sequential 'alphabetically' prefixed texture(s), if available. The 'alternate' frame(s) state('+abasebtn'(yellow image). Either 'state' can be a single image, but there MUST BE one of each for a switch to occur. NOTE - The targetted entities also have an 'AFrame' spawnflag that can be set, which starts them in the map WITH the 'alternate' frame(s) displayed. Something to keep in mind." [
	target(target_destination) : "Target (a func_wall/illusionary)"
	target2(target_destination) : "Taget2 (more targets)"
	state(choices) : "Aframe state" :  : "0=Primary frame(s)(+0,+1,+2 etc) and 1=Alternate frame(s)(+a,+b,+c etc)" = [
		0 : "Primary Frame(s)"
		1 : "Alternate Frame(s)"
	]
    sounds(choices) : "Sound style" : 0 = [
		0 : "Default"
		1 : "Secret"
		2 : "Beep beep"
		3 : "Large switch"
		4 : "Silent"
		5 : "Custom"
		6 : "Secret 3 (MWubwubwub)"
		7 : "Secret 2 (Bell)"
	]
]

//----------------------- Map VARIABLE OPTIONS ------------------------

//NOTE - MapVar is Fully functional, just needs better descriptive text for keys and information.

@baseclass = MapVarCommon [
    count(integer)   : "Variable Name (Numeric (0->132)" :  : "Define a map Variable to check (range checks)"
    target(target_destination) : "Target (for val==1)"   :  : "if map Variable is equal to 1, then fire these target(s)"
    target2(target_destination) : "Target2 (for val==0)"  :  : "if map Variable is equal to 0, then fire these target(s)"
    noise(target_destination) : "Bmodel (AFrame) Object"  :  : "Target an Aframe object to change it's texture state. See 'trigger_entitystate_aframe' for more information."
    wait(integer) : "Wait (Time before re-triggering)" :  : "Wait before re-triggering, -1 = trigger once"
]
//_____MAP VARIABLE QUERY_____
@PointClass base(Targetname , MapVarCommon) size(-8 -8 -16, 8 8 16) color(92 92 92) = trigger_mapvar_query : "Trigger target(s) based on a value returned by mapvar query." []

//_____MAP VARIABLE UPDATE_____
@PointClass base(Targetname, MapVarCommon) size(-8 -8 -16, 8 8 16) color(172 172 172)  = trigger_mapvar_update : "Update the value of a Map Variable" [ 
    cnt(integer) : "Variable Value (0 or 1)" :  : "Assigns a Value(0/1), to the Variable defined in Variable Name('count') " 
]
//_____MAP VARIABLE TOGGLE_____
@PointClass base(Targetname, MapVarCommon) size(-8 -8 -16, 8 8 16) color(252 252 252) = trigger_mapvar_toggle : "Toggle the value of a Map Variable." []

//_____MAP VARIABLE MULTIPLE_____
@SolidClass base(Appearflags, Targetname) = trigger_mapvar_multiple : "Map Variable Multiple" [
    spawnflags(flags) = [ 
		32 : "Monsters" : 0
		64 : "Start OFF" : 0
	]
	//MapVarCommon was not used here to keep the formatting visually logical in editor
    count(integer)   : "Variable Name (Numeric (0->132)" :   : "Define a map Variable to check (range checks)"
    target(integer)  : "Target (for val==1)"   :  : "if map Variable == 1, then fire these target(s)"
    message(string)  : "Message"  :   : "if map Variable is equal to 1, then display this message"
    target2(integer) : "Target2 (for val==0)"  :  : "if map Variable == 0, then fire these target(s)"
    message2(string) : "Message2" :   : "if map Variable is equal to 0, display this message"
    health(integer)  : "Health (Takes Damage)"
    wait(integer)    : "Wait (Time before re-triggering)" :  : "Wait before re-triggering, -1 = trigger once"
    delay(integer)   : "Delay (before firing)"
    angle(integer)   : "Direction(facing) to Activate" :  : "Facing Direction for trigger to work, use '360' for angle 0."
    sounds(choices) : "Sound style" : 0 = [
		0 : "Default"
		1 : "Secret"
		2 : "Beep beep"
		3 : "Large switch"
		4 : "Silent"
		5 : "Custom"
		6 : "Secret 3 (MWubwubwub)"
		7 : "Secret 2 (Bell)"
	]
	noise(string) : "Custom Sound (triggered)"
]

//======================================================================
//
// MISC entities
//
//======================================================================
@PointClass base(Appearflags,Targetname) size(-8 -8 -8, 8 8 8)
	color(0 128 192) flags(Angle) = misc_particle : "Particle Emitter" [
	spawnflags(Flags) = [ 64 : "Start off" : 0 ]
	target(string) : "Target destination of effect"
	target2(string) : "Name of particle template"
	message(choices) : "Particle Style" = [
		"ALTAR" : "ALTAR - Blood red"
		"ARMOR1" : "ARMOR1 - Green"
		"ARMOR2" : "ARMOR2 - Yellow"
		"ARMOR3" : "ARMOR3 - Red"
		"BOOK" : "BOOK Runes"
		"ELECTRIC" : "ELECTRIC stream"
		"FCIRCLE" : "FCIRCLE - Floor circle"
		"FLAMES" : "FLAMES - Small"
		"FLAMEL" : "FLAMEL - Large"
		"JUMPAD" : "JUMPPAD - Upward"
		"KEYGOLD" : "KEYGOLD - Yellow"
		"KEYSILVER" : "KEYSILVER - Blue"
		"MEGAH" : "MEGAH - MegaHealth"
		"PENT" : "PENT - of protection"
		"PORTAL" : "PORTAL - White"
		"QUAD" : "QUAD - Damage"
		"SIGIL" : "SIGIL - Purple"
		"SKILL" : "SKILL - Pillar"
		"SRING" : "SRING - Ring of Shadows"
		"SUIT" : "SUIT - Env suit"
	]
]

@PointClass base(Targetname) = info_particles : "Particle effect" [
	spawnflags(flags) =
		[
			64 : "Start on" : 0
		]
	method(choices) : "Method" : 0 =
		[
			-1: "Normal"
			0 : "Normal"
			1 : "One sided radial"
			2 : "Two sided radial"
		]
	movedir(string) : "Direction vector (X Y Z)" 
	duration(string) : "Particle lifetime"
	wait(string) : "Wait before beginning"
	cnt(integer) : "Color index (0 - 255)"
	endtime(choices) : "Length of effect" : 0 =
		[
			-1 : "Don't stop"
		]
	delay(string) : "Time between each particle"
	impulse(integer) : "Radius" 
	speed(integer) : "Rotation speed (-360 > 360)"
]

@PointClass base(Appearflags,Targetname) size(-8 -8 -8, 8 8 8)
	color(0 128 192) flags(Angle) = misc_particletemplate : "Particle Template" [
	spr_name1(string) : "Sprite filename 1"
	spr_name2(string) : "Sprite filename 2"
	spr_name3(string) : "Sprite filename 3"
	part_movetype(integer) : "Movement (def=8)"
	part_limit(integer) : "Max active particles (def=25)"
	part_life(integer) : "Life time (def=1s)"
	part_ofs(string) : "Emitter offset (XYZ)"
	part_veltype(choices) : "Velocity Type" = [
		0 : "Volume"
		1 : "Circumference"
		2 : "Random Circumference"
		3 : "Spiral"
		5 : "Explosion"
	]
	part_velbase(string) : "Velocity Direction (Additive)"
	part_vel(string) : "Velocity Linear/random"
	part_velrand(string) : "Velocity random wobble"
	part_velrot(integer) : "Velocity rotation (Y Axis only)"
	part_vol(string) : "Volume to spawn within"
	wakeup_dist(integer) : "Wake up distance (def=1024)"
	wakeup_timer(integer) : "Wake up timer (def=1s)"
	spawn_base(integer) : "Spawn rate time (0.1s)"
	spawn_rand(integer) : "Spawn rate randomness"
	dpp_name(string) : "DP Particle effect name"
	dpp_wait(integer) : "DP spawn rate timer (def=0.1s)"
	dpp_rnd(integer) : "DP spawn rate randomness"
	dpp_vel(string) : "DP directional velocity"
]
@PointClass base(Appearflags,Targetname) size(-8 -8 -8, 8 8 8)
	color(0 128 192) = misc_particle_burst : "Particle Burst Emitter" [
	part_ofs(string) : "Particle Origin Offset"
	part_tcount(integer) : "Particle Quantity (def=20)"
	part_life(integer) : "Particle Life time (def=2s)"
	part_style(choices) : "Particle Colour" = [
		0 : "Default - White"
		1 : "Yellow"
		2 : "Green"
		3 : "Red"
		4 : "Blue"
		5 : "Purple"
		6 : "Fire"
		7 : "White"
	]
	part_movetype(choices) : "Particle Movement" = [
		0 : "Default - Center"
		2 : "Center"
		3 : "Up"
		4 : "Shockwave"
		5 : "Skull"
		6 : "Lost"
		7 : "Minotaur"
	]	
]
@PointClass base(Appearflags,Targetname) size(-8 -8 -8, 8 8 8)
	color(0 128 192) flags(Angle) = misc_builtineffects : "Particle Builtin" [
	target(string) : "Target destination of effect"
	wait(integer) : "Start Delay (def=0)"
	delay(integer) : "Start Delay (random)"
	count(choices) : "Type of effect" = [
		0 : "TE_SPIKE (default)"
		1 : "TE_SUPERSPIKE"
		2 : "TE_GUNSHOT"
		3 : "TE_EXPLOSION"
		4 : "TE_TAREXPLOSION"
		5 : "TE_LIGHTNING1"
		6 : "TE_LIGHTNING2"
		7 : "TE_WIZSPIKE"
		8 : "TE_KNIGHTSPIKE"
		9 : "TE_LIGHTNING3"
		10: "TE_LAVASPLASH"
		11: "TE_TELEPORT"
	]
]

@PointClass base(Appearflags,Targetname) size(-64 -64 -80, 64 64 88) color(0 128 192) flags(Angle) studio("progs/drake/bellring.mdl") = misc_bell : "Bell, Shootable" []
@PointClass base(Appearflags,Targetname) size(-32 -32 -24, 32 32 80) color(0 128 192) flags(Angle) studio("progs/drake/anglstat.mdl") = misc_statue : "Angel Statue, Breakable" []
@PointClass base(Appearflags,Targetname) size(-16 -16 0, 16 16 128) color(0 128 192) flags(Angle) studio("progs/drake/tree.mdl") = misc_tree : "Tree Model" []

@BaseClass = BreakablePots [
    spawnflags(flags) = [
		1 : "Start OFF (hidden)" : 0 : "Start hidden"
		2 : "No Damage" : 0 : "Cannot be damaged"
		4 : "Explosion" : 0 : "Produces explosion"
		8 : "Silent" : 0 : "No Breaking Sounds"
		16 : "Rubble Damage" : 0 : "Rubble does damage"
		32: "No Monsters" : 0 : "Immune to monster damage"
		64: "No Sounds" : 0 : "No Impact Sounds"
		128: "No Rubble Rotate" : 0 : "No Y rotation for rubble"
	]
	exactskin(integer) : "Skin override (copied to debris)(def=0)"
	health(integer) : "Health (def=1)"
	count(integer) : "Minimum rubble count (def=4)"
	cnt(choices) : "Rubble amount" = [
		0 : "Randomized (=count + [1,count])"
		-1 : "Exact (=count)"
	]
	dmg(integer) : "Explosive Radius Damage"
	brkvelbase(string) : "Velocity Base (def=50 50 100)"
	brkveladd(string) : "Velocity Extra (def=100 100 150)"
	brkavel(integer) : "Velocity Rotation (def=200)"
	brkfade(integer) : "Rubble fade timer (def=4)"
	brkmdltype(integer) : "Model type (def=11 upright 3 handles)"
	pos1(string) : "Dust particle color"
	angles(string) : "Direction to throw rubble"
	mangle(string) : "Override pot Pitch Roll Yaw" : : "up/down, angle, tilt left/right "
	brkgravity(integer) : "Rubble gravity (def=1)"
]

@PointClass size(-16 -16 0, 16 16 48) base(Appearflags,Targetname,Target,Target2,BreakablePots) studio("progs/ad181/brk_pot1a.mdl") = misc_breakable_pot1a []
@PointClass size(-16 -16 0, 16 16 48) base(Appearflags,Targetname,Target,Target2,BreakablePots) studio("progs/ad181/brk_pot1b.mdl") = misc_breakable_pot1b []
@PointClass size(-16 -16 0, 16 16 48) base(Appearflags,Targetname,Target,Target2,BreakablePots) studio("progs/ad181/brk_pot1c.mdl") = misc_breakable_pot1c []
@PointClass size(-16 -16 0, 16 16 48) base(Appearflags,Targetname,Target,Target2,BreakablePots) studio("progs/ad181/brk_pot1d.mdl") = misc_breakable_pot1d []
@PointClass size(-16 -16 0, 16 16 48) base(Appearflags,Targetname,Target,Target2,BreakablePots) studio("progs/ad181/brk_pot1aflr.mdl") = misc_breakable_pot1aflr []
@PointClass size(-16 -16 0, 16 16 48) base(Appearflags,Targetname,Target,Target2,BreakablePots) studio("progs/ad181/brk_pot2a.mdl") = misc_breakable_pot2a []
@PointClass size(-16 -16 0, 16 16 48) base(Appearflags,Targetname,Target,Target2,BreakablePots) studio("progs/ad181/brk_pot2b.mdl") = misc_breakable_pot2b []
@PointClass size(-16 -16 0, 16 16 48) base(Appearflags,Targetname,Target,Target2,BreakablePots) studio("progs/ad181/brk_pot2c.mdl") = misc_breakable_pot2c []
@PointClass size(-16 -16 0, 16 16 48) base(Appearflags,Targetname,Target,Target2,BreakablePots) studio("progs/ad181/brk_pot2d.mdl") = misc_breakable_pot2d []
@PointClass size(-16 -16 0, 16 16 48) base(Appearflags,Targetname,Target,Target2,BreakablePots) studio("progs/ad181/brk_pot2aflr.mdl") = misc_breakable_pot2aflr []
@PointClass size(-16 -16 0, 16 16 48) base(Appearflags,Targetname,Target,Target2,BreakablePots) studio("progs/ne_ruins/pot1.mdl") = misc_breakable_pot1 []
@PointClass size(-16 -16 0, 16 16 48) base(Appearflags,Targetname,Target,Target2,BreakablePots) studio("progs/ad181/brk_vase1.mdl") = misc_breakable_vase1 []

@PointClass size(-8 -8 -8, 8 8 8) base(Targetname) = func_exploder : "Explosion"
[
	spawnflags(flags) =
	[
		1 : "Use Particles" : 0
	]
	dmg(integer) : "Damage for each Explosion"
	netname(string) : "Classname to protect from explosion, or targetname if classname not found (Zerstorer hack)"
	speed(choices) : "Explosion Attonation" : 1 = 
	[
		0: "None"
		1: "Normal"
		2: "Idle"
		3: "Static"
	]
	volume(string) : "Explosion Volume" : "1.0"
]
@PointClass size(-8 -8 -8, 8 8 8) base(Targetname) = func_explode : "Explosion"
[
	spawnflags(flags) =
	[
		1 : "Use Particles" : 0
	]
	dmg(integer) : "Damage for each Explosion"
	netname(string) : "Classname to protect from explosion, or targetname if classname not found (Zerstorer hack)"
	speed(choices) : "Explosion Attonation" : 1 = 
	[
		0: "None"
		1: "Normal"
		2: "Idle"
		3: "Static"
	]
	volume(string) : "Explosion Volume" : "1.0"
]

@PointClass size(-8 -8 -8, 8 8 8) base(Targetname) = misc_boom : "Boss Explosion Effect" []

@PointClass base(Appearflags,Targetname) size(-16 -16 -16,16 16 16) color(255 128 128) flags(Angle) = misc_camera : "Ingame cinematic camera(No COOP/DM), will fade/move based on times in seconds. The first fade (out) is from  previous camera to background colour. The second fade (in) is to current camera view. The linear movementwill  start at the same time as the fade in process. Start -> Fade Out(waitmin1) -> Fade In(waitmin2)  / Movement (waitmin3) Once 'Fade in' has finshed then the pause timer (wait) starts.Waitmin3 = Waitmin2 + Wait (Sync everything to finish together) To sync the final camera to a player start, finish 22 map units above angles = up/down, angle, tilt left/right 'pitch roll yaw'up/left = negative value, down/right = positive valuedeathtarget, modeltarget & returntarget have to be defined on first cameraBe aware that coop is not supported, so be careful of trigger eventsand decide on a coop not working message2." [
	spawnflags(Flags) = [ 
		1 : "Player" : 0 : "Show the player model when starting cinematics"
		2 : "Skipable" : 0 : "Allow the cinematic to be skipped (exit after fade)"
		4 : "Fadeout" : 0 : "Fade OUT previous camera (time = waitmin)"
		8 : "Fadein" : 0 : "Fade IN this camera (time = waitmin2)"
	   16 : "Fixed Angle" : 0 : "All cameras in a chain will use the first camera angle"
	   32 : "End Camera" : 0 : "Only the fade in/out work, the origin/angle are ignored"
	]
	targetname(target_source) : "Name" : : "Camera name for linking into target chains."
	message(string) : "Message" : : "Text to centerprint when camera is viewed."
    message2(string) : "Message (coop warning)" : : "Text to centerprint if coop is active."
	target(target_destination) : "Target (next cam)" : : "Points to the next camera in a chain/sequence"
	target2(target_destination) : "Target2 (Starting of cinematic)" : : "Additional target(s) to trigger when camera is viewed"
	deathtarget(target_destination) : "Targets (Finishing of cinematic)" : : "Additional target(s) to trigger when the cinematic finishes."
    sounds(choices) : "Sound style" : 0 = [
		0 : "Default"
		1 : "Secret"
		2 : "Beep beep"
		3 : "Large switch"
		4 : "Silent"
		5 : "Custom"
		6 : "Secret 3 (MWubwubwub)"
		7 : "Secret 2 (Bell)"
	]
	noise(sound): "Custom sound" : : "Sound to play when message is centerprinted."
	angles(integer) : "Direction the camera will face (Pitch Yaw Roll setup)"
	angletarget(target_destination) : "Direction the camera will face (using info_target)"
	focalpoint(choices) : "Camera Focal Point" : : "Always focus the camera on angletarget (=1 enabled)" = [
		 0 : "Default"
		1 : "angletarget "
	]
	angleblend(integer) : "Blend between current/last camera angles (def=0.03 range=0-1)"
	modeltarget(integer) : "Location of fake player mdl (use info_camera_destination)"
	returntarget(integer) : "Location of returning player (use info_camera_destination)"
	pos1(color255) : "Starting Background colour"
	pos2(color255) : "Finishing Background colour"
	waitmin(integer) : "Fade OUT prev cam (def=1s)" : : "Fade OUT time (def=1s, minimum=0.1s)"
	waitmin2(integer) : "Fade IN this cam (def=1s)" : : "Fade IN time (def=1s, minimum=0.1s)"
	sighttarget(target_destination) : "Position the camera will travel towards (use info_target)"
	waitmin3(integer) : "Speed at which camera moves towards sighttarget"
	wait(integer) : "Time to wait while showing camera (-1 = wait for key)"
	controltarget(integer) : "Bezier Curve control point (has angletarget defaults)"

	nodebuginfo(choices) :"Debug Info" : :  "All debug info displayed via developer=1 is blocked" = [
		 0 : "Default"
		 1 : "Block"
	]
]	

//_____WEATHER_____
@SolidClass base(TrigOFF,Targetname) = misc_weather : "A BModel(brushwork) based particle emitter which produces weather effects" [
    spawnflags(Flags) = [ 
		8 : "Snow" : 0
	]
    count(integer) : "Quanity of Particles"
    pos1(string) : "Color Range (Min/Max/0)"
    pos2(string) : "Wind Direction (X/Y/Z(speed))"
    speed(integer) : "Random  Direction (-1=disable)"
]

//----------------------------------------------------------------------
@BaseClass base(Appearflags, Targetname) size(-8 -8 -8, 8 8 8)
	color(0 128 192) = Misc [
	spawnflags(Flags) = [ 64 : "Start Off" : 0 ]
]
@PointClass base(Misc) = misc_fireball : "Small fireball" [
	spawnflags(Flags) = [ 
		32 : "Slime" : 0
	]
	speed(integer) : "Speed (def=1000)"
	dmg(integer) : "Impact Damage (def=5)"
	delay(integer) : "Spawn time (def=3)"
	wait(integer) : "Spawn time randomness (def=5)"
]
@PointClass base(Misc) = misc_slimeball : "Small slimeball" [
	speed(integer) : "Speed (def=1000)"
	dmg(integer) : "Impact Damage (def=10)"
	delay(integer) : "Spawn time (def=3)"
	wait(integer) : "Spawn time randomness (def=5)"
]
@PointClass base(Targetname) = misc_gibft : "Gib fountain" [
	spawnflags(Flags) = [
		4 : "Lefty" : 0
		64 : "Start Off" : 0
	]
	speed(integer) : "Speed (def=1000)"
	dmg(integer) : "Impact Damage (def=5)"
	delay(integer) : "Spawn time (def=0.5)"
	wait(integer) : "Spawn time randomness (def=2)"
]
@PointClass base(Targetname, Target) = misc_gibfountain : "Gib fountain" [
	gibtype(choices) : "Theme of Gibs" = [
		0 : "Blood (Default)"
		1 : "Stone"
		10 : "Poison"
	]
	style(choices) : "Type of Gibs" = [
		0 : "Random (Default)"
		1 : "Arm/Leg"
		2 : "Slice"
	]
]
@PointClass base(Misc) = air_bubbles : "Floating Bubble" []
@PointClass base(Misc) = env_lightning : "Lightning Strike" [
	spawnflags(Flags) = [ 
		2 : "Silent" : 0
	]
	wait(integer) : "Minimum Wait Time"
	waitmax(integer) : "Random * This Added to Wait"
]
@PointClass base(Targetname, Misc) = misc_raincloud : "Stormcloud that moves and rains" [
	spawnflags(Flags) = [ 
		2 : "Silent" : 0
		4 : "Static" : 0
		8 : "Large drips" : 0
		16 : "Blood" : 0
		32 : "Slime" : 0
	]
	dmg(integer) : "Damage (does slime rain hurt?)"
	count(integer) : "Drip active total (def=10)"
	cnt(integer) : "Lifetime (-1 for indefinite)"
	impulse(integer) : "Delay between frames"
	search_time(integer) : "Time to drift in a direction before changing"
	delay(integer) : "Time before spawning after map start or use"
	alpha(integer) : "Transparency"
	yaw_speed(integer) : "Delay between emissions(def=0.5)"
	noise1(string) : "Drip noise (def=misc/drip1.wav)"
	noise2(string) : "Drip noise (def=misc/drip2.wav)"
	noise3(string) : "Drip noise (def=misc/drip3.wav)"
]
@PointClass base(Misc) = misc_drip : "Falling water" [
	spawnflags(Flags) = [ 
		2 : "Silent" : 0
		16 : "Blood" : 0
		32 : "Slime" : 0
	]
	wait(integer) : "Random time between drips"
]
@PointClass base(Targetname, Target) = misc_glitter : "Hexen2 Glitter Effect" [
	speed(integer) : "Speed (def=100)"
	height(integer) : "Height (def=50)"
	count(choices) : "Palette color (0-255)(def=244)" = [
		0 : "Light Gray"
		1 : "Brown"
		2 : "Blue"
		3 : "Green"
		4 : "Blood Red"
		5 : "Greenish Brown"
		6 : "Reddish Brown"
		7 : "Tan"
		8 : "Pale Purple"
		9 : "Purple"
		10 : "Pale Tan"
		11 : "Forest Green"
		12 : "Yellow"
		13 : "Vivid Blue"
		14 : "Bright Red"
		15 : "Lava and Smoke"
	]
	wait(integer) : "Spawn time randomness (def=2)"
]
//----------------------------------------------------------------------
@PointClass base(Appearflags, Targetname) size(-8 -8 -8, 8 8 192)
	color(128 128 192) = misc_smoke : "Smoke Model/Particle" [
	spawnflags(Flags) = [
		 2 : "No DP Model" : 0
		 4 : "No DP Effects" : 0
		64 : "Start Off" : 0
	]
	target(string) : "Custom direction for smoke"
	angles(string) : "Pitch Yaw Roll"
	exactskin(choices) : "Type of Smoke" = [
		0 : "Gunsmoke (Default)"
		1 : "Soot (darker)"
		2 : "Steam"
		3 : "Toxin"
		4 : "Plague"
		5 : "Incense"
		6 : "Lithium"
		7 : "Flames"
	]
	alpha(integer) : "Alpha of model (def=0.65)"
	wait(integer) : "DP Time between Spawning"
	delay(integer) : "DP Time randomness"
	height(integer) : "DP % of velocity direction"
]

@PointClass base(Appearflags, Targetname) size(-8 -8 -8, 8 8 192)
	color(128 128 192) = misc_smokemaker : "Smoke Particle Fountain" [
	angles(string) : "Pitch Yaw Roll"
	wait(integer) : "Life of Projectiles"
	cnt(integer) : "Time Between Bursts(def=0.2, -1=rand 0to1)"
]

//----------------------------------------------------------------------
@PointClass base(Appearflags, Targetname) size(-8 -8 -8, 8 8 8)
	color(128 192 128) flags(Angle) = misc_spark : "Sparks" [
	spawnflags(Flags) = [
		 2 : "Blue" : 0
		 4 : "Pale White" : 0
		 8 : "Red" : 0
		64 : "Start Off" : 0
	]
	target(string) : "target a light to sync"
	wait(integer) : "Time delay between sparks"
	cnt(integer) : "Quantity of sparks"
	fixangle(integer) : "Random Y direction of sparks"
	speed(integer) : "Velocity speed (def=40)"
	height(integer) : "Velocity random (def=+/- 20)"
	sounds(choices) : "Sounds" = [
		1 : "Sparks"
		4 : "Silent"
		5 : "Custom"
	]
	noise(string) : "Custom sound for spark"
]

@PointClass base(Appearflags, Targetname) size(-8 -8 -8, 8 8 8)
	color(128 192 128) flags(Angle) = misc_sparks : " Rubicon Sparks" [
	spawnflags(Flags) = [
		 2 : "Blue" : 0
		 4 : "Pale White" : 0
		64 : "Start Off" : 0
	]
	target(string) : "target a light to sync"
	wait(integer) : "Time delay between sparks"
	cnt(integer) : "Quantity of sparks"
	movedir(string) : "Move direction of sparks (x y z)"
	sounds(choices) : "Sounds" : 0 = [
		0 : "Silent"
		1 : "Sparks"
	]
]

@PointClass base(Appearflags, Targetname) size(-8 -8 -8, 8 8 8) color(128 192 128) flags(Angle) = misc_splash : "Splash effect" [
	movedir(string) : "Move direction and velocity(def=0 0 4)"
	wait(integer) : "Time Between Bursts (def=0.1)"
	volume(integer) : "Particles per burst (def=10)"
	col(choices) : "Color (row 0 to 15, def=0)" = [
		0 : "Light Gray"
		1 : "Brown"
		2 : "Blue"
		3 : "Green"
		4 : "Blood Red"
		5 : "Greenish Brown"
		6 : "Reddish Brown"
		7 : "Tan"
		8 : "Pale Purple"
		9 : "Purple"
		10 : "Pale Tan"
		11 : "Forest Green"
		12 : "Yellow"
		13 : "Vivid Blue"
		14 : "Bright Red"
		15 : "Lava and Smoke"
	]
]

//----------------------------------------------------------------------
@PointClass base(Appearflags, Targetname) size(-8 -8 -8, 8 8 8)
	color(128 128 224) flags(Angle) = misc_shake : "Shaking" [
	spawnflags(Flags) = [ 2 : "Screen ONLY" : 0 ]
	count(integer) : "Radius of shake (def=200)"
	wait(integer) : "Duration of shake (def=2s)"
	dmg(integer) : "Strength at center (def=200)"
	sounds(integer) : "Sounds 1=Rumble"
	noise1(string) : "Custom Sound - Start"
	noise2(string) : "Custom Sound - Finish"
]

//_____Misc MODEL_____
@PointClass base(Appearflags, Targetname) studio() size(-16 -16 -16, 16 16 16) color(255 128 64) = misc_model : "Misc Models - Load custom models(.MDL files), as props, that are not predefined in the base game/mod. They can be setup with specific frame/skin and animation groups. Note - Having knowledge of at least opening/viewing '.mdl' files(ex QME) is recommended if customizing the settings." [
	spawnflags(Flags) = [
		 2 : "Collison" : 0 : "Model bbox collision enabled"
		 4 : "Moveable" : 0 : "Model can be moved around like an item"
	   32 : "Static" : 0 : "Makes entity static upon spawn (frame 0)"
	   64 : "Start OFF" : 0 : "Starts off, waits for trigger"
	]
	target(string) : "Path_corner entities to start moving towards on spawn"
	faceangle(integer) : "Set to 1 to rotate the model towards it's destination path_corner"
	yaw_speed(integer) : "Turning speed of model twowards path_corner if using faceangle=1 (def=15)"
	movespeed(integer) : "Movement (map units) per second towards path_corners if using faceangle=1 (def=50)"
	speed(integer) : "Override for frame/skin animation speed (def=0.1s)"
	mdl(studio) : "Model Selection (ex progs/model.mdl)"
	model(studio) : "Model Preview (Editor)" :  : "Set to the same value as 'Model Selection', to see the custom model in the editor." 
	angle(integer) : "facing angle of model (-1 = random position)"
	ideal_yaw(choices) : "Random Rotation (Y axis)" = [
		0 : "OFF(def)"
		1 : "Enabled"
	]
    sounds(choices) : "Sound style" : 0 = [
		0 : "Default"
		1 : "Secret"
		2 : "Beep beep"
		3 : "Large switch"
		4 : "Silent"
		5 : "Custom"
		6 : "Secret 3 (MWubwubwub)"
		7 : "Secret 2 (Bell)"
	]
	angles(string) : "'pitch yaw roll' up/down, angle, tilt left/right" : : "up/down, angle, tilt left/right"
	frame(integer) : "exact frame number (Quoth entity compatibility)"
	framestart(integer) : "FRAME Starting point, 0=def, X=-1 Random, X=0+ Exact"
	frameloop(integer) : "FRAME type, 0=Constant, 1+=Range+stop, -1=Toggle, -2=Trigger+wait"
	skin(string) : "exact skin number (Quoth entity compatibility)"
	skinstart(string) : "SKIN Starting point, 0=def, X=-1 Random, X=0+ Exact"
	skinloop(string) : "SKIN type, 0=Constant, 1+=Range+stop, -1=Toggle, -2=Trigger+wait"
	mangle(string) : "'pitch yaw roll' override (Quoth entity compatibility)"
	alphastart(integer) : "ALPHA fade IN time for misc_model (1=Fade in over 1s)"
	bbmins(integer) : "Model bounding box override (only works with collision)"
	bbmaxs(integer) : "Model bounding box override"
	view_ofs (integer) : "Extra offset for origin (ideal for light origin issues)"
	delay(integer) : "Spawning delay for models on func movers (works once)"
	locksounds(integer) : "TOGGLE 1=laser, 2=power, 4=silent, 5=custom"
	noise(string) : "Custom sound to play with animation TRIGGER"
	noise1(string) : "Custom sound to play when animation TOGGLE ON"
	noise2(string) : "Custom sound to play when animation TOGGLE OFF"
	volume(integer) : "Volume for all custom sounds played (def=1, range=0-1)"
	lip(integer) : "Frame/skin animation direction -2=random, -1=back, 1=forward(def)"
	state(integer) : "Automatic start of frame/skin animations (0=ON, -1/1=OFF)"
	rotateloop(integer) : "ROTATE type, 0=Constant, 1+=Range+stop, -1=Toggle, -2=Trigger+wait"
	rotateangles(integer) : "ROTATE axis (XYZ) changing (+/-) angles over time"

	//Testing frame selection/display		
	pos1(string) : "Frame Selection" : : "X=0, Y=0, Z=exact frame number, X->Y, Z=0 | will randomly pick a frame from the X,Y range, X->Y, Z=-1 | will animate between the X,Y range, can forward or backward setup."
	__show_frame(integer) : "Editor only! Display a single frame, use ps1 to setup frames used in-game"
	//Testing skin selection/display
	pos2(string) : "Skin Selection" : : "X=0, Y=0, Z=exact skin number, X->Y, Z=0 | will randomly pick a skin from the X,Y range."
	__show_skin(integer) : "Editor only! Display a specific skin, use pos2 to setup the skin used in-game"
]
//socks 'radiant gtk model entry
@PointClass base(Appearflags, Targetname) size(-16 -16 -16, 16 16 16) color(255 128 64) model({ 
    "path": mdl,
    "skin": pos2,
    "frame": pos1
}) = misc_gtkmodel : "Misc Models - MDL files that can be setup with specific frame/skin and animate groups." [
	spawnflags(Flags) = [
		 2 : "Collison" : 0 : "Model bbox collision enabled"
		 4 : "Moveable" : 0 : "Model can be moved around like an item"
	   32 : "Statue" : 0 : "Turn entity into static upon spawn (frame 0)"
	   64 : "Start OFF" : 0 : "Starts off, waits for trigger"
	]
	mdl(string) : "Model to load (progs/model.mdl)"
	angle(integer) : "facing angle"
	angles(string) : "pitch roll yaw" : : "up/down, angle, tilt left/right "
	ideal_yaw(choices) : "Y axis rotation" = [
		0 : "No rotation"
		1 : "Random"
	]
	pos1(string) : "Frame Selection" : : "X=0, Y=0, Z=exact frame number, X->Y, Z=0 | will randomly pick a frame from the X,Y range, X->Y, Z=-1 | will animate between the X,Y range, can forward or backward setup."
	pos2(string) : "Skin Selection" : : "X=0, Y=0, Z=exact skin number, X->Y, Z=0 | will randomly pick a skin from the X,Y range."
	speed(integer) : "Override for frame animation speed (def=0.1s)"
	lip(choices) : "Frame animation direction" = [
		-2 : "Random"
		-1 : "Backwards"
		1 : "Forward (default)"
	]
]
@PointClass base(Appearflags, Targetname) size(-16 -16 -16, 16 16 16) color(255 128 64) model({ 
    "path": mdl,
    "skin": pos2,
    "frame": pos1
	}) = mapobject_custom : "This is a duplicate of misc_model for quoth map compatibility" []



@PointClass base(TrigOFF, Appearflags, Targetname) size(-16 -16 -16, 16 16 16) color(255 128 64) studio("progs/madfox/fanhouse.mdl") = misc_fan [
	spawnflags(Flags) = [
		 1 : "Start Idle" : 0
		 2 : "Start Broken" : 0
	]
	mangle(string) : "Model Rotation as Pitch Roll Yaw"
	speed(integer) : "Time between frames (def=0.1)"
]

@PointClass base(Appearflags, Targetname) size(-16 -16 -16, 16 16 16) color(255 128 64) studio("progs/player.mdl") = misc_actor : "Triggered Physics based actor for scripted sequences" [
	spawnflags(Flags) = [
		 2 : "STOP Particles" : 0 : "Disable Particles After Movement is finished"
		 4 : "Remove Actor on ground" : 0 : "Remove the actor entity after it touches the ground"
		 8 : "Start OFF" : 0 : "Hidden until triggered"
	     16 : "Spawn Effect" : 0 : "Spawn Particle effect on triggered"
	]
	mdl(string) : "Model to load (progs/model.mdl)"
	angle(integer)  : "" : : "up/down, angle, tilt left/right "
	frame(integer) : "Frame Selection" : : "X=0, Y=0, Z=exact frame number, X->Y, Z=0 : will randomly pick a frame from the X,Y range, X->Y, Z=-1 : will animate between the X,Y range, can forward or backward setup"
	height(integer) : "Ending frame" : : "when triggered, actor will run frames and stop at the specified value"
	speed(integer) : "animation rate" : : "0.1 is the standard update rate for monster animations"
	velocity(vector) : "Physics movement" : : "Format is X Y Z velocity"
	partname(string) : "Particle Trail" : : "useful for effects like blood trails or flames"
	//partspawn(string) : "Triggered Particle" : : "Spawn one //particle upon being targeted"
]

@PointClass base(Appearflags, Targetname) size(-16 -16 -16, 16 16 16) color(255 128 64) studio("progs/player.mdl") = misc_hostage : "Triggered Physics based actor for scripted sequences" [
	spawnflags(Flags) = [
		 1 : "Dead" : 0
		 2 : "Fire Rockets (zerend hack)" : 0
		 64 : "Delay Spawn" : 0
	]
	speed(integer) : "Move speed per ai_run frame (def=10)"
	wait(integer) : "Time to stand until moving (def=9999999)"
]

@PointClass base(Target, Targetname) size(-8 -8 -12, 8 8 24) = actor_target : "Target Point for misc_actor" [
	wait(integer) : "Time to stand still before moving to next actor_target (target) (def=0, stay forever)"
	speed(integer): "How fast to run to this target (def=10)"
]

@PointClass base(TrigOFF, Appearflags, Targetname) = misc_bob : "Bobbing models, gently up and down" [
	spawnflags(Flags) = [
        2 : "Collision" : 0
    ]    
    mdl(studio) : "Model (ex. progs/candle.mdl)"
    model(studio) : "Model Preview (Editor)"
	angle(integer) : "Direction (use 360 for 0)"
	height(integer) : "Intensity (def=4)"
	count(integer) : "Cycle timer (def=2, min=1)"
	waitmin(integer) : "Speed up scale (def=1)"
	waitmin2(integer) : "Slow down scale (def=0.75)"
	delay(integer) : "Delay start (-1=random)"
]	

//----------------------------------------------------------------------
@PointClass base(Appearflags, Targetname, Target) size(-16 -16 -8, 16 16 8)
	color(0 128 128) flags(Angle) = misc_textbook : "Misc Text Books" [
	spawnflags(Flags) = [
		 1 : "No Model + Effects" : 0
		 2 : "Plinth1" : 0
		 4 : "Plinth2" : 0
		16 : "Plinth Collision" : 0
		32 : "Facing Angle Only" : 0
		64 : "Start Off" : 0
		128: "No Effects" : 0
	]
	v_angle(string) : "Viewing angle (def='30 60 0')"
	exactskin(choices) : "Book Cover" = [
		0 : "Brown 1"
		1 : "Brown 2"
		2 : "Green 1"
		3 : "Green 2"
		4 : "Blue 1"
		5 : "Blue 2"
		6 : "Red 1"
		7 : "Red 2"
	]
	pos1(string) : "Touch trigger minimum size"
	pos2(string) : "Touch trigger maximum size"
	message(string) : "Header message"
	message2(string) : "Body text"
]

//----------------------------------------------------------------------
@PointClass base(Appearflags, Targetname, Target) size(-16 -16 -8, 16 16 8)
	color(0 128 256) flags(Angle) = misc_textstory : "Misc Text Story" [
	message(string) : "Header message"
	message2(string) : "Body text 1"
	message3(string) : "Body text 2"
	message4(string) : "Body text 3"
]

//----------------------------------------------------------------------
@PointClass base(Appearflags, Targetname, Target) size(-16 -16 -8, 16 16 8)
	color(0 16 256) flags(Angle) = misc_textstoryctrl : "Misc Story Controller" []

//----------------------------------------------------------------------
@PointClass size(-32 -32 -24, 32 32 64) color(0 128 128) 
	flags(Angle) = misc_targetdummy : "Misc Target Dummies" [
	spawnflags(Flags) = [
		 1 : "Knight" : 0
		 2 : "Wizard" : 0
		 4 : "Ogre" : 0
		 8 : "Hell Knight" : 0
		16 : "Zombie" : 0
		32 : "Demon" : 0
		64 : "Shalrath" : 0
		128: "Shambler" : 0
	]
	noise1(string) : "Targetnumber tracking weapon used"
	noise2(string) : "Targetnumber tracking enemy distance"
	noise3(string) : "Targetnumber tracking damage"
	noise4(string) : "Targetnumber tracking % efficency"
	wait(integer) : "Impact marker removal time"
]
@PointClass base(Targetname) size(-4 -4 -8, 4 4 8) color(128 128 0) 
	flags(Angle) = misc_targetnumber : "Ingame numbers" [
	pos1(string) : "X=top digits, Y=lower digits"
]

//======================================================================
//
// Quoth corpse entities
//
//======================================================================
@PointClass base(Appearflags) size(-16 -16 -24, 16 16 40) studio("progs/quoth/corpse_imp.mdl") = corpse_crucified1 : "Corpse(crucified)" [
	skin(integer) : "Skin (def=7)" : 7
	frame(integer) : "Model pose (def=9)" : 9
	studio(integer) : "Editor pose" : 9	
]
@PointClass base(Appearflags) size(-16 -16 -24, 16 16 40) studio("progs/quoth/corpse_imp.mdl") = corpse_crucified2 : "Corpse(crucified,headless)" [
	skin(integer) : "Skin (def=8)" : 8
	frame(integer) : "Model pose (def=10)" : 10
	studio(integer) : "Editor pose" : 10
]
@PointClass base(Appearflags) size(-16 -16 -96, 16 16 0) studio("progs/quoth/corpse_lynch.mdl") = corpse_lynched1 : "Corpse(lynched,clothed)" [
	skin(integer) : "Skin (def=1)" : 1
	frame(integer) : "Model pose (def=0)" : 0
]
@PointClass base(Appearflags) size(-16 -16 -96, 16 16 0) studio("progs/quoth/corpse_lynch.mdl") = corpse_lynched2 : "Corpse(lynched)" [
	skin(integer) : "Skin (def=0)" : 0
	frame(integer) : "Model pose (def=0)" : 0
]
@PointClass base(Appearflags) size(-16 -16 -96, 16 16 0) studio("progs/quoth/corpse_lynch.mdl") = corpse_lynched3 : "Corpse(lynched,eaten)" [
	skin(integer) : "Skin (def=2)" : 2
	frame(integer) : "Model pose (def=1)" : 1
]
@PointClass base(Appearflags) size(-16 -16 -96, 16 16 0) studio("progs/quoth/corpse_flay.mdl") = corpse_flayed1 : "Corpse(flayed,clothed)" [
	skin(integer) : "Skin (def=0)" : 0
	frame(integer) : "Model pose (def=0)" : 0
]
@PointClass base(Appearflags) size(-16 -16 -96, 16 16 0) studio("progs/quoth/corpse_flay.mdl") = corpse_flayed2 : "Corpse(flayed)" [
	skin(integer) : "Skin (def=1)" : 1
	frame(integer) : "Model pose (def=0)" : 0
]
@PointClass base(Appearflags) size(-16 -16 -96, 16 16 0) studio("progs/quoth/corpse_flay.mdl") = corpse_flayed3 : "Corpse(flayed,eaten)" [
	skin(integer) : "Skin (def=2)" : 2
	frame(integer) : "Model pose (def=2)" : 2
]
@PointClass base(Appearflags) size(-16 -16 -96, 16 16 0) studio("progs/quoth/corpse_flay.mdl") = corpse_flayed4 : "Corpse(flayed,broken leg)" [
	skin(integer) : "Skin (def=1)" : 1
	frame(integer) : "Model pose (def=1)" : 1
]
@PointClass base(Appearflags) size(-32 -32 -40, 32 32 0) studio("progs/quoth/corpse_imp.mdl") = corpse_impaled_back1 : "Corpse(impaled in back,clothed)" [
	skin(integer) : "Skin (def=0)" : 0
	frame(integer) : "Model pose (def=0)" : 0
]
@PointClass base(Appearflags) size(-32 -32 -40, 32 32 0) studio("progs/quoth/corpse_imp.mdl") = corpse_impaled_back2 : "Corpse(impaled in back)" [
	skin(integer) : "Skin (def=1)" : 1
	frame(integer) : "Model pose (def=0)" : 0
]
@PointClass base(Appearflags) size(-32 -32 -40, 32 32 0) studio("progs/quoth/corpse_imp.mdl") = corpse_impaled_back3 : "Corpse(impaled in back,eaten)" [
	skin(integer) : "Skin (def=2)" : 2
	frame(integer) : "Model pose (def=1)" : 1
]
@PointClass base(Appearflags) size(-16 -16 -24, 16 16 16) studio("progs/quoth/corpse_imp.mdl") = corpse_impaled_front1 : "Corpse(impaled in front,clothed)" [
	skin(integer) : "Skin (def=1)" : 1
	frame(integer) : "Model pose (def=2)" : 2
]
@PointClass base(Appearflags) size(-16 -16 -24, 16 16 16) studio("progs/quoth/corpse_imp.mdl") = corpse_impaled_front2 : "Corpse(impaled in front)" [
	skin(integer) : "Skin (def=1)" : 1
	frame(integer) : "Model pose (def=2)" : 2
]
@PointClass base(Appearflags) size(-16 -16 -24, 16 16 16) studio("progs/quoth/corpse_imp.mdl") = corpse_impaled_front3 : "Corpse(impaled in front,eaten)" [
	skin(integer) : "Skin (def=3)" : 3
	frame(integer) : "Model pose (def=3)" : 3
]
@PointClass base(Appearflags) size(-16 -16 -24, 16 16 16) studio("progs/quoth/corpse_imp.mdl") = corpse_impaled_horizontal1 : "Corpse(impaled horizontal,clothed)" [
	skin(integer) : "Skin (def=0)" : 0
	frame(integer) : "Model pose (def=4)" : 4
]
@PointClass base(Appearflags) size(-16 -16 -24, 16 16 16) studio("progs/quoth/corpse_imp.mdl") = corpse_impaled_horizontal2 : "Corpse(impaled horizontal)" [
	skin(integer) : "Skin (def=1)" : 1
	frame(integer) : "Model pose (def=4)" : 4
]
@PointClass base(Appearflags) size(-16 -16 -24, 16 16 16) studio("progs/quoth/corpse_imp.mdl") = corpse_impaled_horizontal3 : "Corpse(impaled horizontal,nibbled)" [
	skin(integer) : "Skin (def=4)" : 4
	frame(integer) : "Model pose (def=5)" : 5
]
@PointClass base(Appearflags) size(-16 -16 -24, 16 16 16) studio("progs/quoth/corpse_imp.mdl") = corpse_impaled_horizontal4 : "Corpse(impaled horizontal,eaten)" [
	skin(integer) : "Skin (def=5)" : 5
	frame(integer) : "Model pose (def=6)" : 6
]
@PointClass base(Appearflags) size(-16 -16 -24, 16 16 16) studio("progs/quoth/corpse_imp.mdl") = corpse_impaled_vertical1 : "Corpse(impaled vertical,clothed)" [
	skin(integer) : "Skin (def=0)" : 0
	frame(integer) : "Model pose (def=7)" : 7
]
@PointClass base(Appearflags) size(-16 -16 -24, 16 16 16) studio("progs/quoth/corpse_imp.mdl") = corpse_impaled_vertical2 : "Corpse(impaled vertical)" [
	skin(integer) : "Skin (def=1)" : 1
	frame(integer) : "Model pose (def=7)" : 7
]
@PointClass base(Appearflags) size(-16 -16 -24, 16 16 16) studio("progs/quoth/corpse_imp.mdl") = corpse_impaled_vertical3 : "Corpse(impaled vertical,eaten)" [
	skin(integer) : "Skin (def=6)" : 6
	frame(integer) : "Model pose (def=8)" : 8
]

@PointClass base(Appearflags, Targetname) size(-16 -16 -24, 16 16 16) = meat_shower : "Generate gib fountain" [
	angle(integer) : "Facing angle"
	fly_sound(choices): "Use Sound" = [
		0 : "No sound"
		1 : "Play gibbing sound effect"
	]
]

@PointClass base(Appearflags, Targetname) size(-16 -16 -24, 16 16 40) studio("progs/player.mdl") = misc_deadplayer : "Player Corpse" [
	pos1(integer) : "Orientation (def='0 90 180' on back)"
	frame(integer) : "Pose frame (def=93 on back)"
]



//@PointClass base(Appearflags, Targetname) size(-16 -16 -24, 16 16 16) studio({"path": "progs/ad171/gib_1.mdl", "skin":skin, "frame":frame})= gib_misc_1 : "Gib item" [
//	angle(integer) : "Facing angle"
//]

//@PointClass base(Appearflags, Targetname) size(-16 -16 -24, 16 16 16) studio({"path": "progs/ad171/gib_2.mdl", "skin":skin, "frame":frame}) = gib_misc_2 : "Gib item" [
//	angle(integer) : "Facing angle"
//]

//@PointClass base(Appearflags, Targetname) size(-16 -16 -24, 16 16 16) studio({"path": "progs/ad171/gib_3.mdl", "skin":skin, "frame":frame}) = gib_misc_3 : "Gib item" [
//	angle(integer) : "Facing angle"
//]

//_____Player POSED_____
//NOTE - need to ADD editor view pose/skin chnages
//studio({"path": "progs/key_medieval.mdl", "skin": 2})
@PointClass base(TrigOFF, Appearflags, Targetname) size(-16 -16 -24, 16 16 32) color(255 128 64) studio("progs/ad171/misc_player.mdl") = misc_player : "Misc Player - Dead Player MDL for poses." [
	angle(integer) : "facing angle"
	ideal_yaw(choices) : "Y axis rotation" = [
		0 : "No rotation"
		1 : "Random"
	]
	//We have spawnflags for these?
	frame(choices) : "Pose Selection" = [
		0 : "Default On Back"
		1 : "Face Down 1"
		2 : "Slumped Over"
		3 : "Face Down 2"
		4 : "Face Down 3"
		5 : "On Side"
	]
	exactskin(choices) : "Skin Selection" = [
	   -1 : "Random"
		0 : "Default"
		1 : "Default + Blood"
		2 : "Green Armour"
		3 : "Green + Blood"
		4 : "Yellow Armour"
		5 : "Yellow + Blood"
		6 : "Red Armour"
		7 : "Red + Blood"
	]
	bodyonflrtrig(target_destination) : "Target - triggered when gibbed(Shadow Axe)"
]
//_____Demon POSED_____
//NOTE - need to ADD editor view pose/skin chnages
@PointClass base(TrigOFF,Appearflags,Targetname) size(-32 -32 -24, 32 32 64) color(255 128 64) studio("progs/mon_demon.mdl") = misc_demon : "Misc Demon - Dead demon/fiend for poses." [
	angle(integer) : "Facing Angle"
	ideal_yaw(choices) : "Y axis rotation" = [
		0 : "No rotation"
		1 : "Random"
	]
	frame(choices) : "Pose Selection" = [
		53 : "On Back"
	]
	exactskin(choices) : "Skin Selection" = [
	   -1 : "Random"
		0 : "Default"
		1 : "Green"
	]
	bodyonflrtrig(target_destination) : "Target - triggered when gibbed(Shadow Axe)"
]
//_____Death Knight POSED_____
//NOTE - need to ADD editor view pose/skin chnages
@PointClass base(TrigOFF,Appearflags, Targetname) size(-16 -16 -24, 16 16 40) color(192 64 0) studio("progs/ad171/mon_dknight.mdl") = misc_dknight : "Misc Death Knight - Dead Death Knight for poses." [
	angle(integer) : "facing angle"
	ideal_yaw(choices) : "Y axis rotation" = [
		0 : "No rotation"
		1 : "Random"
	]
	frame(choices) : "Pose Selection" = [
		223 : "On Front"
		243 : "On Back"
	]
	bodyonflrtrig(target_destination) : "Target - triggered when gibbed(Shadow Axe)"
]

//-----------------------------------------------------------------------------
@BaseClass base(Appearflags, Targetname, Target) 
	color(0 128 192) flags(Angle) = EBox [
	spawnflags(Flags) = [
		32 : "Floating" : 0
		64 : "Start Off" : 0
	]
	skin_override(choices) : "Skin Type" = [
		0 : "Original ID (def)"
		1 : "Rubicon2"
		2 : "Quoth Plasma"
		3 : "Quoth Toxic"
		4 : "Medieval Wood (light)"
		5 : "Medieval Wood (dark)"
	]
	noise(string) : "Custom Sound - Explosion"
	health(integer) : "Health (def=15)"
	dmg(integer) : "Radius Damage (def=160)"
]
@PointClass base(EBox) size(-16 -16 0, 16 16 64) studio("progs/ad171/explode_box1.mdl") = misc_explobox : "Large box" []
@PointClass base(EBox) size(-16 -16 0, 16 16 32) studio("progs/ad171/explode_box2.mdl") = misc_explobox2 : "Small box" []
@PointClass base(EBox) size(-32 -32 0, 32 32 64) studio("maps/nsoe2/b_barrel.bsp") = misc_barrel : "Small box" []
@PointClass base(EBox) size(-16 -16 0, 16 16 64) studio("maps/quoth/b_bio_l.bsp") = misc_biobox_l : "Large box" []
@PointClass base(EBox) size(-16 -16 0, 16 16 32) studio("maps/quoth/b_bio_s.bsp") = misc_biobox_s : "Small box" []
@PointClass base(EBox) size(-16 -16 0, 16 16 64) studio("maps/quoth/b_plas_l.bsp") = misc_plasmabox_l : "Large box" []
@PointClass base(EBox) size(-16 -16 0, 16 16 32) studio("maps/quoth/b_plas_s.bsp") = misc_plasmabox_s : "Small box" []

@PointClass base(EBox) size(-16 -16 -24, 16 16 32) studio("maps/nehahra/libcart.bsp") = misc_librarycart : "Librarian's cart" []

//======================================================================
// TRAP entities
//======================================================================
@BaseClass base(Appearflags,Targetname,Target) size(-8 -8 -8, 8 8 8) 
	color(0 128 192) flags(Angle) = Trap [
	spawnflags(Flags) = [ 
		32 : "Toggle" : 0
		128 : "Tracking" : 0
	]
]

@PointClass base(Trap) = trap_spikeshooter : "Spike Shooter" [
	spawnflags(Flags) = [
		1 : "SNG Spike" : 0
		2 : "Laser" : 0
		4 : "Wizard" : 0
		8 : "Hell Knight" : 0
	]
	speed(integer) : "Projectile speed"
	wait(integer) : "time between firing (def=1s)"
	delay(integer) : "random time between firing"
]
@PointClass base(Trap) = trap_grenadeshooter : "Grenade Shooter" [
	spawnflags(Flags) = [ 1 : "Player" : 0 ]
	speed(integer) : "Projectile speed"
	wait(integer) : "time between firing (def=1s)"
	delay(integer) : "random time between firing"
]
@PointClass base(Trap) = trap_rocketshooter : "Rocket Shooter" [
	spawnflags(Flags) = [
		1 : "Lava" : 0
		1 : "Fireball" : 0
	]
	speed(integer) : "Projectile speed"
	wait(integer) : "time between firing (def=1s)"
	delay(integer) : "random time between firing"
]
@PointClass base(Trap) = trap_lightningshooter : "Lightning Shooter" [
	spawnflags(Flags) = [
 		1 : "Large (Chthon)" : 0
		8 : "Impact Dust" : 0
		16: "Impact Particles" : 0
	]
	dmg(integer) : "Damage (def=15)"
	speed(integer) : "Projectile speed"
	wait(integer) : "minimum time between firing (def=1s), must be larger than 0"
	delay(integer) : "added random time between firing"
	pos1(string) : "Random wobble to source position, enter as 3 positive values, gets multiplied to be come plus or minus on each(def='0 0 0')"
	pos2(string) : "Random wobble to end position, enter as 3 positive values, gets multiplied to be come plus or minus on each(def='0 0 0')"
]
@PointClass base(Targetname) = trap_lightning_triggered : "Triggered Lightning Shooter" [
	spawnflags(Flags) = [
 		1 : "Random (multiplied by wait)" : 0
		2 : "Boom (use thunderbolt sound)" : 0
	]
	dmg(integer) : "Damage (def=30)"
	wait(integer) : "minimum time between firing (def=1s), must be larger than 0"
	duration(integer) : "Time to stay on per zap (def=0.1)"
	deathstring(string) : "Death message (def= was electrocuted, include space at beginning)"
]
@PointClass base(Targetname) = trap_lightning_switched : "Toggled Lightning Shooter" [
	spawnflags(Flags) = [
 		1 : "Random (multiplied by wait)" : 0
		2 : "Boom (use thunderbolt sound)" : 0
	]
	dmg(integer) : "Damage (def=30)"
	wait(integer) : "minimum time between firing (def=1s), must be larger than 0"
	duration(integer) : "Time to stay on per zap (def=0.1)"
	deathstring(string) : "Death message (def= was electrocuted, include space at beginning)"
]
@PointClass = trap_lightning : "Always On Lightning Shooter" [
	spawnflags(Flags) = [
 		1 : "Random (multiplied by wait)" : 0
		2 : "Boom (use thunderbolt sound)" : 0
	]
	dmg(integer) : "Damage (def=30)"
	wait(integer) : "minimum time between firing (def=1s), must be larger than 0"
	duration(integer) : "Time to stay on per zap (def=0.1)"
	deathstring(string) : "Death message (def= was electrocuted, include space at beginning)"
]

@PointClass base(Trap) = trap_tesla_coil : "Lightning Shooter" [
	spawnflags(Flags) = [
 		1 : "Attack Monsters and Players" : 0
	]
	dmg(integer) : "Damage (def=2+(5 * skill)), must be larger than 0"
	wait(integer) : "minimum time between firing (def=2s), must be larger than 0"
	duration(integer) : "Time to stay on per zap (def= -1)"
	distance(integer) : "Attack range (def=600), must be larger than 0"
	deathstring(string) : "Death message (def= was electrocuted, include space at beginning)"
]

@PointClass base(Trap) = trap_gods_wrath : "Lightning Shooter" [
	spawnflags(Flags) = [
 		1 : "Attack Monsters and Players" : 0
	]
	dmg(integer) : "Damage (def=2+(5 * skill)), must be larger than 0"
	wait(integer) : "minimum time between firing (def=2s), must be larger than 0"
	duration(integer) : "Time to stay on per zap (def= -1)"
	distance(integer) : "Attack range (def=600), must be larger than 0"
	deathstring(string) : "Death message (def= was electrocuted, include space at beginning)"
]

@PointClass base(Trap) = trap_gasshooter : "Particle Shooter" [
	spawnflags(Flags) = [ 
		1 : "Steam" : 1 
		2 : "Fire" : 0
		4 : "Poison" : 0
		16 : "Silent" : 0
	]
	wait(integer) : "Spawn time delay (def=0.05s)"
	waitmin(integer) : "Auto switch off timer (def=0.5s)"
	speed(integer) : "Velocity speed (def=200)"
	dmg(integer) : "Touch Damage (def=1)"
]
//----------------------------------------------------------------------
@BaseClass base(Appearflags,Targetname,Target) = Trap_Pendulum [
	spawnflags(Flags) = [
		1 : "Reverse" : 0 : "Start at frame 12 instead of 0"
		2 : "One Swing" : 0 : "swing back & forth and then stop"
		64 : "Start OFF" : 0
	]
	dmg(integer) : "Touch Damage (def=5)"
	waitmin(integer) : "Time between Touch Damage (def=0.5s)"
	wait(integer) : "Starting Delay"
]
@PointClass base(Trap_Pendulum) size(-8 -192 -24, 8 0 24) = trap_pendlong : "Long Pendulum" []
@PointClass base(Trap_Pendulum) size(-192 -8 -24, 0 8 24) = trap_pendlongx : "Long Pendulum X Axis" []
@PointClass base(Trap_Pendulum) size(-8 -128 -24, 8 0 24) = trap_pendshort : "Short Pendulum" []
@PointClass base(Trap_Pendulum) size(-128 -8 -24, 0 8 24) = trap_pendshortx : "Short Pendulum X Axis" []
//----------------------------------------------------------------------
@BaseClass base(Appearflags,Targetname,Target) = Trap_SawBlade [
	spawnflags(Flags) = [
		1 : "Start ON" : 0
		2 : "Reverse" : 0 : "Start at frame 12 instead of 0"
		64 : "Start OFF" : 0
	]
	speed(integer) : "Speed Travel (def=100)"
	yaw_speed(integer) : "Speed Rotation (def=180)"
	dmg(integer) : "Touch Damage (def=4)"
	waitmin(integer) : "Damage pause ON state (def=0.1s)"
	height(integer) : "Damage pause OFF state (def=1s)"
	lip(choices) : "Deceleration time" = [
		-1 : "Instant Stop"
		 2 : "Default"
	]
	sounds(choices) : "Sounds" = [
		0 : "Silent (def)"
		1 : "Woodmill"
		5 : "Custom"
	]
	noise(string) : "Custom Sound - Stopping"
	noise1(string) : "Custom Sound - Moving"
]
@PointClass base(Trap_SawBlade) size(-4 -32 -32, 4 32 32) = trap_sawbladey : "Saw Blade on Y axis" []
@PointClass base(Trap_SawBlade) size(-32 -4 -32, 32 4 32) = trap_sawbladex : "Saw Blade on X axis" []

@PointClass base(Appearflags,Targetname,Target) = trap_turret : "Laser Turret (Rubicon2)" [
	spawnflags(Flags) = [
		1: "Start off" : 0
		2: "Retracted" : 0
		4: "Off Retract" : 0
		8: "Lasers" : 0
		16: "Rockets" : 0
		32: "Phasebeam PPC" : 0
	]
	angles(string) : "Angles"
	movedir(string) : "Move amount for retraction"
	health(integer) : "Health"
	rotate_type(integer) : "Rotation type"
]

@SolidClass base(Appearflags,Targetname,Target) = func_turret : "Laser Turret (Rubicon2)" [
	spawnflags(Flags) = [
		1: "Start off" : 0
		2: "Retracted" : 0
		4: "Off Retract" : 0
		8: "Lasers" : 0
		16: "Rockets" : 0
		32: "Phasebeam PPC" : 0
	]
	sounds(choices) : "Sounds" = [
		0 : "Silent (def)"
		1 : "Door1"
		2 : "Hydro"
		3 : "Door2"
		4 : "Door3"
	]
	angles(string) : "Angles"
	movedir(string) : "Move amount for retraction"
	alpha(integer) : "Alpha Transparency(def=1,opaque)"
]

//======================================================================
//
// LIGHT entities
//
//======================================================================
@baseclass base(Targetname,Target) color(0 128 192) = Light [
	light(integer) : "Brightness" :  : "Set the light intensity. Negative values are also allowed and will cause the entity to subtract light cast by other entities. Default 300"
	_color(string) : "Light color" :  : "Specify red(r), green(g) and blue(b) components for the colour of the light. RGB component values are between 0 and 1. Default is white light ('1 1 1')"

//ISSUE
//Until I get  a new progs will use old key names

//customstyle_remap  : Re-use another light style (0-63)		
	customlighttype(integer)  : "Style Remap" : : "Use original (0-11) values as string or define new one"
//customstyle_string 	light value string made up of "a-z" letters
	customlightstyle(string) : "Style Definition" : : "light value string made up of 'a-z' letters"

	wait(integer) : "Fade distance multiplier" :  : "Scale the fade distance of the light by 'n'. Values of n more than 1 make the light fade more quickly with distance, and values less than 1 make the light fade more slowly (and thus reach further). Default 1"
	_falloff(integer) : "Falloff(in map units)" :  : "Sets the distance at which the light drops to 0, in map units."
	delay(choices) : "Attenuation" :  : "Select an attenuation formula for the light: 0 = Linear attenuation (default). 1 = 1/x attenuation. 2 = 1/(x^2) attenuation. 3 = No attenuation (same brightness at any distance). 4 = 'local minlight' - No attenuation and like minlight, it won't raise the lighting above it's light value. Unlike minlight, it will only affect surfaces within line of sight of the entity. 5 = 1/(x^2) attenuation, but slightly more attenuated and without the extra bright effect that 'delay 2' has near the source"  = [
		0 : "Linear falloff (Default)"
		1 : "Inverse distance falloff"
		2 : "Inverse distance squared"
		3 : "No falloff"
		4 : "Local minlight"
		5 : "Inverse distance 2"
	]
	mangle(string) : "Spotlight direction" :  : "Turns the light into a spotlight and specifies the direction of light using Pitch(x) Roll(y) Yaw(z) in degrees. Yaw specifies the angle around the Z-axis from 0 to 359 degrees and pitch specifies the angle from 90 (straight up) to -90 (straight down). Roll has no effect, so use any value (e.g. 0). Often easier than the 'target' method"
	angle(integer) : "Spotlight cone angle" :  : "Specifies the angle in degrees for a spotlight cone. Default 40"
	_softangle(integer) : "Spotlight soft angle" :  : "Specifies the angle in degrees for an inner spotlight cone (must be less than the 'angle' cone. Creates a softer transition between the full brightness of the inner cone to the edge of the outer cone. Default 0 (disabled)"
	_anglescale(integer) : "Light angle scale" :  : "Sets a scaling factor for how much influence the angle of incidence of light on a surface has on the brightness of the surface. n must be between 0.0 and 1.0. Smaller values mean less attenuation, with zero meaning that angle of incidence has no effect at all on the brightness. Default 0.5"
    _bouncescale(integer) : "Bounce Scale" :  : "Scales the amount of light that is contributed by bounces. Default is 1.0, 0.0 disables bounce lighting for this light."	

	style(choices) : "Appearance" = [
		0 : "Normal"
		10: "Fluorescent flicker"
		2 : "Slow, strong pulse"
		11: "Slow pulse, noblack"
		5 : "Gentle pulse"
		1 : "Flicker A"
		6 : "Flicker B"
		3 : "Candle A"
		7 : "Candle B"
		8 : "Candle C"
		4 : "Fast strobe"
		9 : "Slow strobe"
	]
	_dirt(integer) : "Dirt map (override)" :  : "Overrides the worldspawn setting of '_dirt' for this particular light. -1 to disable dirtmapping (ambient occlusion) for this light, making it illuminate the dirtmapping shadows. 1 to enable ambient occlusion for this light. Default is to defer to the worldspawn setting"
	_dirtscale(integer) : "Dirt scale (override)" :  : "Override the global '_dirtscale' or '_dirtgain' settings to change how this light is affected by dirtmapping (ambient occlusion). See descriptions of these keys in the worldspawn section"
	_deviance(integer) : "Deviance" :  : "Split up the light into a sphere of randomly positioned lights within radius 'n' (in world units). Useful to give shadows a wider penumbra. '_samples' specifies the number of lights in the sphere. The 'light' value is automatically scaled down for most lighting formulas (except linear and non-additive minlight) to attempt to keep the brightness equal. Default is 0, do not split up lights"
	_samples(integer) : "No. of Deviance lights" :  : "Number of lights to use for '_deviance'. Default 16 (only used if '_deviance' is set)"
	_surface(string) : "Surface light texture name" :  : "Makes surfaces with the given texture name emit light, by using this light as a template which is copied across those surfaces. Lights are spaced about 128 units (though possibly closer due to bsp splitting) apart and positioned 2 units above the surfaces"
	_surface_offset(integer) : "Surface light offset" :  : "Controls the offset lights are placed above surfaces for '_surface'. Default 2"
   _surface_spotlight(integer) : "Surface Spotlight" :  : "For a surface light template (i.e. a light with '_surface' set), setting this to 1 makes each instance into a spotlight, with the direction of light pointing along the surface normal. In other words, it automatically sets 'mangle' on each of the generated lights."
    _project_texture(string) : "Project Texture(name)" :  : "Specifies that a light should project the named texture. The texture must be used in the map somewhere."
    _project_mangle(string) : "Projection Mangle" :  : "Specifies the yaw/pitch/roll (yes different than angles or mangles!) angles for a texture projection (overriding mangle)."
    _project_fov(integer) : "Projection FOV" :  : "Specifies the 'Field of View'(FOV) angle for a texture projection. Default 90."

//------------------- Alternate SUN Method --------------------------

//----- USE as a SUN -----

    _sun(choices) : "Sun" :  : "Set to 1 to make this entity a sun, as an alternative to using the sunlight worldspawn keys. If the light targets an 'info_null' entity, the direction towards that entity sets sun direction. The light itself is disabled, so it can be placed anywhere in the map." = [
		0 : "Default(OFF)"
		1 : "USE as a Sun"
	]

	spawnflags(Flags) = [
		2: "Thunder Flash Style (needs targetname)" : 0
	]
]
@baseclass size(-8 -8 -8, 8 8 8) base(Light) = LightPoint [] 
@baseclass size(-8 -8 -24, 8 8 24) base(Light) = LightTorch []
@baseclass size(-8 -8 -12, 8 8 20) offset(0 0 12) base(Light) = LightFlame []
@baseclass = LightOff [ spawnflags(flags) = [ 1 : "Start Off" : 0 ] ]

//----------------------------------------------------------------------
@PointClass base(LightPoint,LightOff) iconsprite("sprites/light.spr") = 
	light : "Invisible lightsource" []
@PointClass base(LightPoint,LightOff) iconsprite("sprites/light.spr") = 
	light_fluoro : "Fluorescent light" [
	spawnflags(flags) = [
		2 : "No Sound" : 0
	]
]
@PointClass base(LightPoint) iconsprite("sprites/light.spr") = 
	light_fluorospark : "Sparking fluorescent light" [
	spawnflags(flags) = [
		2 : "No Sound" : 0
	]
]
@PointClass base(LightPoint,LightOff) sprite("progs/s_light.spr") = 
	light_globe : "Globe light" [
	spawnflags(flags) = [
		4 : "No Static" : 0
	]
]

//----------------------------------------------------------------------
@PointClass base(LightTorch,LightOff) studio("progs/flame.mdl") = 
	light_torch_small_walltorch : "Small walltorch" [
	spawnflags(flags) = [
		2 : "No Sound" : 0
		4 : "No Static" : 0
		128 : "No Particles" : 0
	]
]
@PointClass base(LightTorch,LightOff) studio("progs/quoth/longtrch.mdl") = 
	light_torch_long_walltorch : "Long walltorch" [
	spawnflags(flags) = [
		2 : "No Sound" : 0
		4 : "No Static" : 0
		128 : "No Particles" : 0
	]
]
@PointClass base(LightFlame,LightOff) studio("progs/flame2.mdl") sequence(0) = 
	light_flame_small_yellow : "Small yellow flame" [
	spawnflags(flags) = [
		2 : "No Sound" : 0
		4 : "No Static" : 0
		128 : "No Particles" : 0
	]
]

@PointClass base(LightFlame,LightOff) studio("progs/flame2.mdl") sequence(0) = 
	light_flame_small_white : "Small white flame" [
	spawnflags(flags) = [
		2 : "No Sound" : 0
		4 : "No Static" : 0
		128 : "No Particles" : 0
	]
]

@PointClass base(LightFlame,LightOff) studio("progs/flame2.mdl") sequence(1) = 
	light_flame_large_yellow : "Large yellow flame" [
	spawnflags(flags) = [
		2 : "No Sound" : 0
		4 : "No Static" : 0
		128 : "No Particles" : 0
	]
]

@PointClass base(LightFlame,LightOff) size(-8 -8 -16, 8 8 20) offset(0 0 12) studio("progs/quoth/brazshrt.mdl") = 
	light_flame_brazier_short : "Short Brazier" [
	spawnflags(flags) = [
		2 : "No Sound" : 0
		4 : "No Static" : 0
		128 : "No Particles" : 0
	]
]

@PointClass base(LightFlame,LightOff) size(-8 -8 -64, 8 8 20) offset(0 0 12)  studio("progs/quoth/braztall.mdl") = 
	light_flame_brazier_tall : "Tall Brazier" [
	spawnflags(flags) = [
		2 : "No Sound" : 0
		4 : "No Static" : 0
		128 : "No Particles" : 0
	]
]

@PointClass base(LightFlame,LightOff) studio("progs/rogue/lantern.mdl") = 
	light_lantern : "Lantern (rogue)" [
	spawnflags(flags) = [
		2 : "No Sound" : 0
		4 : "No Static" : 0
		128 : "No Particles" : 0
	]
]

@PointClass base(LightFlame,LightOff) studio("progs/ad171/misc_lantern.mdl") = 
	light_lantern2 : "Medieval Lantern" [
	spawnflags(flags) = [
		2 : "No Sound" : 0
		4 : "No Static" : 0
		128 : "No Particles" : 0
	]
]

//----------------------------------------------------------------------
//@PointClass base(Light,LightOff) size(-4 -4 -16, 4 4 16) color(0 255 0)
//	studio({{
//	height == "0" -> 	{"path": "progs/misc_candle3.mdl"},
//	height == "1" -> 	{"path": "progs/misc_candle1.mdl"},
//	height == "2" -> 	{"path": "progs/misc_candle2.mdl"},
//	height == "3" -> 	{"path": "progs/misc_candle3.mdl"},
//						"progs/misc_candle3.mdl"
//}}) = light_candle : "Church candle" [
@PointClass base(Light,LightOff) size(-4 -4 -16, 4 4 16) color(0 255 0) studio("progs/ad171/misc_candle3.mdl") = light_candle : "Church candle" [
	spawnflags(flags) = [
		2 : "Flame Off" : 0
		8 : "DP Shadows" : 0
	]
	height(choices) : "Size" = [
		-1: "Random"
		0 : "Default"
		1 : "Short"
		2 : "Medium"
		3 : "Regular"
	]
	t_width(choices) : "Width" = [
		-1: "Random"
		0 : "Default"
		1 : "Regular"
		2 : "Fat"
		3 : "Thin"
	]
	lip(integer) : "Move model down def=16"
]

@PointClass base(Light, LightOff) size(-10 -10 -20, 10 10 20) studio("progs/q15/lightp.mdl") = light_fluoropost : "Light Post (breakable)" []
@PointClass base(Light, LightOff) size(-30 -30 5, 30 30 20) studio("progs/q15/lightfix.mdl") = light_fix : "Ceiling Light Panel(breakable, needs targetname)" []
@PointClass base(Light, LightOff) size(-8 -8 -8, 8 8 8)  studio("progs/q15/lightceil.mdl") = light_ceil : "Ceiling Alarm(breakable, needs targetname)" []
@PointClass base(Light, LightOff) size(-10 -10 -20, 10 10 20) studio("progs/q15/lightp.mdl") = light_fluoropost_dead : "Light Post (broken)" []
@PointClass base(Light, LightOff) size(-30 -30 5, 30 30 20) studio("progs/q15/lightfix.mdl") = light_fix_dead : "Ceiling Light Panel(broken)" []
@PointClass base(Light, LightOff) size(-8 -8 -8, 8 8 8)  studio("progs/q15/lightceil.mdl") = light_ceil_dead : "Ceiling Alarm(broken)" []

@PointClass base(Light, LightOff) size(-10 -10 -20, 10 10 20) studio("progs/quoth/lightpost.mdl") =
	light_postlight : "Light Post (from Quoth)" []
@PointClass base(Light, LightOff) size(-10 -10 -20, 10 10 20) studio("progs/quoth/lighttube.mdl") =
	light_tubelight : "Light Tube (from Quoth)" []
@PointClass base(Light, LightOff) size(-10 -10 -20, 10 10 20) studio("progs/ad171/misc_fixture1.mdl") =
	light_fixture1 : "Light Fixture (from Rubicon)" [
	fixangle(integer) : "Angle of model"
]

//____ LIGHT - PYRE/BRAZIER_____
@PointClass base(Light, LightOff) size(-8 -8 -8, 8 8 8) color(230 230 0) studio("progs/quoth/flame_pyre.mdl") = light_flame_pyre : "Flame Pyre (from Quoth)" [
	spawnflags(flags) = [
		64 : "No Particles" : 0 : "No particle or effects active"
	]		
]

@PointClass base(Light,LightOff) size(-4 -4 -16, 4 4 16) studio("progs/rrp/beacon.mdl") =
	light_beacon : "Tech beacon light" [
	spawnflags(flags) = [
		1 : "Blinking (skin=1)" : 0
	]
]

@PointClass size(-8 -8 -8, 8 8 8) base(Light,LightOff, Target, Targetname) = 
	light_marsh : "Marsh lights sprites" [
		col(choices) : "Colour of sprites" : 0 = [
			0 : "white ( default )" 
			1 : "bluish white"
			2 : "blue"
			3 : "green"
			4 : "orange" 
			5 : "red"
			6 : "purple"
		]	
]

@PointClass base(Appearflags, Targetname) size(-2 -2 -2, 2 2 2) = env_sprite : "Sprite effect" [
	mdl(string) : "Sprite to use (.spr)"
	frame(integer) : "Frame (Start if using idleweaponframe)"
	alpha(integer) : "Alpha (0.0 to 1.0)"
	idleweaponframe(integer) : "Last frame"
	impulse(integer) : "Time between frames (def=0.05)"
	wait(integer) : "Random wait"
	waitmin(integer) : "Minimum wait (def=0)"
	delay(integer) : "Delay before start"
	spawnflags(flags) = [
		8 : "Use Random Waits" : 0
	]
]

@PointClass base (Appearflags, Targetname) = info_screenshake : "Screen Shake event" [
	ltime(integer) : "Duration of quake"
	lip(integer) : "Frequency of shaking"
	height(integer) : "Strength of quake" : 500
	multiplier(integer) : "Strength multiplier" : 1
	noise(string) : "Looping sound"
	noise1(string) : "Ending sound"
	spawnflags(flags) = [
		2 : "Also Move Physically" : 0
	]
]

//======================================================================
//
// HIPNOTIC/RITUAL ROTATION STUFF
//
//======================================================================
@baseclass base(Appearflags,Targetname,Target) flags(Angle) = HipItems [
	_dirt(integer) : "Dirt mapping (override)"
	_minlight(integer) : "Min light for all surface"
	_mincolor(string) : "Min light color R G B"
	_shadow(choices) : "Shadows" = [
		0 : "Do Nothing"
		1 : "Cast shadows"
	]
	_shadowself(choices) : "Self Shadow" = [
		0 : "Do Nothing"
		1 : "Cast shadows on Self"
	]
]

//----------------------------------------------------------------------
@PointClass base(Appearflags,Targetname) size(-4 -4 -4, 4 4 4) = 
	info_rotate : "Rotating Objects pivot point" []
@PointClass base(Appearflags,Targetname,Target) size(-8 -8 -8, 8 8 8) =
	func_rotate_entity : "Rotating Object" [
	spawnflags(flags) = [
		1 : "Toggle" : 0
		2 : "Start ON" : 0
	]
	rotate(integer) : "Rotation Rate"
	speed(integer) : "Spin up time"
]
@PointClass base(Appearflags,Targetname,Target) size(-8 -8 -8, 8 8 8) =
	path_rotate : "Rotating path corner" [
	spawnflags(flags) = [
		1 : "Rotation" : 0 : " Rotate train at rate specified by 'rotate'"
		2 : "Angles" : 0 : "Rotate to the angles specified by 'angles'"
		4 : "Stop" : 0 : "stop train and wait to be retriggered"
		8 : "No Rotate" : 0 : "stop train rotating when waiting to be triggered"
		16: "Damage" : 0 : "Cause damage based on 'dmg'"
		32: "Move Time" : 0 : "Interpret 'speed' as the length of time to take moving"
		64: "Set Damage" : 0 : "Set all targets damage to 'dmg'"
	]
	event(string) : "Target to trigger" : "Trigger target when train arrives at corner"
	noise(string) : "Custom stop sound"
	noise1(string) : "Custom start sound"
	speed(integer) : "Set speed of train"
]
@PointClass base(Appearflags,Targetname,Target) size(-8 -8 -8, 8 8 8) =
	func_rotate_train : "Rotating Platform" [
	path(string) : "Starting position"
	speed(integer) : "Travel Speed (def=100)"
	dmg(integer) : "blocking damage (def=0)"
	sounds(integer) : "Sounds (1=metal)"
	noise(string) : "Custom sound - stop"
	noise1(string) : "Custom sound - moving"
	alpha(integer) : "Alpha Transparency(def=1,opaque)"
]
@SolidClass base(HipItems) = func_movewall : "Rotating Collision" [
	spawnflags(flags) = [
		1 : "Visible" : 0 : "Causes brush to be displayed"
		2 : "Touch" : 0 : "Cause damage when touched by player"
		4 : "No Solid" : 0 : "makes the brush non-solid"
	]
	dmg(integer) : "Touch/Block Damage"
	alpha(integer) : "Alpha Transparency(def=1,opaque)"
]
@SolidClass base(HipItems) = rotate_object : "Rotating Object" [alpha(integer) : "Alpha Transparency(def=1,opaque)"]
@PointClass base(Appearflags,Targetname,Target) size(-8 -8 -8, 8 8 8) =
	func_rotate_door : "Rotating Door" [
	spawnflags(flags) = [
		1 : "Stay Open" : 0 : "Reopen after closing, stops a once only door from closing"
	]
	dmg(integer) : "Blocking damage (def=2)"
	speed(integer) : "Time to Rotate open/close"
	sounds(choices) : "Sounds" = [
		1 : "Medieval (def)"
		2 : "Metal"
		3 : "Base"
	]
	alpha(integer) : "Alpha Transparency(def=1,opaque)"
]

@baseclass = MonsterFamilies [
	style(choices) : "Random Monster Family (def=99)" = [
		1: "Denizens"
		2: "Fodder Military"
		3: "Fodder Mystic"
		4: "Fodder Horrors"
		5: "Fodder Brigade"
		6: "Ogre Establishment"
		7: "Elite Ogres"
		8: "Undead" 
		9: "Midrank Military"
		10: "Midrank Mystic"
		11: "Midrank Horrors"
		12: "Midrank Brigade"
		13: "Elite Military"
		14: "Elite Mystic"
		15: "Elite Horrors"
		16: "Elite Brigade"
		17: "Archnidae"
		18: "Hostile Animals"
		19: "Fodder Swimmers"
		20: "Midrank Swimmers"
		21: "Elite Swimmers"
		22:	"Boss Swimmers"
		23: "Fodder Terrestrial"
		24: "Midrank Terrestrial"
		25: "Boss Terrestrial"
		26: "Fodder Flyers"
		27: "Midrank Flyers"
		28: "Boss Flyers"
		29: "Denizen Swimmers"
		30: "Denizen Terrestrial"
		31: "Denizen Flyers"
		32: "Military"
		33: "Mystic"
		34: "Horrors"
		35: "Brigade"
		92: "Boss Ancients"
		93: "Boss Medieval Menaces"
		94: "Boss Eldritch Horrors"
		95: "Boss Technological Terrors"
		96: "Boss Medieval Monstrosities"
		97: "Boss Eldritch Abominations"
		98: "Bosses All"
		99: "ALL MONSTERS (Yikes)"
	]
]

@baseclass = RandomSpawnsStrings [
	brkobj1(string) : "Override random monster classname 1 of 13 (e.g. monster_dog)"
	brkobj2(string) : "Override random monster classname 2 of 13 (e.g. monster_dog)"
	brkobj3(string) : "Override random monster classname 3 of 13 (e.g. monster_dog)"
	brkobj4(string) : "Override random monster classname 4 of 13 (e.g. monster_dog)"
	corner_event(string) : "Override random monster classname 5 of 13 (e.g. monster_dog)"
	gib1soundx(string) : "Override random monster classname 6 of 13 (e.g. monster_dog)"
	gib2soundx(string) : "Override random monster classname 7 of 13 (e.g. monster_dog)"
	gib3soundx(string) : "Override random monster classname 8 of 13 (e.g. monster_dog)"
	break_template1(string) : "Override random monster classname 9 of 13 (e.g. monster_dog)"
	break_template1(string) : "Override random monster classname 10 of 13 (e.g. monster_dog)"
	break_template1(string) : "Override random monster classname 11 of 13 (e.g. monster_dog)"
	break_template1(string) : "Override random monster classname 12 of 13 (e.g. monster_dog)"
	break_template1(string) : "Override random monster classname 13 of 13 (e.g. monster_dog)"
]

@PointClass base(MonShort,MonsterFamilies,RandomSpawnsStrings) = func_spawn_small : "Monster Spawner" [
	spawnclassname(string) : "Monster To Spawn"
	cnt(integer) : "Number to spawn" : 1
	spawnflags(flags) = [
		2 : "Random Monster" : 0 : "Pick a random monster from the entire list (caches 13 types)"
	]
]

@PointClass base(MonWide,MonsterFamilies,RandomSpawnsStrings) = func_spawn : "Monster Spawner" [
	spawnclassname(string) : "Monster To Spawn"
	cnt(integer) : "Number to spawn" : 1
	spawnflags(flags) = [
		2 : "Random Monster" : 0 : "Pick a random monster from the entire list"
	]
]

//======================================================================
//
// BREAKABLES
//
//======================================================================
@BaseClass base(Appearflags,Targetname,Target,Target2) = Break [
    spawnflags(flags) = [
		1 : "Start OFF (hidden)" : 0 : "Start hidden"
		2 : "No Damage" : 0 : "Cannot be damaged"
		4 : "Explosion" : 0 : "Produces explosion"
		8 : "Silent" : 0 : "No Breaking Sounds"
		16 : "Rubble Damage" : 0 : "Rubble does damage"
		32: "No Monsters" : 0 : "Immune to monster damage"
		64: "No Sounds" : 0 : "No Impact Sounds"
		128: "No Rubble Rotate" : 0 : "No Y rotation for rubble"
		8192: "Use templates in map" : 0 : "Uses func_breakable_templates from the current map"
	]
	style(choices) : "Style Default" = [
		1 : "Rock (default)"
		2 : "Wood"
		3 : "Glass"
		4 : "Metal"
		5 : "Brick"
		6 : "Ceramic"
		10: "Custom"
	]
	brksound(choices) : "Sound Breaking" = [
		0 : "Use Default"
		1 : "Rock"
		2 : "Wood"
		3 : "Glass"
		4 : "Metal"
		5 : "Brick"
		6 : "Ceramic"
		10: "Custom"
	]
	brkimpsound(choices) : "Sound Impact" = [
		0 : "Use Default"
		1 : "Rock"
		2 : "Wood"
		3 : "Glass"
		4 : "Metal"
		5 : "Brick"
		6 : "Ceramic"
		10: "Custom"
	]
	brkobjects(choices) : "Model Texture/Type" = [
		 0 : "Use Default"
		10 : "rock4_1 (dark bricks)"
		11 : "rock4_2 (light stone)"
		12 : "rock3_8 (light vertical)"
		13 : "city5_3 (plaster)"
		14 : "stone1_7b (blue stone)"
		15 : "cliff4 (Black rock)"
		20 : "dung01_3 (dark)"
		21 : "dung01_2 (light)"
		22 : "wizwood1_7 (mouldy)"
		30 : "window1_2 (blue sqr)"
		31 : "window01_4 (red)"
		32 : "window02_1 (yellow)"
		40 : "metal1_2 (gen brown)"
		41 : "metal4_5"
		42 : "metal7_7"
		50 : "wbrick1_5 (large brown)"
		51 : "city2_3 (small sewer)"
		52 : "city6_8 (small drywall)"
		53 : "wiz1_4 (large white)"
		54 : "city2_1 (small red)"
		60 : "ceramic_1"
	]
	noise(string) : "Custom Sound - Initial Break"
	noise1(string) : "Custom Sound - Impact 1"
	noise2(string) : "Custom Sound - Impact 2"
	noise3(string) : "Custom Sound - Impact 3"
	noise4(string) : "Custom Sound - Impact 4"
	brkobj1(string) : "Custom Model - Rubble 1"
	brkobj2(string) : "Custom Model - Rubble 2"
	brkobj3(string) : "Custom Model - Rubble 3"
	brkobj4(string) : "Custom Model - Rubble 4"
	health(integer) : "Health"
	count(integer) : "Rubble Qty to spawn (def=4)"
	cnt(choices) : "Rubble (Random) to spawn" = [
		-1 : "No random qty"
		 0 : "Default = 4"
	]
	dmg(integer) : "Explosive Radius Damage"
	pos1(string) : "Particle colour" : : "x=start particle colour, y=random range, z=quantity"
	brkvelbase(string) : "Velocity Base (def=50 50 100)"
	brkveladd(string) : "Velocity Extra (def=100 100 150)"
	brkavel(integer) : "Velocity Rotation (def=200)"
	brkfade(integer) : "Rubble fade timer (def=4)"
	angles(string) : "Direction to throw rubble"
	brkgravity(integer) : "Rubble gravity (def=1)"
]

//----------------------------------------------------------------------
@SolidClass base(Break) = func_breakable : "Breakable" [
	noise1(string) : "Break noise"
	noise2(string) : "Explode noise"
	break_template1(string) : "Template 1 model path, e.g. maps/break/brk.bsp or progs/brick.mdl"
	break_template2(string) : "Template 2 model path, e.g. maps/break/brk.bsp or progs/brick.mdl"
	break_template3(string) : "Template 3 model path, e.g. maps/break/brk.bsp or progs/brick.mdl"
	break_template4(string) : "Template 4 model path, e.g. maps/break/brk.bsp or progs/brick.mdl"
	break_template5(string) : "Template 5 model path, e.g. maps/break/brk.bsp or progs/brick.mdl"
	brk_obj_count1(integer) : "Template 1 spawn count"
	brk_obj_count2(integer) : "Template 2 spawn count"
	brk_obj_count3(integer) : "Template 3 spawn count"
	brk_obj_count4(integer) : "Template 4 spawn count"
	brk_obj_count5(integer) : "Template 5 spawn count"
	alpha(integer) : "Alpha Transparency(def=1,opaque)"
]
@PointClass base(Break) = func_breakable_spawner : "Breakable Spawner" [
    spawnflags(flags) = [
		4 : "Explosion" : 0 : "Produces explosion"
		8 : "Silent" : 0 : "No Breaking Sounds"
		16 : "Rubble Damage" : 0 : "Rubble does damage"
		32: "No Monsters" : 0 : "Immune to monster damage"
		64: "No Sounds" : 0 : "No Impact Sounds"
		128: "No Rubble Rotate" : 0 : "No Y rotation for rubble"
	]
]
@SolidClass base(Appearflags,Targetname) = func_breakable_wall : "Breakable Wall" [
	spawnflags(flags) = [
		1 : "Start ON" : 0 : "Start visual to player"
		2 : "Solid" : 0 : "Has player collision"
		4 : "Fadeout" : 0 : "Fadeaway once triggered"
	]
	wait(choices) : "Trigger Quantity" = [
		0 : "Multiple Times"
		-1: "Once Only"
	]
	waitmin(integer) : "Fadeout timer"
	alpha(integer) : "Alpha Transparency(def=1,opaque)"
]
@PointClass base(Appearflags,Targetname) size(-8 -8 -8, 8 8 8) = trigger_monsterbreak : "Trigger monster + breakable" [
	spawnflags(flags) = [
		1 : "No Delay" : 0 : "Instantly trigger"
		2 : "Wake Animation" : 0 : "Use Special monster animation"
	]
	target(string) : "Targets func_breakable"
	target2(string) : "Targets Monster"
	wait(integer) : "Time Delay before firing breakable (def=0.2s)"
]
@PointClass base(Appearflags,Targetname) size(-4 -4 -4, 4 4 4) = trigger_explode : "Trigger Grenade Explosion" [
	spawnflags(flags) = [
		2 : "No Particles" : 0 : "Don't use particle burst"
		4 : "Dust" : 0 : "Dust effect only"
		8 : "Silent" : 0 : "Don't play explosion sound"
	]
	dmg(integer) : "Explosive radius (def=40)"
	delay(integer) : "Delay before explosion(s)"
	duration(integer) : "Duration (def=0 - Explode Once)"
	wait(integer) : "Multi-explosion Interval (def=0.3)"
	volume(integer) : "Explosion Sound Volume (def=1)"
	noise(string) : "Custom sound" :  : "Custom Explosion (def=weapons/r_exp3.wav)"
	impulse(integer) : "Channel" :  : "channel to play sound (0-7) (0 automatic is default)"
	speed(integer) : "Attenuation" :  : "-1=global, 1=normal (default), 2=idle, 3=static, 4=quiet"
]

@SolidClass base(Appearflags,Targetname) = trigger_coinpurchase : "Coin Purchase Location" [
	cost(integer) : "Cost"
]

@SolidClass base(Appearflags,Targetname) = trigger_gibpurchase : "Bone Purchase Location" [
	cost(integer) : "Cost"
]

@SolidClass base(Appearflags,Targetname) = trigger_conveyor : "Conveyor belt pusher" [
	speed(integer) : "Speed (def=10)"
	spawnflags(flags) = [
		1 : "Start Off" : 0 : "Starts stopped"
	]
]

//======================================================================
//
// MONSTERS
//
//======================================================================
@baseclass base(Appearflags,Targetname,Target,Target2) 
flags(Angle) color(220 0 0) offset(0 0 24) = Monster [
	spawnflags(flags) = [
		1 : "Ambush" : 0 : "Wakeup when player is seen"
		8 : "No Sightsound" : 0 : "No wakeup sight sound"
		16 : "NoIdle" : 0 : "No idle sounds (cupboard monster)"
		32 : "NoGFX" : 0 : "No teleport spawn effect or sound"
		64 : "Delay Spawn" : 0 : "Will wait for trigger before spawning"
		128 : "Angry" : 0 : "Will spawn angry at the player"
		32768 : "Can Drown" : 0 : "Monster will drown underwater (if not swimmer)"
	]
	angrytarget(target_destination) : "Angry target"
	event(target_destination) : "Follow target"
	deathtarget(target_destination) : "Death target"
	health(integer) : "Amount of Health" :  : "Override health defined in QC"
	exactskin(integer) : "Model Skin number" :  : "Override default skin (no range check)"
	upgrade_axe(choices) : "Axe Upgrade" = [
		 0 : "Do Nothing"
		 1 : "Only spawn if got upgrade"
	]
	upgrade_ssg(choices) : "Shotgun Upgrade" = [
		 0 : "Do Nothing"
		 1 : "Only spawn if got upgrade"
	]
	upgrade_lg(choices) : "Lightning Gun Upgrade" = [
		 0 : "Do Nothing"
		 1 : "Only spawn if got upgrade"
	]
	nomonstercount(choices) : "Monster Count Total" = [
		 0 : "Default"
		 1 : "No Counter"
	]
	delaymonstercount(integer) : "Exclude from initial monster count, wait for delay spawn"
	infightextra(integer) : "Infighting Damage" :  : "Damage multiplier when infighting"
	pain_ignore(choices) : "Monster Pain" = [
		 0 : "Default"
		 1 : "Ignore"
	]
	noinfighting(choices) : "Monster Infighting" = [
		 0 : "Default"
		 1 : "Ignore"
	]
	no_liquiddmg(choices) : "Slime/Lava Damage" = [
		 0 : "Default"
		 1 : "No Damage"
	]
	no_zaware(choices) : "Monster Z Aware" = [
		 0 : "Default"
		 1 : "Disabled"
	]
	bboxtype(choices) : "Bounding Box Override" = [
		 0 : "Default"
		 1 : "Tiny"
		 2 : "Square"
		 3 : "Flat"
		 4 : "Short"
		 5 : "Tall"
		 6 : "XTall"
		 7 : "Wide"		
		 8: "Giant"
		 9 : "WideFlat"
		 10 : "Massive"
		 11 : "Golem"
		 12 : "Dog"
		 13 : "Shade"
		 14 : "Fish"
		 15 : "FishSmall"
		 16 : "Eel"
		 17 : "Wyrm"
		 18 : "Ryu"
		 19 : "Hydra"
		 20 : "Willy"
		 21 : "Cyber"
		 22 : "Anaconda"
		 23 : "Justice"
		 24 : "Psyder"
		 25 : "XMassive"
		 26 : "BrkTiny"
		 27 : "Shalboss"
	]
	gibondeath(choices) : "Gib/Explode on Death" = [
		 0 : "Default"
		 1 : "Explode on death"
	]
	bodyfadeaway(integer) : "Body fade time" :  : "Time (secs) before body/head fades"
	movespeed(choices) : "Monster Movement(turret)" : : "-1 = no movement(turret), =0/1 free movement (default)" = [
		0 : "Default"
	   -1 : "Stationary(turret)"
		1 : "Free roam"
	]
	turrethealth(integer) : "Health % (for release (0.0->1.0)" : : "Percentage of monster health remaing to release the monster(turret) from being stationary." 
	turrettarget(target_destination) : "Trigger on turret % HP release"
	cooponly(choices) : "Coop Only" = [
		 0 : "No, spawns normally"
		 1 : "Yes, only in coop"
	]
	passive_state(choices) : "Passive Mode" = [
		 0 : "Default Nonpassive"
		 1 : "Passive"
	]
	passive_resethp(choices) : "Reset Health When Returning" = [
		 0 : "Don't Reset Health"
		 1 : "Reset Health"
	]
	passive_resettimer(integer) : "Time to reset passive(def=0)"
	angles(angle) : "Pitch Yaw Roll (set Y to -1 for random)"
	alignment(choices) : "Alignment" = [
		 0 : "Evil (Default)"
		 1 : "Good (players are always good)"
		 2 : "Neutral (don't care unless bothered)"
	]
	temperament(choices) : "Temperament" = [
		 0 : "Angry (Default)"
		 1 : "Cowardly (follows leaders)"
		 2 : "Passive"
		 3 : "Calm (follows leaders)"
		 4 : "Psychotic"
	]
	vulnerability(choices) : "Same Side Vulnerability" = [
		 0 : "Full (Normal)"
		 1 : "Half (Resistant)"
		 2 : "Invulnerable (Seraphic)"
		 3 : "Undead (Seraphic to Same Group and Zombies, Resistant to Others)"
	]
]
@baseclass base(Monster) size(-16 -16 -24, 16 16 16) = MonTiny []
@baseclass base(Monster) size(-20 -20 -20, 20 20 20) = MonSquare []
@baseclass base(Monster) size(-20 -20 -24, 20 20 16) = MonDog []
@baseclass base(Monster) size(-32 -32 -24, 32 32 64) = MonDemon []
@baseclass base(Monster) size(-16 -16 -24, 16 16 24) = MonFish []
@baseclass base(Monster) size(-12 -12 -16, 12 12 16) = MonFishS []
@baseclass base(Monster) size(-32 -32 -24, 32 32 64) = MonGolem []
@baseclass base(Monster) size(-16 -16 -24, 16 16 32) = MonShort []
@baseclass base(Monster) size(-16 -16 -24, 16 16 40) = MonTall []
@baseclass base(Monster) size(-16 -16 -24, 16 16 64) = MonXTall []
@baseclass base(Monster) size(-32 -32 -24, 32 32 64) = MonWide []
@baseclass base(Monster) size(-24 -24 -24, 24 24 22) = MonFlat []
@baseclass base(Monster) size(-32 -32 -24, 32 32 24) = MonWideFlat []
@baseclass base(Monster) size(-24 -24 -24, 24 24 64) = MonGiant []
@baseclass base(Monster) size(-32 -32 -24, 32 32 64) = MonMassive []
@baseclass base(Monster) size(-48 -48 -24, 48 48 84) = MonArmagon []
@baseclass base(Monster) size(-48 -48 -24, 48 48 24) = MonManticore []
@baseclass base(Monster) size(-64 -64 -512, 64 64 256) = MonVermis []
@baseclass base(Monster) size(-46 -40 -24, 46 40 100) = MonShalboss []

@baseclass base(Monster) = JumpingMon [
	jumpdist(vector) : "Jump distance - x 0 y - x being jump distance and y jump height"
	jumprange(vector) : "Range at which the monster will attempt a jump attack - x y 0, for example 200 300 0, which means the monster will attempt jumps when the player is between 200 and 300 units from it"
]

@PointClass base(MonArmagon) studio("progs/hipnotic/armabody.mdl") = monster_armagon : "Armagon" []
@PointClass base(MonShort) studio("progs/ad171/mon_soldier.mdl") skin(0) = monster_army : "Grunt" []
@PointClass base(MonTall) studio("progs/mon_axeman.mdl") = monster_axeman : "Axe Knight" []
@PointClass base(MonShort) studio("progs/lunaran/axegrunt.mdl") = monster_axegrunt : "Axe Solider" []
@PointClass base(MonShort) studio("progs/kinn/sgrunt.mdl") = monster_super_grunt : "Super Solider" []
@PointClass base(MonShort) studio("progs/ad171/mon_soldier.mdl") skin(4) = monster_army_rocket : "Rocket Soldier" []
@PointClass base(MonShort) studio("progs/ad171/mon_soldier.mdl") skin(6) = monster_army_grenade : "Grenade Soldier" []
@PointClass base(MonShort) studio("progs/ad171/mon_soldier.mdl") skin(8) = monster_army_plasma : "Plasma Soldier" []
@PointClass base(MonShort) studio("progs/ad171/mon_soldier.mdl") skin(10) = monster_army_spike : "Nail Soldier" [
	spawnflags(Flags) = [
		8192 : "Lava Nails" : 0
	]
]
@PointClass base(MonShort) studio("progs/ad171/mon_soldier.mdl") = monster_soldier : "Soldier" []
@PointClass base(MonShort) studio("progs/ad171/mon_soldier.mdl") = monster_soldier_elite : "Elite Soldier" []

@PointClass base(MonShort) studio("progs/lieutenant/enforce2.mdl") = monster_super_enforcer : "Lieutenant Enforcer" [
	spawnflags(Flags) = [
		8192 : "Lava Nails" : 0
	]
]
@PointClass base(MonShort) studio("progs/drake/soldier.mdl") skin(4) = monster_army_cyborg : "Soldier" []
@PointClass base(MonTiny) studio("progs/hipnotic/mon_spikmine.mdl") skin(8) = monster_spikemine : "Spike Mine" []
@PointClass base(MonFlat) studio("progs/hipnotic/mon_scor.mdl") = monster_scourge : "Centroid" [
	spawnflags(Flags) = [
		8192 : "Lava Nails" : 0
	]
]
@PointClass base(MonTall) studio("progs/rogue/mon_sword.mdl") = monster_sword : "Invisible Swordsman" [
	delay(integer) : "Delay before attack" : 10
]
@PointClass base(MonWide) studio("progs/rogue/mon_lavaman.mdl") = monster_lava_man : "Hephesteus" [
	spawnflags(Flags) =
	[
		2 : "Asleep" : 2
	]
]
//----------------------------------------------------------------------
//----------------------------------------------------------------------
@PointClass base(MonDemon) studio("progs/mon_demon.mdl") = monster_demon1 : "Fiend" [
	poisonous(integer) : "Poison attack+skin" : : "Change skin + poison dmg"
]
@PointClass base(MonManticore) studio("progs/madfox/mon_manticore.mdl") = monster_manticore : "Manticore" []
@PointClass base(MonManticore) studio("progs/madfox/mon_manticore.mdl") skin(1) = monster_lichfiend : "Lich Fiend" []
@PointClass base(MonDog,JumpingMon) studio("progs/mon_dog.mdl") = monster_dog : "Nasty Doggie" []
@PointClass base(MonFlat,JumpingMon) studio("progs/hipnotic/grem.mdl") = monster_gremlin : "Gremlin" []
@PointClass base(MonTiny) studio("progs/ad171/mon_eel.mdl") = monster_eel : "Eel" [
	spawnflags(flags) = [ 4 : "Liquid Blocks Sight" : 0 ]
]
@PointClass base(MonTall) studio("progs/madfox/mon_octa.mdl") = monster_octa : "Octopus" [
	spawnflags(flags) = [ 4 : "Liquid Blocks Sight" : 0 ]
]

@PointClass base(MonFish) studio("progs/extras_r5/hydra.mdl") = monster_hydra : "Hydra" [
	spawnflags(flags) = [ 4 : "Liquid Blocks Sight" : 0 ]
]
//----------------------------------------------------------------------
@PointClass base(MonFish) studio("progs/ad171/mon_fish.mdl") = monster_fish : "Rotfish" [
	spawnflags(flags) = [
		2 : "Small" : 0
		4 : "Liquid Blocks Sight" : 0
	]
]

@PointClass base(MonFlat) studio("progs/madfox/mon_flytrap.mdl") = monster_flytrap_ground : "Flytrap Trap" []
@PointClass base(MonTall) studio("progs/madfox/mon_flytrap_standing.mdl") = monster_flytrap : "Flytrap Plant" []

@PointClass base(MonFish) studio("progs/madfox/mon_fragy.mdl") = monster_frog : "Frog" []
@PointClass base(MonDog) studio("progs/hexen2/mon_sheep.mdl") = monster_sheep : "Sheep" []
@PointClass base(MonFishS) studio("progs/madfox/mon_swarm.mdl") = monster_beez : "Swarm of Beez" []
@PointClass base(MonFish) studio("progs/heretic2/mon_ogle.mdl") = monster_ogle : "Ogle" [
	spawnflags(flags) = [ 4 : "Flesh Mining Sounds" : 0 ]
]

@PointClass base(MonGolem) studio("progs/ad171/mon_golem.mdl") = monster_golem : "Golem" [
	spawnflags(flags) = [ 
		2 : "Start as Statue" : 0
		4 : "Melee+Stomp Only" : 0
	]
	frame(integer) : "Statue Pose def=48" :  : "Override statue pose"
	pos1(string) : "Statue Idle range" :  : "X->Y, Z=0 ; Idle animation range to pick from"
]

@PointClass base(MonTall) studio("progs/qmaster/mon_enforcer.mdl") skin(0) = monster_enforcer : "Enforcer" [
	spawnflags(flags) = [ 
		2 : "Mega" : 0
		4 : "Ultra" : 0
	]
]
@PointClass base(MonTall) studio("progs/qmaster/mon_enforcer.mdl") skin(4) = monster_defender : "Defender" []
@PointClass base(MonTall) studio("progs/qmaster/mon_enforcer.mdl") skin(6) = monster_eliminator : "Eliminator" [
	attack_sniper(integer) : "Unlimited ATTACK Range"
]

@PointClass base(MonTall) studio("progs/qmaster/mon_enforcer.mdl") skin(15) = monster_commando : "Commando" [
	attack_sniper(integer) : "Unlimited ATTACK Range"
]

@PointClass base(MonTall) studio("progs/qmaster/mon_enforcer.mdl") skin(13) = monster_gunner: "Chaingunner" []

@PointClass base(MonTall) studio("progs/ad171/mon_fumigator.mdl") = monster_fumigator : "Fumigator" []
@PointClass base(MonTall) studio("progs/ad171/mon_pyro.mdl") = monster_pyro : "Pyro" []
@PointClass base(MonTall) studio("progs/ad171/mon_centurion.mdl") = monster_centurion : "Centurion" []
@PointClass base(MonShort) studio("progs/ad171/mon_jim.mdl") = monster_jim : "Jim"
[ spawnflags(flags) = [ 4 : "Rockets" : 0 ] ]
@PointClass base(MonShort) studio("progs/drake/drone1.mdl") = monster_drone : "Jim" []

@PointClass base(MonXTall) studio("progs/ad181/mon_floyd.mdl") = monster_floyd : "Floyd" [
	spawnflags(flags) = [ 
		2 : "Rolling" : 0
		4 : "Asleep" : 0
	]
]

//----------------------------------------------------------------------
@PointClass base(MonShort) studio("progs/ad171/mon_knight.mdl") = monster_knight : "Knight. Uses upgraded AD model." + 
" Part of the Death Brigade.  Stronger than a death guard but still" +
" useful for early on axe combat. Capable of starting as a statue which uses a stone skin." [
	spawnflags(flags) = [ 
		2 : "Stone Statue" : 0
		4 : "Not Frozen" : 0
	]
	frame(integer) : "Statue Pose def=44" :  : "Override statue pose"
	pos1(string) : "Statue Idle range" :  : "X->Y, Z=0 ; Idle animation range to pick from"
]
@PointClass base(MonTall) studio("progs/qmaster/mon_hknight.mdl") = monster_hell_knight : "Hell knight" [
	spawnflags(flags) = [ 
		2 : "Stone Statue" : 0
		4 : "Not Frozen" : 0
	]
	frame(integer) : "Statue Pose def=73" :  : "Override statue pose"
	pos1(string) : "Statue Idle range" :  : "X->Y, Z=0 ; Idle animation range to pick from"
]
@PointClass base(MonTall) studio("progs/q15/warlord.mdl") = monster_hell_knight2 : "Warlord" []

@PointClass base(MonTall) studio("progs/qmaster/mon_hknight.mdl") = monster_hell_pointknight : "Hell knight" [
	spawnflags(flags) = [ 
		2 : "Stone Skin" : 0
		128: "GGGGGGGGGGGGG
G
GN/A" : 0
0GGGGG	]
	target(target_destination) : "target" :  : "target for electricity"
	target2(target_destination) : "target2" : : "trigger to fire no pointing"
	t_length(integer) : "target random wobble" : : "0 = default 5"
	dmg(integer) : "target contact damage" : : "0 = default 5"
	pos1(string) : "XYZ lightning offset" : : "uses v_forward/v_right/v_up"
	pos2(string) : "XYZ lightning random" : : "uses v_forward/v_right/v_up"
	pos3(string) : "Animation frame set" : : "Start/Finish/Direction"
]
@PointClass base(MonTall) studio("progs/qmaster/mon_hknight.mdl") skin(3) = monster_hell_knight_champion : "Champion knight" [
	skin(integer) : "Skin (def=3)"
]
@PointClass base(MonTall) studio("progs/lieutenant/hknight.mdl") = monster_hell_knight_enforcer : "Saber Enforcer" []
@PointClass base(MonShort) studio("progs/ad171/mon_dguard.mdl") = monster_dguard : "Death Guard (AD) " +
"Very weak guard with a sword. Part of the Death Brigade." +
"Good for placing early on for axe only combat or as support." []
@PointClass base(MonTall) studio("progs/quoth/dguard.mdl") = monster_death_guard : "Death Guard (Quoth) " +
"Stronger than a typical knight.  Part of the Death Brigade.  " +
"Armed with a sword and also can shoot an exploding fireball." []
@PointClass base(MonShort) studio("progs/ad171/mon_dcrossbow.mdl") = monster_dcrossbow : "Crossbow Knight"[ 
  	spawnflags(flags) = [
		2 : "Sniper" : 0
		4 : "Tracking" : 0 
	]
]

@PointClass base(MonTall) studio("progs/ad171/mon_dknight.mdl") = monster_dknight : "Death Knight" []
@PointClass base(MonTall) studio("progs/qmaster/mon_hknight.mdl") skin(7) = monster_death_lord : "Death Lord" []
@PointClass base(MonTall,JumpingMon) studio("progs/ad171/mon_dfury.mdl") = monster_dfury : "Fury Knight" []
@PointClass base(MonTall) studio("progs/ad171/mon_dsergeant.mdl") = monster_dsergeant : "Sergeant Knight" []

@PointClass base(MonGolem) studio("progs/q15/dfury_boss.mdl") = monster_dfury_boss : "Brigade Commander" [
	spawnflags(flags) = [ 
		2 : "Stone Statue" : 0
		4 : "Global Monster Genocide on Death" : 0
	]
]

@PointClass base(MonTiny) studio("progs/quoth/sentinel.mdl") = monster_sentinel : "Sentinel" [
	spawnflags(flags) = [
		4 : "Nails" : 0
	]
]
//----------------------------------------------------------------------
@PointClass base(MonWide) studio("progs/ogre.mdl") = monster_ogre : "Ogre" [
	spawnflags(flags) = [
		2 : "Multi-grenades" : 0
		4 : "Green Skin" : 0
		4096 : "Shoot Nails" : 0
	]
]

@PointClass base(MonWide) studio("progs/nehahra/libogre.mdl") = monster_oglib : "Ogre Librarian" []

//_____Fishing OGRE needs some spawnflags and keys removed_____
@PointClass base(MonWide) studio("progs/ad171/mon_ogrefish.mdl") = monster_ogre_fishing : "Ogre Fishing" 
[spawnflags(flags) = [ 4 : "Green Skin" : 0 ] ]
//_____Ghost Ogre has Limited Settings_____
@PointClass base(TrigOFF,Appearflags,Targetname) studio("progs/ad171/mon_ogrefish.mdl") = monster_ogre_fishing_ghost : "Ghost Ogre Fishing" [
    spawnflags(flags) = [
		32 : "NoGFX" 		
	] 		
]     

@PointClass base(MonWide) studio("progs/ogre.mdl") skin(1) = monster_ogre_multi : "Ogre Multi-Grenade" []
@PointClass base(MonWide) studio("progs/ogre.mdl") skin(1) = monster_ogre_flak : "Flak Ogre" [
	spawnflags(flags) = [
		4 : "Lava Flak" : 0
	] 
]
@PointClass base(MonWide) studio("progs/ad171/mon_hogre.mdl") = monster_hogre : "Hunter Ogre"
[ spawnflags(flags) = [ 4 : "Metal Skin" : 0 ] ]
@PointClass base(MonWide) studio("progs/ad171/mon_hogremac.mdl") = monster_hogremac : "Hunter Ogre Mace"
[ spawnflags(flags) = [ 4 : "Metal Skin" : 0 ] ]
@PointClass base(MonWide) studio("progs/ad171/mon_hogreham.mdl") = monster_hogreham : "Hunter Ogre Hammer"
[ spawnflags(flags) = [ 4 : "Metal Skin" : 0 ] ]

//----------------------------------------------------------------------
@PointClass base(MonGiant) studio("progs/quoth/drole.mdl") = monster_drole : "Drole" []
@PointClass base(MonGiant) studio("progs/ad171/mon_minotaur.mdl") = monster_minotaur : "Minotaur"
	spawnflags(flags) = [
		2 : "Nethergoat (Kinn shuffler)"
		4 : "Minions" : 0
	]
@PointClass base(MonTall) studio("progs/rogue/mon_morph_az.mdl") = monster_morph : "Mighty Morphin Power Smurf"
[
	spawnflags(Flags) = 
	[
		1 : "Ambush" : 0
		2 : "Aztec" : 1
		4 : "Egyptian" : 0
		8 : "Greek" : 0
	]
]
@PointClass base(MonWide) studio("progs/ad171/mon_shalrath.mdl") = monster_shalrath : "Shalrath"
[ spawnflags(flags) = [ 4 : "Minions" : 0 ] ]

@PointClass base(MonWide) studio("progs/q15/shalrath_boss.mdl") = monster_shalrath_boss : "Shalrath Queen" []

@PointClass base(MonGiant) studio("progs/quoth/edie.mdl") = monster_freddie : "Freddie" [
	spawnflags(flags) = [
		2 : "Laser" : 0
	]
]
@PointClass base(MonGiant) studio("progs/quoth/edie.mdl") = monster_edie : "Eddie" [
	spawnflags(flags) = [
		2 : "Laser" : 0
	]
]
@PointClass base(MonGiant) studio("progs/ad171/mon_seeker.mdl") = monster_seeker : "Seeker" [
	spawnflags(flags) = [
		4 : "Shield" : 0
	]
	state(choices) : "Arm setup" = [
		0 : "Both Arms (def)"
		1 : "Left Arm"
		2 : "Right Arm"
	]
	target2(target_destination) : "target2" : : "triggered when shield turned off"
]

@PointClass base(MonMassive) studio("progs/ad171/mon_shambler.mdl") = monster_shambler : "Shambler" [
	poisonous(integer) : "Poison attack+skin" : : "Change skin + poison dmg"
	attack_sniper(integer) : "Unlimited ATTACK Range"
	spawnflags(flags) = [
		2 : "Vile (monster_shamvile)" : 0
	]
]

@PointClass base(MonMassive) studio("progs/drake/shambler.mdl") skin(1) = monster_shamvile : "Sha'Vile" [
	attack_sniper(integer) : "Unlimited ATTACK Range"
	lip(choices) : "Allow Reviving" = [
		0 : "Revives Dead Friends"
		1 : "No Revives (soe2m6)"
	]
]

@PointClass base(MonMassive) studio("progs/ad171/mon_bossboglord.mdl") = monster_boglord : "Boglord" [
	spawnflags(flags) = [
		2 : "Strong (Red)" : 0
	]
]

@PointClass base(MonWide) studio("progs/q15/carnivean.mdl") = monster_carnivean : "Carnivean" []

@PointClass base(MonTiny) studio("progs/ad171/mon_lostsoul.mdl") = monster_lostsoul : "Lost Soul" []
@PointClass base(MonTiny,JumpingMon) studio("progs/ad171/mon_spiderb.mdl") = monster_spider : "Spider" [
	spawnflags(flags) = [ 
		2 : "Large Green" : 0
		4 : "On Ceiling" : 0 
	]
]
@PointClass base(MonTiny) studio("progs/spider.mdl") = monster_wspider : "Willy the Spider" []
@PointClass base(MonTiny,JumpingMon) studio("progs/ad171/mon_scorpion.mdl") = monster_scorpion : "Scorpion"
[ spawnflags(flags) = [ 4 : "Stinger" : 0 ] ]
@PointClass base(MonTiny,JumpingMon) studio("progs/ad171/mon_voreling.mdl") = monster_voreling : "Voreling"
[ spawnflags(flags) = [ 4 : "On Ceiling" : 0 ] ]
@PointClass base(MonTiny,JumpingMon) studio("progs/ad171/mon_swamplingp.mdl") = monster_swampling : "Voreling"[
  	spawnflags(flags) = [
		2 : "Large" : 0
		4 : "On Ceiling" : 0 
	] 
]

@PointClass base(MonTiny) studio("progs/ad171/mon_boil.mdl") = monster_boil : "Boil" [
  	spawnflags(flags) = [
		2 : "Hanging" : 0
		4 : "Hobbled/Laying" : 0 
	]
]


//----------------------------------------------------------------------
@PointClass base(MonTall) studio("progs/qmaster/mon_tarbaby.mdl") = monster_tarbaby : "Tarbaby"
[ spawnflags(flags) = [ 4 : "Jump Less" : 0 ] ]

@PointClass base(MonTall) studio("progs/qmaster/mon_tarbaby.mdl") skin(1) = monster_tarbaby_mitosis : "Self-Replicating Tarbaby"
[ spawnflags(flags) = [ 4 : "Jump Less" : 0 ] ]

@PointClass base(MonWideFlat) studio("progs/drake/vomitus.mdl") = monster_vomitus : "Vomitus" []
@PointClass base(MonWideFlat) studio("progs/drake/vomitus.mdl") skin(1) = monster_meatwad : "Vomitus Meatwad" []

//----------------------------------------------------------------------
@PointClass base(MonTall) studio("progs/wizard.mdl") = monster_wizard : "Wizard"
[ spawnflags(flags) = [ 4 : "Always Above" : 0 ] ]
@PointClass base(MonTall) studio("progs/rogue/wrath.mdl") = monster_wrath : "Wrath" []
@PointClass base(MonTall) studio("progs/nehahra/wraith.mdl") = monster_voidwraith : "Void Wraith" []
@PointClass base(MonTall) studio("progs/rogue/s_wrath.mdl") = monster_super_wrath : "Wrath" []
@PointClass base(MonTall) studio("progs/ad171/mon_wraith.mdl") = monster_wraith : "Wraith"
[ spawnflags(flags) = [ 
		2 : "Scorpions" : 0
		4 : "Spiders" : 0
		8192 : "No Fire Debuff" : 0
	]
]
@PointClass base(MonWide) studio("progs/q15/reiver.mdl") skin(0) = monster_reiver : "Gorram Reiver" []

@PointClass base(MonTall) studio("progs/ad171/mon_skullwiz.mdl") = monster_skullwiz : "Skull Wizard"
[ spawnflags(flags) = [ 
		2 : "Guardian" : 0 
		4 : "Minions" : 0 
	]
]
@PointClass base(MonTall) studio("progs/ad171/mon_gargoyle.mdl") = monster_gargoyle : "Gargoyle" [
	spawnflags(flags) = [ 
		2 : "Statue" : 0
		4 : "Perch" : 0 
	]
	skin(integer) : "Skin"
]
@PointClass base(MonTall) studio("progs/mon_impling.mdl") = monster_impling : "Impling" [
	spawnflags(flags) = [ 
		2 : "Statue" : 0
		4 : "Perch" : 0 
	]
	skin(integer) : "Skin"
]

@PointClass base(MonTall) studio("progs/quoth/gaunt.mdl") = monster_gaunt : "Gaunt" [
	spawnflags(flags) = [ 
		2 : "Quoth Lightning" : 0
		4 : "Perch" : 0
	]
]

@PointClass base(MonShort) studio("progs/madfox/mon_zerstorer.mdl") skin(6) = monster_zerstorer : "Zerstorer" []

@PointClass base(MonShort) studio("progs/ad171/mon_zombie.mdl") skin(6) = monster_zombiep : "Poison Zombie"
[ spawnflags(flags) = [ 4 : "On Floor" : 0 ] ]
@PointClass base(MonShort,JumpingMon) studio("progs/ad171/mon_zombiek.mdl") = monster_zombiek : "Zombie Knight"
[ spawnflags(flags) = [ 4 : "On Floor" : 0 ] 
	poisonous(choices) : "Is Monster Poisonous" = [
		0 : "Normal"
		1 : "Poisonous"
	]
]
@PointClass base(MonShort) studio("progs/ad171/mon_zombie.mdl") = monster_zombie : "Zombie"
[ spawnflags(flags) = [ 
		1 : "Crucified" : 0
		2 : "Ambush" : 0
		4 : "OnFloor" : 0
	]
	sequence(choices) : "Pose (editor)" = [
		0 : "Normal"
		173 : "OnFloor"
		192: "Crucified"
	]
]

@PointClass base(MonShort) studio("progs/rogue/mon_mummy.mdl") = monster_mummy : "Mummmy" [
	spawnflags(flags) = [ 
		2 : "Ambush" : 0
		4 : "OnFloor" : 0
	]
	sequence(choices) : "Pose (editor)" = [
		0 : "Normal"
		172 : "OnFloor"
	]
]

//----------------------------------------------------------------------
@PointClass base(MonTiny) studio("progs/ad171/mon_gargoyle.mdl") = monster_minotaurminion : "Gargoyle Minion" []
@PointClass base(MonGolem) studio("progs/ad171/mon_golem.mdl") = monster_necrominiongolem : "Golem Minion" []
@PointClass base(MonTiny,JumpingMon) studio("progs/ad171/mon_voreling.mdl") = monster_shalrathminion : "Voreling Minion" []
@PointClass base(MonTiny) studio("progs/ad171/mon_lostsoul.mdl") = monster_skullwizminion : "Lost Soul Minion" []
@PointClass base(MonTiny,JumpingMon) studio("progs/ad171/mon_spiderb.mdl") = monster_wraithminion : "Spider Minion" []
@PointClass base(MonTiny,JumpingMon) studio("progs/ad171/mon_scorpion.mdl") = monster_wraithminion2 : "Scorpion Minion" []
@PointClass base(MonTiny) studio("progs/wizard.mdl") = monster_nourminion : "Wizard Minion" []
@PointClass base(MonTall) studio("progs/quoth/gaunt.mdl") = monster_judgeminion : "Gaunt Minion, used for precache only" []

@PointClass base(Monster) size(-32 -32 -24, 60 60 300) studio("progs/nehahra/nehah.mdl") = monster_nehahra : "Nehahra" []

//----------------------------------------------------------------------
@PointClass base(Monster) size(-128 -128 -24, 128 128 256) studio("progs/boss.mdl") = monster_boss : "Chthon" []
@PointClass base(Monster) size(-128 -128 -24, 128 128 256) studio("progs/ad171/mon_bosschthon.mdl") = monster_firetopboss : "Chthon (Less dmg Fballs)" [
	targetname(string) : "Monster Name (needed to activate)"
	noise1(string) : "Name, Death Lightning Start"
	noise2(string) : "Name, Death Lightning End"
]
@PointClass size(-80 -80 -24, 80 80 256) studio("progs/ad171/mon_bosschthon.mdl") = monster_chthon : "Chthon"
[
	spawnflags(flags) = [ 
		2 : "Evil Red" : 0
		4 : "Green" : 0
	]
	targetname(string) : "monster / trigger name"
	target(string) : "Wave Final trigger"
	bosswave(integer) : "Total boss waves (1-5)"
	bosswaveqty(integer) : "Health each wave"
	resist_shells(integer) : "Shell resistance (0-1)"
	resist_nails(integer) : "Nail resistance (0-1)"
	resist_rockets(integer) : "Rocket reistance (0-1)"
	resist_cells(integer) : "Cell resistance (0-1)"
	pos1(string) : "Att1 Speed Base/Skill/- (250 50 0)"
	pos2(string) : "Att1 Dmg Base/Rnd/Splash (100 20 120)"
	pos3(string) : "Att2 Forward/Up/Dmg (300 500 40)"
	dest2(string) : "Att2 Spawn location (0 0 96)"
	noise1(string) : "Wave 1 trigger"
	noise2(string) : "Wave 2 trigger"
	noise3(string) : "Wave 3 trigger"
	noise4(string) : "Wave 4 trigger"
	deathtype(string) : "Death message (optional)"
	passive_state(choices) : "Passive Mode" = [
		 0 : "Default Nonpassive"
		 1 : "Passive"
	]
]
@PointClass base(Monster) size(-16 -16 -24, 16 16 32) studio("progs/oldone.mdl") = monster_oldone : "Shub-Niggurath" []
@PointClass base(Targetname,Appearflags,Target) size(-12 -12 -24, 12 12 128) studio("progs/q15/oldone_tent.mdl") = monster_oldone_tentacle : "Shub Tendril" []
@PointClass size(-128 -128 -24, 128 128 192) studio("progs/oldone.mdl") = monster_shub : "Shub-Niggurath"
[
	spawnflags(flags) = [
		2 : "Trig Dmg" : 0
		8 : "Idle Until 2nd Trigger" : 0
	]
	targetname(string) : "monster / trigger name"
	target(string) : "Wave Final trigger"
	bosswave(integer) : "Total boss waves (1-5)"
	bosswaveqty(integer) : "Health each wave"
	resist_shells(integer) : "Shell resistance (0-1)"
	resist_nails(integer) : "Nail resistance (0-1)"
	resist_rockets(integer) : "Rocket reistance (0-1)"
	resist_cells(integer) : "Cell resistance (0-1)"
	pos1(string) : "Att1 Speed Base/Skill/- (200 20 0)"
	pos2(string) : "Att1 Dmg Base/Rnd/Splash (0 0 40)"
	pos3(string) : "Att2 Forward/Up/Dmg (300 500 40)"
	dest1(string) : "Att1 Spawn location (0 0 128)"
	dest2(string) : "Att2 Spawn location (0 0 128)"
	noise1(string) : "Wave 1 trigger"
	noise2(string) : "Wave 2 trigger"
	noise3(string) : "Wave 3 trigger"
	noise4(string) : "Wave 4 trigger"
	deathtype(string) : "Death message (optional)"
]
@PointClass size(-128 -128 -192, 128 128 24) studio("progs/oldone.mdl") = monster_shubupsd : "Shub Upside Down"
[
	spawnflags(flags) = [
		2 : "Trig Dmg" : 0
		8 : "Idle Until 2nd Trigger" : 0
	]
	targetname(string) : "monster / trigger name"
	target(string) : "Wave Final trigger"
	bosswave(integer) : "Total boss waves (1-5)"
	bosswaveqty(integer) : "Health each wave"
	resist_shells(integer) : "Shell resistance (0-1)"
	resist_nails(integer) : "Nail resistance (0-1)"
	resist_rockets(integer) : "Rocket reistance (0-1)"
	resist_cells(integer) : "Cell resistance (0-1)"
	pos1(string) : "Att1 Speed Base/Skill/- (200 20 0)"
	pos2(string) : "Att1 Dmg Base/Rnd/Splash (0 0 40)"
	pos3(string) : "Att2 Forward/Up/Dmg (600 0 40)"
	dest1(string) : "Att1 Spawn location (0 0 128)"
	dest2(string) : "Att2 Spawn location (0 0 128)"
	noise1(string) : "Wave 1 trigger"
	noise2(string) : "Wave 2 trigger"
	noise3(string) : "Wave 3 trigger"
	noise4(string) : "Wave 4 trigger"
	deathtype(string) : "Death message (optional)"
]
@PointClass size(-16 -16 -24, 16 16 40) studio("progs/ad171/mon_bossnour.mdl") = monster_nour : "Scragmother" [
	targetname(string) : "REQUIRED Targetname"
	target(string) : "Target on Death"
	message(string): "Target on Spawn"
	message2(string):"REQUIRED Rise Point Target"
	noise1(string) : "Wave 1 Trigger"
	noise2(string) : "Wave 2 Trigger"
	noise3(string) : "Wave 3 Trigger"
	tethertarget(string):"REQUIRED Tether Targetname(tether dist=325)"
	tethertimer(integer):"Tether Timer"
]

@PointClass size(-16 -16 -24, 16 16 40) studio("progs/inquisitor.mdl") = monster_inquisitor : "Inquisitor" [
	targetname(string) : "Name"
	target(string) : "Target on Death"
	message(string): "Rise Target"
	message2(string):"Rise Target2"
	noise1(string) : "Wave 1 trigger"
	noise2(string) : "Wave 2 trigger"
	noise3(string) : "Wave 3 trigger"
	tethertarget(string):"Tether Target"
	tethertimer(integer):"Tether Timer"
]

@PointClass size(-32 -32 -24, 32 32 128) studio("progs/ad171/mon_bosseidolon.mdl") skin(1) = monster_eidolon : "Sculptor" [
	targetname(string) : "monster / trigger name"
	target(string) : "Wave Final trigger"
	noise1(string) : "Wave 1 trigger ent"
	noise2(string) : "Wave 2 trigger ent"
	noise3(string) : "Wave 3 trigger ent"
	noise4(string) : "Wave 4 trigger ent"
]
@PointClass base(Appearflags) size(-32 -32 -4, 32 32 4) =
	monster_eidolon_wavetrig : "Eidolon Wave Trigger" [
	targetname(string) : "Name of wave event"
	target(string) : "Trigger Wave Adds"
	target2(string) : "Trigger Event"
	noise(string) : "Collision Model"
]

@PointClass size(-32 -32 -24, 32 32 128) studio("progs/ad171/mon_bossicegolem.mdl") = monster_icegolem : "Ice Golem" [
	targetname(string) : "monster / trigger name"
	target(string) : "Wave Final trigger"
	noise1(string) : "Wave 1 trigger ent"
	noise2(string) : "Wave 2 trigger ent"
	noise3(string) : "Wave 3 trigger ent"
	noise4(string) : "Wave 4 trigger ent"
]
@PointClass base(Appearflags) size(-32 -32 -8, 32 32 8) =
	monster_icegolem_wavetrig : "Ice Golem Wave Trigger" [
	targetname(string) : "Name of wave event"
	target(string) : "Trigger Wave Adds"
	noise1(string) : "Trigger Event 1"
	noise2(string) : "Trigger Event 2"
]

@PointClass base(MonVermis) studio("progs/quoth/vermis.mdl") = monster_vermis : "Vermis" []
@PointClass base(MonMassive) studio("progs/madfox/mon_spellmas.mdl") = monster_spellmaster : "Baseboss (very similar to Virtus boss, not the same)" []
@PointClass base(MonMassive) studio("progs/virtus/newboss.mdl") = monster_virtus: "Virtus Boss"
[
	spawnflags(Flags) = 
	[
		2 : "No Exit Message" : 0
	]
	message(string) : "End Screen Message"
	message2(string) : "End Screen Message 2"
]
@PointClass size(-8 -8 -8, 8 8 8) = info_boss_spot: "Info Virtus Resurface Point" []
@PointClass base(MonGolem) studio("progs/quoth/gug.mdl") = monster_gug : "Gug" []
@PointClass base(MonShort) studio("progs/quoth/polyp.mdl") = monster_polyp : "Polyp" []

@PointClass base(MonWide) studio("progs/drake/dragon.mdl") = monster_dragon : "Dragon" [
	spawnflags(Flags) = 
	[
		2 : "Rogue Behavior" : 0
	]
]

@PointClass base(MonWide) studio("progs/drake/dragon1.mdl") = monster_ryu : "Dragon" [
	spawnflags(Flags) = 
	[
		2 : "Wyrm Boss" : 0
		4 : "Fast" : 0
		8 : "Slow (+Fast=Skill)" : 0
	]
	skin(choices) : "Type" : 0 = [
		0 : "Red (Fire)"
		1 : "Green (Acid)"
		2 : "Blue (Lightning)"
		3 : "White (Ice)"
		4 : "Gold (Fire)"
	]
]

@PointClass base(MonGiant) studio("progs/drake/dragon1.mdl") = monster_ryu_wyrm : "Dragon King" [
	spawnflags(Flags) = 
	[
		2 : "Wyrm Boss (Def)" : 1
		4 : "Fast" : 0
		8 : "Slow (+Fast=Skill)" : 0
	]
	skin(choices) : "Type" : 0 = [
		0 : "Red (Fire)"
		1 : "Green (Acid)"
		2 : "Blue (Lightning)"
		3 : "White (Ice)"
		4 : "Gold (Fire)"
	]
]

@PointClass base(MonWide) studio("progs/drake/shade.mdl") = monster_nightshade : "Nightshade Dragon" []
@PointClass base(Monster) size(-16 -16 -24, 16 16 40) studio("progs/drake/bandit.mdl") = monster_goblin : "Goblin" []
@PointClass base(Monster) size(-16 -16 -24, 16 16 40) studio("progs/drake/bandit.mdl") = monster_bandit : "Bandit" []
@PointClass base(Monster) size(-16 -16 -24, 16 16 40) studio("progs/drake/rebel.mdl") = monster_rebel : "Rebel" []
@PointClass base(Monster) size(-16 -16 -24, 16 16 40) studio("progs/drake/archer.mdl") = monster_archer : "Archer" []
@PointClass base(Monster) size(-16 -16 -24, 16 16 40) studio("progs/drake/archer.mdl") skin(1) = monster_archer_lord : "Archer Lord" []
@PointClass base(MonDog) studio("progs/mon_dog.mdl") skin(3) = monster_hell_hound : "Hell hound" []
@PointClass base(Monster) size(-16 -16 -24, 16 16 40) studio("progs/hknight.mdl") skin(2) = monster_hell_lord : "Hell Lord" []
@PointClass base(Monster) size(-16 -16 -24, 16 16 40) studio("progs/hknight.mdl") skin(3) = monster_hkboss : "Boss Knight" []
@PointClass base(Monster) size(-16 -16 -24, 16 16 40) studio("progs/hknight.mdl") skin(4) = monster_bane : "Bane" []
@PointClass base(Monster) size(-16 -16 -24, 16 16 40) studio("progs/hknight.mdl") skin(6) = monster_dark_lord : "The Dark Lord" [
	spawnflags(Flags) = [
		4 : "Beast (Turns into Dragon)" : 0
	]
]
@PointClass base(MonGiant) studio("progs/anaconda/anaconda.mdl") = monster_anac : "Anaconda" [
	spawnflags(Flags) = 
	[
		2 : "No Force Intermission" : 1
	]
]

@PointClass base(MonWide) studio("progs/snakeman.mdl") = monster_snakeman : "Snakeman" []
@PointClass base(Monster) size(-16 -16 -24, 16 16 40) studio("progs/drake/baron.mdl") = monster_baron : "Baron" [
	spawnflags(Flags) = [
		4 : "No Jump Attacks" : 0
	]
	level(choices) : "Type" : 0 = [
		0 : "Normal"
		1 : "Fire Baron"
		2 : "Earth Baron"
		3 : "Wind Baron"
		4 : "Water Baron"
	]
]
@PointClass base(Monster) size(-16 -16 -24, 16 16 40) studio("progs/drake/nemesant.mdl") = monster_nemesant : "Nemesant" []
@PointClass base(Monster) size(-16 -16 -24, 16 16 40) studio("progs/drake/nemesant.mdl") = monster_troglodyte : "Troglodyte" []
@PointClass base(Monster) size(-16 -16 -24, 16 16 40) studio("progs/drake/nemesant.mdl") skin(1) = monster_trogboss : "Troglodyte Boss" []
@PointClass base(Monster) size(-16 -16 -24, 16 16 40) studio("progs/drake/necro.mdl") = monster_sorceror : "Sorceror" []
@PointClass base(Monster) size(-16 -16 -24, 16 16 40) studio("progs/drake/necro.mdl") = monster_acolyte : "Acolyte" []
@PointClass base(Monster) size(-16 -16 -24, 16 16 40) studio("progs/drake/necro.mdl") = monster_warlock : "Warlock" []

@PointClass base(Monster) size(-16 -16 -24, 16 16 40) studio("progs/drake/necro.mdl") = monster_necromancer : "Necromancer" []
@PointClass base(Monster) size(-16 -16 -24, 16 16 40) studio("progs/hexen2/fangel.mdl") = monster_fallen_angel : "Fallen Angel" []
@PointClass base(Monster) size(-16 -16 -24, 16 16 40) studio("progs/hexen2/fangel.mdl") skin(1) = monster_fallen_angel_lord : "Fallen Angel" []
@PointClass base(Monster) size(-32 -32 -24, 32 32 64) studio("progs/drake/cyber.mdl") = monster_cyberdemon : "Cyberdemon" []


//Patch2 addition unfinished... closer!!!

// @PointClass base(Monster) size(-16 -16 -24, 16 16 24) studio("progs/ad181/mon_sweeper.mdl") = monster_sweeper : "Slow moving flying robot, 200 health points." [
	// spawnflags(flags) = [
		// 2 : "Lasers" : 0
		// 4 : "Shield" : 0
	// ]
// ]
// @PointClass base(Monster) size(-32 -32 -48, 32 32 48) studio("progs/ad181/mon_psyder.mdl") = monster_psyder : "Psychic / Psionic stationary dream node, 1200 health points." []
// @PointClass base(Monster) size(-32 -32 -24,32 32 96) color(192 0 192) studio("progs/ad181/mon_mammoth1.mdl") = monster_mammoth : "Slow moving mini boss robot, 1200 health points." []

//_____BAL TURRET _____
@baseclass = turretbal_unique [

//----- turretbal unique-----
	
	t_length(integer) : "Axis  Restriction (horizontal)" : : "Axis restriction for ceiling/floor version"
	t_width(integer)  : "Axis  Restriction (vertical)" : :  "Axis restriction for wall version"
	attack_count(choices) : "Fire Rate" : : "-1 to disable increased fire rate" = [
	 	 0 : "Default"
	   -1 : "Decreased"
	]
	turretclosing(target_destination) : "Targets fired(closing)" :  : "target(s) fired when turret hides back wall/ceil/floor"
	turretopening(target_destination) : "Targets fired(opening)" :  : "Target(s) fired when turret is coming out to play"
	turretlocked(integer) : "Turret Locked (open)" :  : "Turret will not hide and remain in combat"
	distance(integer) : "Receding Range (def=600)" : : "The range at which the turret will hide (def=600)"
	waitmin3(integer) : "Startup Delay (def=2s)" : : "Time (def=2s) startup delay when spawning at start of map"
	waitmin(integer) : "Closing Delay (def=2s)" : : "Time (def=2s) to pause before hiding if cannot see enemy"
	waitmin2(integer) : "Opening Delay (def=2s)" : : "Time (def=2s) to wait hidden before coming out again"
	wakeup_angle(integer) : "Wakeup Angle Lock (closed)" : : "Angle lock boundary adjustment when turret is closed"		
]
// @PointClass base(turretbal_unique, Monster) size(-20 -20 -20,20 20 20) studio("progs/ad181/mon_turretbal.mdl") = monster_turretbal : "Large surface mount turret, 180 health points." [
	// spawnflags(flags) = [
		// 2 : "Triple" : 0 : "Fire triple shot vs single (powerful blast attack)"
	    // 4 : "Plasma" : 0 : "Fire plasma bolts vs laser (high damage)"
	// ]
// ]

@PointClass base(Monster) size(-16 -16 -24, 16 16 40) studio("progs/ad181/mon_dprince.mdl") = monster_dprince : "Dark Prince, Mini Boss! (1200 health points)" [
	spawnflags(flags) =[
		2 : "Fire Attack" : 0 : "Fire attack vs Plasma" 
	]	
	attack_lifetime(integer) : "Attack Lifetime (secs)" : : "Time that plasma/fire will stay active on floor for damage"
]
@PointClass base(Monster) size(-16 -16 -24, 16 16 40) color(0 255 128) studio("progs/ad181/mon_deflector.mdl") = monster_megaforce : "A Mega Enforcer, 400 health points." []
@PointClass base(Monster) size(-16 -16 -24, 16 16 40) color(0 255 128) studio("progs/ad181/mon_deflector.mdl") = monster_deflector : "The Deflector, 1200 health points." [
	spawnflags(flags) = [ 2 : "Plasma" : 0 : "Plasma Deflector" ]
	attack_rage(integer) : "Burst mode for flame/plasma attack (def=ON, 1=ON, -1=OFF)"
	proj_limit(integer) : "Maximum amount of sprite flames active (def=64, burst=32)"
	proj_attqty(integer) : "Proj Count = Base (X) * (Skill * Y) Maximum = Z (def='3 2 7')"
	dpp_flame(integer) : "Random chance of extra particles on flame (def=0.02)"
	part_exitpuff(integer) : "When flame sprite is finished show puff of smoke (def=ON)"
	part_exitsound(integer) : "Clear all sound channels when flame is finished (def=ON)"
]

@PointClass base(Monster, JumpingMon) size(-32 -32 -24,32 32 64) color(192 0 192) studio("progs/ad181/mon_judge.mdl") = monster_judicator : "The Judicator, BOSS setup with multiple waves" [
	spawnflags(flags) = [
		4 : "Blue Flames" : 0 : "Flame attacks use blue sprites and explosions"
	]
	tethertarget(string) : "target of tether entity for tethering system (required!)"
	tetherrange(integer) : "The circular range around tether point (BOSS def=325)"
	bosswave(integer) : "Total amount of boss waves (1-4)"
	bosswaveqty(integer) : "Total amount of health per wave"
	message(string) : "Intro trigger"
	noise1(string) : "Wave 1 entities to trigger"
	noise2(string) : "Wave 2 entities to trigger"
	noise3(string) : "Wave 3 entities to trigger"
]
@PointClass base(Monster, JumpingMon) size(-16 -16 -24,16 16 56) color(192 0 192) studio("progs/ad181/mon_justice.mdl") = monster_justice : "Justice, 500 health points" [
	exactskin(choices) : "Exact Skin" : : "Override default skin selection of 0 (no error checking)" = [
		0 : "Default Skin"
		1 : "Red variation"
		2 : "Blue Variation"
		3 : "Blue with lit helmet"
	]
]

@PointClass base(Appearflags, Targetname) size(-16 -16 -16, 16 16 16) =
	event_lightning : "Chthon's lightning" []
@PointClass base(Appearflags, Targetname) size(-8 -8 -8, 8 8 8) studio("progs/teleport.mdl") =
	misc_teleporttrain : "Moving teleport destination" [
	speed(integer) : "Speed (units per second)" : 64
	target(target_source) : "First stop target"
]

@PointClass base(Appearflags, Targetname) color(0 255 0) size(-8 -8 -8, 8 8 8) = info_earthquake : "Earthquake" [
	spawnflags(Flags) = 
	[
		1 : "Random" : 0
	]
	delay(integer) : "Tremor Duration" : 20
	wait(integer) : "Time between tremors" : 60
	weapon(integer) : "X/Y Movement" : 40
]

@PointClass base(Appearflags, Targetname) color(0 255 0) size(-8 -8 -8, 8 8 8) = trigger_quake : "Harmless Earthquake (Drake)" [
	spawnflags(Flags) = [
		1 : "No Touch" : 0
	]
	wait(integer) : "Duration, must be above 0 (def=3)"
]

@PointClass size(0 0 0, 32 32 32) base(Target) = func_clock : "Clock Hand" [
	event(string) : "Target event (at 12pm)"
	cnt(integer) : "Start time"
	count(integer) : "Seconds per rotation" : 60
]

@PointClass base(Targetname) size(0 0 0, 32 32 32) = func_earthquake : "Earthquake" [
	dmg(string) : "Duration of quake" : "0.8"
]

@PointClass size(0 0 0, 32 32 32) base(Targetname) studio("progs/hipnotic/rubble3.mdl") = func_rubble : "Toss Random Rubble" [
	count(integer) : "# of Rubble Chunks" : 1
]

@PointClass size(0 0 0, 8 8 8) base(Targetname) studio("progs/hipnotic/rubble1.mdl") = func_rubble1 : "Toss Small Rubble" [
	count(integer) : "# of Rubble Chunks" : 1
]

@PointClass size(0 0 0, 16 16 16) base(Targetname) studio("progs/hipnotic/rubble2.mdl") = func_rubble2 : "Toss Medium Rubble" [
	count(integer) : "# of Rubble Chunks" : 1
]

@PointClass size(0 0 0, 32 32 32) base(Targetname) studio("progs/hipnotic/rubble3.mdl") = func_rubble3 : "Toss Large Rubble" [
	count(integer) : "# of Rubble Chunks" : 1
]

@PointClass size(-8 -8 -8, 8 8 8) base(Appearflags, Targetname) = effect_teleport : "Teleport Effect (eye candy)" []



//======================================================================
//
// New Editor/Compiler features
//
//======================================================================
@PointClass size( -8 -8 -8, 8 8 8 ) = func_instance : "An automatically updated prefab. " +
  "Set Filename to the name of a .map containing geometry and/or entities you'd like to duplicate at " +
  "various locations in this map. Position and orient this func_instance in any way you like, and on " +
  "compile the map referenced herein will be collapsed into this map. Use for common architectural " +
  "elements, repetitive entity configurations, building on grid but positioning off grid while " +
  "maintaining ease of editing, etc."
[
	angles(angle) : "Pitch Yaw Roll (Y Z X)" : "0 0 0" : "This entity's orientation."
	targetname(target_source) : "Fixup Name" : : "A name that will, depending on the fixup style, be prepended or appended to any entities. If a Fixup Style is set, but a Fixup Name is not provided, an automatically generated name will be used. Keep in mind that even with fixup enabled and a name set, you can selectively avoid fixup by giving entities names starting with the @ symbol."
	file(string) : "Filename" : : "A path, relative to the current map file's location, pointing to the map you'd like to copy in."
	fixup_style(Choices) : "Fixup Style" : 0 : "The method by which entity names will be fixed up." =
	[
		0 : "Prefix"
		1 : "Postfix"
		2 : "None"
	]

	replace01(string) : "Replace" : : "A replacement parameter that takes the form of $variable value. For example, set this field to $brightness 750 and any occurrence of $brightness inside the Filename map will be replaced with 750 when the instances are collapsed."
	replace02(string) : "Replace" : : "Materials can also be replaced, with #. For example, setting a replacement variable to #SKY1 DOPEFISH will retexture any surfaces in the Filename map, replacing the classic purple sky with everyone's favorite goofy fish."
	replace03(string) : "Replace" : : ""
	replace04(string) : "Replace" : : ""
	replace05(string) : "Replace" : : ""
	replace06(string) : "Replace" : : ""
	replace07(string) : "Replace" : : ""
	replace08(string) : "Replace" : : ""
	replace09(string) : "Replace" : : ""
	replace10(string) : "Replace" : : "If you need more than ten replacements, don't forget you can turn off SmartEdit (if applicable) and add keys manually: replace11, replace12, etc."
]

@SolidClass = func_placeholder : "Placeholder geometry, to be removed with the --remove_entities option " +
  "of Quinstance 0.3.0 and later."
[
]

//_____DETAIL_____
@SolidClass base(FuncLighting) = func_detail : "Compiler entity only. Brushwork that does not seal the map or is structural. Detail brushes add visual details to the world but do NOT block visibility. 'func_detail' entities are merged into the worldspawn entity by the qbsp compiler and do not appear as separate entities in the compiled bsp. NOTE - While effecient use of detail brushes drastically cuts down on the more complex and larger levels, it is a good technique to develop early on. Especially as a time saver for later when your skills and ambitions will require it." []
//_____GROUP_____
@SolidClass base(FuncLighting) = func_group : "Group brushes together for editing convenience. 'func_group' entitites, like 'func_detail', are merged into the worldspawn entity by the qbsp compiler and do not appear as separate entities in the compiled bsp." []

// NOTE: AFAIK(from testing) - Only func_detail_fence and func_detail_illusionary, func_water also, can USE 
// _mirrorinside 1

//_____DETAIL FENCE_____
@SolidClass base(FuncLighting) = func_detail_fence : "Similar to 'func_detail_wall' except it�s suitable for fence(alphamasked) textures and never clips away world faces. Useful for fences, grates, etc, that are solid and block gunfire. NOTE: Set _mirriorinside to 1 to texture inside faces. See 'func_detail_illusionary' for more information." [   
    _mirrorinside(choices) : "Mirror Inside Face(s)" = [
	    0 : "Do Nothing"
	    1 : "Enabled"
	]    
]
//_____DETAIL ILLUSIONARY_____
@SolidClass base(FuncLighting) = func_detail_illusionary : "Compiler entity only. A func_detail variant with no collision(players|monsters|gunfire) and doesn�t split world faces. Useful for hanging vines. NOTE: Set '_mirriorinside' to 1 to texture inside faces. Example - You have a brush textured entirely with the 'skip' texture except for one face, which is textured with 'cobwebs'. Setting '_mirrorinside' to 1 will mirror your cobweb texture to the inside of that face." [
    _mirrorinside(choices) : "Mirror Inside Face(s)" = [
	    0 : "Do Nothing"
	    1 : "Enabled"
	]    
]
//_____DETAIL WALL_____
@SolidClass base(FuncLighting) = func_detail_wall : "Compiler entity only. A func_detail variant that doesn�t split world faces. Useful for when you want decoration touching a floor, or wall, to not split the floor/wall faces. Note: You will get some overdraw instead. If it completely covers up a world face, that face will get clipped away. So it is not suitable for fence(alphamasked) textures." []

// *** ADVANCED ***

//_____ILLUSIONARY VISBLOCKER_____
@SolidClass base(FuncLighting) = func_illusionary_visblocker : "For creating *vis-blocking* illusionary brushes. The player can walk through them. This gives the same effect as water brushes when the '-notranswater' flag is used, except the interior of these brushes are saved as CONTENTS_EMPTY. NOTE - If the player's view is very close to the faces of these brushes they might be able to see into the void (depending on the engine). Fitzquake family engines have a workaround for this that is enabled if the brushes are textured with a water texture ('*' prefixed)." []

//======================================================================
//
// Broken / Removed Stuff
//
//======================================================================
//@PointClass size(-8 -8 -8, 8 8 8) = item_weapon : "Not used anymore"  []
//@PointClass size(-8 -8 -8, 8 8 8) = misc_noisemaker : "Not used anymore"  []
//@PointClass size(-8 -8 -8, 8 8 8) = noclass : "Not used anymore"  []
//@PointClass size(-8 -8 -8, 8 8 8) = test_spawn : "Not used anymore"  []
//@PointClass size(-8 -8 -8, 8 8 8) = testplayerstart : "Not used anymore"  []
@PointClass size(-8 -8 -8, 8 8 8) = viewthing : "Not used anymore"  []
//@SolidClass = test_fodder : "Not used anymore"  []
//@SolidClass = test_goaway : "Not used anymore"  []
//@SolidClass = test_teleport : "Not used anymore"  []
@SolidClass = trigger_onlyregistered : "Not used anymore" []

@PointClass size(-8 -8 -8, 8 8 8) base(Target) = logic_auto : "Automatically fires on map start." [
	target2(string) : "Target2"
	target3(string) : "Target3"
	target4(string) : "Target4"
	killtarget(string) : "Kill Target"
]

@PointClass base(Targetname) = tele_fog : "Creates teleport effect" []

//////////////////////////////////////////////////
///	EXTRAS_R5
//////////////////////////////////////////////////

///////////////////////////////////////////////////////////////////////////
/// func_water - Turns a brush into a liquid-mimic that can move up & down.

@SolidClass = func_water : "Water"
[
	watertype(choices) : "Water Type" : -3 =
	[
		-3 : "Water"
		-4 : "Slime"
		-5 : "Lava"
	]
	height(integer) : "Height" : 0 : "Number of units to move (negatve is down)"
	speed(integer) : "Speed" : 0 : "Speed used when it moves to 'height' position."
	speed2(integer) : "Speed2" : : "Speed used when moving back to original position (pos1). Same as 'speed' if not defined."
	wait(integer) : "Wait" : 0 : "Wait before returning to original position -1 = stay at pos2 until triggered again."
	noise(string) : "Noise" : : "Path to the WAV played when the water moves from pos1 to pos2 (should be looped)."
	noise1(string) : "Noise1" : : "Path to the WAV played when the water moves back to pos1 from pos2 (should be looped)."
	noise2(string) : "Noise2" : : "Path to the WAV played when the water stops moving."
	mangle(angle) : "Direction" : : "Direction & speed of current as a speed in one of X Y or Z, specify like '0 0 0' without quotes"
	drag(integer) : "Drag" : 0 : "Drag on player when water is moving (0 is no drag, 100 if full drag)"
	cshift(color1) : "Color shift" : : "Custom RGB+I colour shift. Automatically set by watertype if ommited."
	targetname(target_source) : "Name" : : "Can be triggered (just keeps bobbing between pos1 & pos2 otherwise)."
	target(target_destination) : "Target" : : "Activate this entity after moving (top and bottom)"

	spawnflags(Flags) =
	[
		16 : "Ease Undercurrent" : 0 : "Normally, the deeper you are, the more you are affected by current. This reverses that, making current is stronger at the surface."
	]
]
///	Notes:
///	func_water is an easy way to make rising/falling water, 
///	but func_watertrain is much more flexible (it can do anything func_water can do, and then some, but it's more work to setup)


///////////////////////////////////////////////////////////////////////////////////////////
/// func_watertrain - Turns a brush into a liquid-mimic that travels like a func_train_ext. 
///	It can target an existing func_train_ext to become a child of that train, or link directly with a chain of train_ext_waypoint entities.

@SolidClass = func_watertrain : "Water Train"
[
	watertype(choices) : "Water Type" : -3 =
	[
		-3 : "Water"
		-4 : "Slime"
		-5 : "Lava"
	]
	height(integer) : "Height" : 0 : "Number of units to move (negatve is down)"
	speed(integer) : "Speed" : 50 : "Speed of the watertrain (can be overridden by waypoints)"
	wait(integer) : "Wait" : 0 : "Wait before returning to original position -1 = stay at pos2 until triggered again."
	noise(string) : "Noise" : : "Path to the WAV played when the water moves (can be overridden by waypoints)"
	noise1(string) : "Noise1" : : "Path to the WAV played when the water stops moving (can be overridden by waypoints)"
	noise2(string) : "Noise4" : : "Noise to make when changing directions (DON'T USE A LOOPED WAV!!)"
	noise5(string) : "Noise5" : : "Noise to make when trying to go wrong way at end of path (uses 'noise1' if not set)"
	cshift(color1) : "Color shift" : : "Custom RGB+I colour shift. Automatically set by watertype if ommited."
	mangle(angle) : "Direction" : : "Direction & speed of current (if any) as a speed in one of X Y or Z, specify like '0 0 0' without quotes"
	drag(integer) : "Drag" : 0 : "Drag on player when water is moving (0 is no drag, 100 if full drag)"
	target(target_destination) : "Target" : : "Activate this entity after moving (top and bottom)"
	event(target_destination) : "Event" : : "Start at this waypoint (since you MUST use the first waypoint as the 'target' on a non-looped path)"
	targetname(target_source) : "Name" : : "Can be triggered (just keeps bobbing between pos1 & pos2 otherwise)."

	spawnflags(Flags) =
	[
		1 : "Start On" : 0 : "Start the train immediately, even if targeted."
		2 : "Allow Pause" : 0 : "Re-Triggering will pause/resume the train at any point along it's path."
		4 : "Allow Changedir" : 0 : "Lets a changedir trigger reverse the train's direction at any time"
		8 : "Auto-Reverse" : 0 : "Train automatically reverses direction when it hits the last/first waypoint (only makes sense if last waypoint has no target)."
		16 : "Ease Undercurrent" : 0 : "Normally, the deeper you are, the more you are affected by current. This reverses that, making current is stronger at the surface."
		32 : "Start Reverse" : 0 :	"Start in reverse"
	]
]
///	Notes:
///	If a func_watertrain's target is a func_train_ext, the parent train controls all, movement and overrides train-specific spawnflags.
///	func_watertrain uses a frame-based move that may lag/overshoot the engine controlled parent train when the game is running slow. 
///	It will never go out-of-sync with the parent for more than a couple frames, 
///	but you should be aware of this when mapping (extend hidden water edges into solid geometry, and allow for some play in all directions).


//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/// func_train_ext - can have certain "children" objects that tag along, can change direction, or stop/resume at any time.
///	These use "smart" waypoints and trigger relays that actually control most aspects of the train, but a simple train can still be setup by ignoring extra options. 
///	The last waypoint does not need a target. The train will either auto-reverse (if set) or wait for manual reverse/move triggers.

@SolidClass = func_train_ext : "Train (Extra)"
[
	speed(integer) : "Speed" : 0 : "Speed of the train (can be overridden by waypoints)"
	dmg(integer) : "Damage" : : "Amonut of damage to inflict when blocked"
	noise(string) : "Noise" : : "Start/travel noise (can be overridden by waypoints)"
	noise1(string) : "Noise1" : : "Stop noise (can be overridden by waypoints)"
	noise2(string) : "Noise4" : : "Noise to make when changing directions (DON'T USE A LOOPED WAV!!)"
	noise5(string) : "Noise5" : : "Noise to make when trying to go wrong way at end of path (uses 'noise1' if not set)"
	target(target_destination) : "Target" : : "First waypoint or start position"
	event(target_destination) : "Event" : : "Start at this waypoint (since you MUST use the first waypoint as the 'target' on a non-looped path)"
	targetname(target_source) : "Name" : : "Can be triggered and/or targeted by child objects"

	spawnflags(Flags) =
	[
		1 : "Start On" : 0 : "Start the train immediately, even if targeted."
		2 : "Allow Pause" : 0 : "Re-Triggering will pause/resume the train at any point along it's path."
		4 : "Allow Changedir" : 0 : "Lets a changedir trigger reverse the train's direction at any time"
		8 : "Auto-Reverse" : 0 : "Train automatically reverses direction when it hits the last/first waypoint (only makes sense if last waypoint has no target). It will NOT auto-reverse on spawn if facing the wrong way (which is possible and valid)."
		16 : "Block Reverse" : 0 : "Reverses train direction when blocked (after inflicting damage) Don't use this on trains with non-looped paths without some way of getting it back to the forward direction (AUTOREVERSE or ALLOWCHANGEDIR). Else it'll get stuck when it reaches the start point again."
		32 : "Start Reverse" : 0 :	"Start in reverse"
	]
]
///	Notes:
///	A train without a targetname will start immediately (doesn't need "START_ON" to be set) but it can not be stopped, and can not have children objects.
///	If your waypoints are not looped (i.e. the last point doesn't target the first), the train MUST target the first waypoint. 
///	Use the "event" target to have the train spanw at a different point along it's path ("event" is ignored if it's not on the same path.).
///	If you have a train on a non looped waypoint path, and AUTOREVERSE is not set, the train will stop at the last waypoint. 
///	If ALLOWCHANGEDIR is set, and the train gets a t_changerdir trigger, you will then be able to re-trigger movement in the reverse direction. 
///	Otherwise re-triggering will just produce the wrong-way sound.


//////////////////////////////////////////////////////////////////////////////////////////////////////
///	train_ext_waypoint - func_train_ext is "dumb" on it's own these entities really control the train. 
///	These are used by func_watertrain as well.

@PointClass = train_ext_waypoint : "Train (Extra) Waypoint"
[
	speed(integer) : "Speed" : : "Forward speed from this waypoint to the next (-1 is warp to next waypoint)"
	wait(integer) : "Wait" : 0 : "Time to pause at this waypoint when moving forward (-1 is wait for re-trigger, 0 is no pause)"
	noise(string) : "Noise" : : "Override train's start/travel noise from this waypoint to the next when moving forward"
	noise1(string) : "Noise1" : : "Override train's stop noise at this waypoint when moving forward (or between this waypoint and the next)"
	event(target_destination) : "Event" : : "Targetname of entity to fire when the train hits this point when moving forward"
	speed2(integer) : "Reverse Speed" : : "Reverse speed from this waypoint to the previous in (-1 is warp to previous)"
	wait2(integer) : "Reverse Wait" : 0 : "Time to pause at this waypoint when moving in reverse (-1 is wait for re-trigger, 0 is no pause)"
	noise2(string) : "Noise2" : : "Override train's start/travel noise from this waypoint to the previous when moving in reverse"
	noise3(string) : "Noise3" : : "Override train's stop noise at this waypoint when moving in reverse (or between this waypoint to the previous)"
	event2(target_destination) : "Reverse Event" : : "Targetname of entity to fire when the train hits this point when moving in reverse"
	targetname(target_source) : "Name" : : "This waypoint's name"
	target(target_destination) : "Target" : : "Name of the next waypoint"
]
///	Notes:
///	Always use unique sets of train_ext_waypoint for func_train_ext and func_watertrain. 
///	The waypoints are linked with one another and can only work with one train at a time.
///	Speed propogates from waypoint to waypoint (if it's not set, the last speed is used). 
///	The first waypoint can also simply use the train's "speed" if set.
///	If the reverse speed/event are not set, the forward direction speed/event are used. 
///	Reverse sounds default to the train's sounds if they are not set. 
///	(This only matters for trains that can go in reverse of course).


//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
///func_button_ext - Simlilar to func_button, but can be disabled/enabled via triggers and allows for both touch and weapon hits to activate if specified.

@SolidClass = func_button_ext : "Button (Extra)"
[
	angle(angle) : "Angle" : : "Move direction"
	lip(integer) : "Lip" : 4 : "Override the default 4 pixel lip remaining at end of move"
	speed(integer) : "Speed" : 40 : "Override the default 40 speed"
	wait(integer) : "Wait" : 1 : "Override the default 1 second wait (-1 = never return)"
	health(integer) : "Health" : : "If set, the button must be killed instead of touched"
	noise(string) : "Push Noise" : : "Path to push noise"
	noise1(string) : "Return Noise" : : "Path to return noise"
	noise2(string) : "Disabled Noise" : : "Path to disabled noise"
	message(string) : "Message" : : "Print this message if used when disabled"
	target(target_destination) : "Target" : : "Activate this entity when used"
	targetname(target_source) : "Name" : : "Disable/enable buttons"

	spawnflags(Flags) =
	[
		1 : "Start Off" : 0 : "Spawns in disabled state (must be triggered to be used)"
		2 : "Always Touch" : 0 : "Touch to activate, even if health>0"
	]
]
///	Notes:
///	When a another trigger/button "uses" these, they will toggle between enabled and disabled mode - you can not press a disabled button (it just plays it's "disabled" sound). 
///	They can be disabled or enabled at any time, even while moving, but they will complete the move and return to the "up" position before enabling/disabling themselves in that case.
///	They can not be fired again until they're "done" - they must be fully reset and enabled to be fired. 
///	The "active" texture frame (if it has texture frames) will only be displayed when the button is enabled, and fully in the "up" position (i.e. ready to be used).


////////////////////////////////////////////////////////////////////////////////////////////////////
///	func_switch - A two-state toggle that can use an alternate set of brushes as it's toggled state. 
///	You can "attach" a func_switch to a func_train_ext (switch goes where the train goes) but due to this, 
///	these don't move like buttons and are always passthrough to avoid blocking issues (therefore, they can not be shot to activate).

@SolidClass = func_switch : "Switch"
[
	wait(integer) : "Wait" : -1 : "Returns to original state after 'wait' seconds (default is -1, wait for re-trigger)"
	angle(angle) : "Angle" : : "Angle player must be facing in order to activate by touch"
	noise(string) : "Noise" : : "Path to push noise"
	noise1(string) : "Noise1" : : "Path to optional reset noise ('noise' is used if ommited, use 'misc/null.wav' for silent return)"
	target(target_destination) : "Target" : : "Activate this entity when used"
	event(target_destination) : "Event" : : "Parent train (ya, 'event' is kind of a dumb key name for this...)"
	targetname(target_source) : "Name" : : "Toggle switch remotely, or just for func_bspframe's sake"
]
///	Notes:
///	A func_bspframe entity that targets a func_switch is used as the alternate model frame.
///	To avoid big headaches with child movement on trains, these are always pass-through objects - make'em small or flat. 
///	This also means you can't shoot'em, but a normal trigger with health can trigger a func_switch if you need that effect (won't work on a moving train of course)
///	Although an alternate model can be used, the texture frame is also switched when toggled so simple animated switches can be made without the need for a func_bspframe.



@SolidClass base(Targetname) = t_effector_destroy : "Extras_R4 particle killtrig" [
	count(integer) : "% of Particles to Affect(1-100)" : 100
	spawnflags(Flags) = [
		1 : "Start On" : 0
	]
]

@SolidClass base(Targetname) = t_effector_push : "Extras_R4 particle pushtrig" [
	mangle(string) : "Push speed in one of X Y or Z, specify like '0 0 0' without quotes"
	cnt(integer) : "% of Velocity to Diminish" : 10
	count(integer) : "% of Particles to Affect(1-100)" : 100
	spawnflags(Flags) = [
		1 : "Start On" : 0
		16: "Tangential" : 0
	]
]

@SolidClass base(Targetname) = t_effector_gravity : "Extras_R4 particle gravtrig" [
	gravity(integer) : "Gravity (0.0-1.0)" : 1.0
	count(integer) : "% of Particles to Affect(1-100)" : 100
	spawnflags(Flags) = [
		1 : "Start On" : 0
		2: "Absolute" : 0
	]
]

@SolidClass base(Targetname) = t_effector_trubulence : "Extras_R4 particle turbulence" [
	speed(integer) : "Maximum Turbulence" : 40
	cnt(integer) : "% of Velocity to Diminish" : 10
	count(integer) : "% of Particles to Affect(1-100)" : 100
	spawnflags(Flags) = [
		1 : "Start On" : 0
		2 : "Don't Affect X Speed" : 0
		4 : "Don't Affect Y Speed" : 0
		8 : "Don't Affect Z Speed" : 0
		16: "Tangential" : 0
	]
]

@SolidClass base(Targetname) = t_effector_attract : "Extras_R4 particle gravwell" [
	speed(integer) : "Strength of Attraction" : 80
	cnt(integer) : "% of Velocity to Diminish" : 10
	count(integer) : "% of Particles to Affect(1-100)" : 100
	spawnflags(Flags) = [
		1 : "Start On" : 0
		16: "Tangential" : 0
	]
]

@SolidClass base(Targetname) = t_effector_friction : "Extras_R4 particle slower" [
	speed(integer) : "Amount of Friction" : 40
	count(integer) : "% of Particles to Affect(1-100)" : 100
	spawnflags(Flags) = [
		1 : "Start On" : 0
	]
]

@PointClass base(Targetname) size(-16 -16 -16, 16 16 16)
	color(255 128 64) = func_emitter : "Extras_R4 Particle Emitter" [
	wait(integer) : "Wait between bursts (-1=single)"
	wait2(integer) : "Wait between bursts max (randomizes)"
	ppe(integer) : "Particles Per Emission"
	extras_h1(integer) : "Launch Yaw (1.25 to 360.25)"
	extras_h2(integer) : "Launch Yaw Max (randomizes)"
	extras_v1(integer) : "Launch Pitch (1.25 to 360.25)"
	extras_v2(integer) : "Launch Pitch Max (randomizes)"
	avelocity(string) : "X Y Z rotation velocity"
	noise(string) : "Noise on burst"
	style(choices) : "Movetype" = [
		0 : "None"
		5 : "Fly"
		6 : "Toss"
		10 : "Bounce"
	]
	speed(integer) : "Speed of Particles"
	speed2(integer) : "Speed max (randomizes)"
	lspan(integer) : "Lifespan"
	lspan2(integer) : "Lifespan max (randomizes)"
	mdl(string) : "Model to load (progs/model.spr)"
	mdl2(string) : "Death model to load (progs/model.spr)"
	frame(integer) : "Start frame"
	nfrms(integer) : "Number of frames in anim"
	nfrms2(integer) : "Number of frames in death anim"
	frate(integer) : "Override 10fps rate"
	frate2(integer) : "Override 10fps rate for death"
	gravity(integer) : "Gravity (0.001=none)(0or1)=1"
	dmg(integer) : "Damage dealt on impact"
	effects(choices) : "Effects" = [
		0 : "None"
		1 : "Bright Field"
		2 : "Muzzle Flash (temporary)"
		4 : "Bright Light"
		8 : "Dim Light"
	]
	noise1(string) : "Impact noise"
	noise2(string) : "Die noise"
	message(string) : "Death message against player"
	weapon(choices) : "Particle Die Effect" : -1 = [
		-1: "None"
		0 : "Spike hit"
		1 : "Superspike hit"
		2 : "Gunshot hit"
		3 : "Explosion"
		4 : "Tarbaby Explosion"
		5 : "Lightning 1"
		6 : "Lightning 2"
		7 : "Scrag spit hit"
		8 : "DKnight magic hit"
		9 : "Lightning 3"
		10: "Huge Lava Splash"
		11: "Teleport effect"
		12: "Explosion 2"
	]
	
	spawnflags(Flags) = [
		1 : "Start On" : 0
		2 : "Emit Solid" : 0
		4 : "Remove on Touch" : 0
		8 : "Die after anim" : 0
		16 : "Spin Particles" : 0
		32 : "Stagger Frames" : 0
		64 : "Kill in func_water" : 0
		128 : "Affected by Effectors" : 0
		256 : "Spawn Stopped (spin)" : 0
	]
]

@SolidClass base(Targetname) = func_emitter_volume : "Extras_R4 Particle Emitter" [
	wait(integer) : "Wait between bursts (-1=single)"
	wait2(integer) : "Wait between bursts max (randomizes)"
	ppe(integer) : "Particles Per Emission"
	extras_h1(integer) : "Launch Yaw (1.25 to 360.25)"
	extras_h2(integer) : "Launch Yaw Max (randomizes)"
	extras_v1(integer) : "Launch Pitch (1.25 to 360.25)"
	extras_v2(integer) : "Launch Pitch Max (randomizes)"
	avelocity(string) : "X Y Z rotation velocity"
	noise(string) : "Noise on burst"
	style(choices) : "Movetype" = [
		0 : "None"
		5 : "Fly"
		6 : "Toss"
		10 : "Bounce"
	]
	speed(integer) : "Speed of Particles"
	speed2(integer) : "Speed max (randomizes)"
	lspan(integer) : "Lifespan"
	lspan2(integer) : "Lifespan max (randomizes)"
	mdl(string) : "Model to load (progs/model.spr)"
	mdl2(string) : "Death model to load (progs/model.spr)"
	frame(integer) : "Start frame"
	nfrms(integer) : "Number of frames in anim"
	nfrms2(integer) : "Number of frames in death anim"
	frate(integer) : "Override 10fps rate"
	frate2(integer) : "Override 10fps rate for death"
	gravity(integer) : "Gravity (0.001=none)(0or1)=1"
	dmg(integer) : "Damage dealth on impact"
	effects(choices) : "Effects" = [
		0 : "None"
		1 : "Bright Field"
		2 : "Muzzle Flash (temporary)"
		4 : "Bright Light"
		8 : "Dim Light"
	]
	noise1(string) : "Impact noise"
	noise2(string) : "Die noise"
	message(string) : "Death message against player"
	weapon(choices) : "Particle Die Effect" : -1 = [
		-1: "None"
		0 : "Spike hit"
		1 : "Superspike hit"
		2 : "Gunshot hit"
		3 : "Explosion"
		4 : "Tarbaby Explosion"
		5 : "Lightning 1"
		6 : "Lightning 2"
		7 : "Scrag spit hit"
		8 : "DKnight magic hit"
		9 : "Lightning 3"
		10: "Huge Lava Splash"
		11: "Teleport effect"
		12: "Explosion 2"
	]
	
	spawnflags(Flags) = [
		1 : "Start On" : 0
		2 : "Emit Solid" : 0
		4 : "Remove on Touch" : 0
		8 : "Die after anim" : 0
		16 : "Spin Particles" : 0
		32 : "Stagger Frames" : 0
		64 : "Kill in func_water" : 0
		128 : "Affected by Effectors" : 0
		256 : "Spawn Stopped (spin)" : 0
	]
]

//============================================================================
//
//Editor/Compiler EXTERNAL MAP PREFAB feature
//
//============================================================================

//_____external_map Settings_____
@baseclass = ExternalMapSettings [
     _external_map(string) : "Map Path" :  : "ABSOLUTE path to the external '.map' file. For example,  'c:\quake\id1\maps\myprefab.map'."
    _external_map_classname(choices) : "Entity class" :  : "Turn the imported bruskwork into a func_(class) entity (ex func_detail) NOTE - You can use 'Smart Edit' to set '_external_map_classname' to any func_(class) entity you like, and add keys appropriate for that class. However, it is beyond the scope of this entry to try and encompass every possibility covering every entity type so only a small set of 'choices' are listed." = [
        "func_detail" : "func_detail"
        "func_group"  : "func_group"
        "func_wall"   : "func_wall"
        "func_illusionary" : "func_illusionary"
        "func_detail_wall" : "func_detail_wall"
        "func_detail_illusionary" : "func_detail_illusionary"    
    ]
    _external_map_angle(integer) : "Rotation (y-axis only)"
    _external_map_angles(integer) : "Rotation(x y z)" :  : "Final Entity Angle Orientation, Pitch Yaw Roll(X Y Z) axis."
    _external_map_scale(string) : "Scale" :  : "Final Entity Scale (default='1 1 1' XYZ axis)" 
]

//_____EXTERNAL MAP_____
@PointClass base(FuncItems,ExternalMapSettings,FuncLighting) size(-24 -24 -16, 24 24 16) color(255 25 25) = misc_external_map : "Import an external '.map's brushwork into your world geometry. Only brushwork, or func_group, in the worldspawn of the imported map is used, everything else is ignored. This is a *compiler* entity only. NOTE: Texture .wad's used in the external map MUST be used in the map you are importing into." []

//CTF
@PointClass size(-8 -8 -8, 8 8 40) studio("progs/q15/flag.mdl")  = item_flagblue : "Blue Flag" []
@PointClass size(-8 -8 -8, 8 8 40) studio("progs/q15/flag.mdl") skin(0) = item_flagred : "Red Flag" []
@PointClass size(-16 -16 -24, 16 16 32) base(Appearflags) = item_flag_team1 : "CTF: Red Team Flag" [] // Alternate name for historical purposes
@PointClass size(-16 -16 -24, 16 16 32) base(Appearflags) = item_flag_team2 : "CTF: Blue Team Flag" [] // Alternate name
@PointClass base(PlayerClass) = info_player_team1 : "CTF - Red Player Start" []
@PointClass base(PlayerClass) = info_player_team2 : "CTF - Blue Player Start" []