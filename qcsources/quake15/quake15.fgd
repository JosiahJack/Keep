//======================================================================
// ENTITIES FGD file
// 
// MOD    : AD v1.50 - (Arcane Dimensions)
// Date   : 3rd December 2016
// Author : Simon "Sock" OCallaghan
// Website: www.simonoc.com
// Editor : Worldcraft, Jackhammer, TrenchBroom 1/2
//
//======================================================================


@baseclass model(modelpath) = Appearflags [
	spawnflags(Flags) =
	[
		256 : "Not in Easy" : 0 : "Will not spawn for EASY skill"
		512 : "Not in Normal" : 0 : "Will not spawn for NORMAL skill"
		1024 : "Not in Hard" : 0 : "Will not spawn for HARD skill"
		2048 : "Not in Deathmatch" : 0 : "Will not spawn for DEATHMATCH skill"
	]
]
@baseclass = targetname [ targetname(target_source) : "targetname" ]
@baseclass = target [ target(target_destination) : "target" ]
@baseclass = target2 [ target2(target_destination) : "target2"
 ]


//======================================================================
//
// WORLDSPAWN
//
//======================================================================
@SolidClass = worldspawn : "World entity"
[
	//----------------------------------------------------------------------
	worldtype(choices) : "World Type" : 0 = [
		0 : "Medieval"
		1 : "Runic (metal)"
		2 : "Present (base)"
	]
	wad(string) : "Wads" : "" : "list of Wad Files used by compiler (; for seperation)"
	message(string) : "Level Name"
	sounds(integer) : "CD track" :  : "CD track to automatically play"

	//----------------------------------------------------------------------
	light(integer) : "Ambient light" :  : "Set a global minimum light level of 'n' across the whole map. This is an easy way to eliminate completely dark areas of the level, however you may lose some contrast as a result, so use with care. Default 0"
	sky(string) : "Sky Texture" : : "6 sided cube for sky brushes (night_)"
	_range(integer) : "Global light range" :  : "Scales the brightness range of all lights without affecting their fade discance. Values of n more than 0.5 makes lights brighter and n less than 0.5 makes lights less bright. The same effect can be achieved on individual lights by adjusting both the 'light' and 'wait' attributes"
	_dist(integer) : "Global light scale" :  : "Scales the fade distance of all lights by a factor of n. If n is more than 1 lights fade more quickly with distance and if n is less than 1, lights fade more slowly with distance and light reaches further"
	_anglescale(integer) : "Light angle scale" :  : "Sets a scaling factor for how much influence the angle of incidence of sunlight on a surface has on the brightness of the surface. n must be between 0.0 and 1.0. Smaller values mean less attenuation, with zero meaning that angle of incidence has no effect at all on the brightness. Default 0.5"
	_gamma(integer) : "Lightmap gamma" :  : "Adjust brightness of final lightmap. Default 1, >1 is brighter, <1 is darker"

	//----------------------------------------------------------------------
	// Ericw/Tyran's new compile tools (www.celephais.net/board/view_thread.php?id=61211)
	//----------------------------------------------------------------------
	_sunlight(integer) : "Sunlight" :  : "Set the brightness of the sunlight coming from an unseen sun in the sky. Sky brushes (or more accurately bsp leafs with sky contents) will emit sunlight at an angle specified by the _sun_mangle key. Default 0"
	_sunlight_color(string) : "Sunlight color R G B" :  : "Specify red(r), green(g) and blue(b) components for the colour of the sunlight. RGB component values are between 0 and 1. Default is white light (1 1 1)"
	_sunlight_mangle(string) : "Sunlight mangle (Yaw pitch roll)" :  : "Specifies the direction of sunlight using yaw(x), pitch(y) and roll(z) in degrees. Yaw specifies the angle around the Z-axis from 0 to 359 degrees and pitch specifies the angle from 90 (straight up) to -90 (straight down). Roll has no effect, so use any value (e.g. 0). Default is straight down (0 -90 0)"
	_sun_mangle(string) : "Duplicate version of sunlight_mangle"
	_sunlight_penumbra(integer) : "Sunlight penumbra in degrees" :  : "Specifies the penumbra width, in degrees, of sunlight. Useful values are 3-4 for a gentle soft edge, or 10-20+ for more diffuse sunlight. Default is 0"
	_sunlight_dirt(integer) : "Sunlight dirt" :  : "1 enables dirtmapping (ambient occlusion) on sunlight, -1 to disable (making it illuminate the dirtmapping shadows). Default is to use the value of '_dirt'"

	// Ambient bounce light (multiple suns in a dome)
	_sunlight2(integer) : "Sunlight 2 brightness" :  : "Set the brightness of a large dome of lights positioned around the map (16K unit radius). Useful for simulating higly diffused light (e.g. cloudy skies) in outdoor areas. Default 0"
	_sunlight2_color(string) : "Sunlight 2 color R G B" :  : "Specifies the colour of _sunlight2, same format as _sunlight_color. Default is white light (1 1 1)"
	_sunlight2_dirt(integer) : "Sublight 2 dirt" :  : "1 enables dirtmapping (ambient occlusion) on sunlight2, -1 to disable. Default is to use the value of '_dirt'"

	_dirt(integer) : "Dirt mapping (AO)" :  : "1 enables dirtmapping (ambient occlusion) on all lights, borrowed from q3map2. This adds shadows to corners and crevices. You can override the global setting for specific lights with the _dirt light entity key or _sunlight_dirt, _sunlight2_dirt, and _minlight_dirt worldspawn keys. Default is no dirtmapping (-1)"
	_dirtmode(integer) : "Dirt mode" :  : "Choose between ordered (0, default) and randomized (1) dirtmapping."
	_dirtscale(integer) : "Dirt scale" : 0.5 : "Scale factor used in dirt calculations, default 1. Lower values (e.g. 0.5) make the dirt fainter, 2.0 would create much darker shadows"
	_dirtgain(integer) : "Dirt gain" : 1 : "Exponent used in dirt calculation, default 1. Lower values (e.g. 0.5) make the shadows darker and stretch further away from corners"
	_dirtdepth(integer) : "Dirt depth" : 128 : "Maximum depth of occlusion checking for dirtmapping, default 128."
	_minlight_dirt(integer) : "Minlight dirt" :  : "1 enables dirtmapping (ambient occlusion) on minlight, -1 to disable. Default is to use the value of '_dirt'"
	
	//----------------------------------------------------------------------
	gravity(integer) : "Gravity" :  : "gravity of map, default = 800"
	fog(string) : "Fog Command" :  : "console command, Den/R/G/B example = (0.05 0.3 0.3 0.3)"
	fog_density(integer) : "Fog Density" :  : "Global fog density (required for trigger_fog)"
	fog_colour(string) : "Fog Colour" :  : "Global fog colour, example = (Red Green Blue)"
	fog_dpextra(string) : "Fog DP Extra" :  : "extra DP fog parameters, default = (1 0 8192 1024 32)"
	water_alpha(string) : "Water Alpha" :  : "Water Alpha, default = (1.00)"
	particlemax(integer) : "Particles" :  : "Amount of ACTIVE particles per map"

	//----------------------------------------------------------------------
	no_item_offset(choices) : "Item Offset for ammo/health" = [
		-1 : "Disabled"
		 0 : "Use Default"
		 1 : "Enabled"
	]
	no_item_rotate(choices) : "Item Rotate for ammo/health" = [
		-1 : "Disabled"
		 0 : "Use Default"
		 1 : "Enabled"
	]
	no_zaware(choices) : "Monsters - Z Aware attacks" = [
		-1 : "Disabled"
		 0 : "Use Default"
		 1 : "Enabled"
	]
	no_liquiddmg(choices) : "Monsters - slime/lava Damage" = [
		-1 : "Disabled"
		 0 : "Use Default"
		 1 : "Enabled"
	]
	knight_defskin(choices) : "Default Red knight skin" = [
		0 : "Default - Red"
		1 : "No colour, grey"
		2 : "Vertical stripes"
		3 : "Swampy green/red"
	]
	bodyflrcheck(choices) : "Monster dead body check floor" = [
		0 : "(Default) No Check"
		1 : "Yes - Check for gravity"
	]
	bodyfadeaway(integer) : "Monster dead body fade timer" : : "Time in seconds"

	//----------------------------------------------------------------------
	upgrade_axe(choices) : "Upgrade Axe" = [
		-1 : "Remove from Inventory"
		 0 : "Use Default"
		 1 : "Add to Inventory"
	]
	upgrade_ssg(choices) : "Upgrade Shotgun" = [
		-1 : "Remove from Inventory"
		 0 : "Use Default"
		 1 : "Add to Inventory"
	]
	upgrade_lg(choices) : "Upgrade Lightning Gun" = [
		-1 : "Remove from Inventory"
		 0 : "Use Default"
		 1 : "Add to Inventory"
	]

	//----------------------------------------------------------------------
	give_weapons(integer) : "Give weapons at start" :  : "SG=1, SSG=2, NG=4, SNG=8, GL=16, RL=32, LG=64"
	take_weapons(integer) : "Take weapons away at start" :  : "SG=1, SSG=2, NG=4, SNG=8, GL=16, RL=32, LG=64"
	max_health(integer) : "Minimum Health at start" :  : "Update player health if below this value"
	reset_health(integer) : "Reset Health at start" :  : "Reset player health to this value"
	currentammo(choices) : "Setup Players Ammo" = [
		0 : "Minimum values"
		1 : "Reset values"
	]
	ammo_shells(integer) : "Ammo Shells" :  : "Player starting quantity"
	ammo_nails(integer) : "Ammo Nails" :  : "Player starting quantity"
	ammo_rockets(integer) : "Ammo Rockets" :  : "Player starting quantity"
	ammo_cells(integer) : "Ammo Cells" :  : "Player starting quantity"
	armortype(choices) : "Armour Type" = [
		0 : "No Armour given"
		1 : "Green Armour"
		2 : "Yellow Ammour"
		3 : "Red Armour"
	]
	armourvalue(integer) : "Armour Quantity" :  : "Quantity of armour to reset player (100/150/200)"
]

//======================================================================
//
// Ambient Sounds
//
//======================================================================
@Baseclass base(targetname,Appearflags) size(-16 -16 -8, 16 16 8) color(128 25 204) studio("sprites/helper_sound.mdl") = Sound []
@PointClass base(Sound) = ambient_comp_hum : "Computer background sounds" []
@PointClass base(Sound) = ambient_drip : "Dripping sound" []
@PointClass base(Sound) = ambient_drone : "Engine/machinery sound" []
@PointClass base(Sound) = ambient_flouro_buzz : "Fluorescent buzzing sound" []
@PointClass base(Sound) = ambient_hum1 : "Teleporter Hum sound" []
@PointClass base(Sound) = ambient_light_buzz : "Buzzing sound from light" []
@PointClass base(Sound) = ambient_suck_wind : "Wind sound" []
@PointClass base(Sound) = ambient_swamp1 : "Frogs croaking" []
@PointClass base(Sound) = ambient_swamp2 : "Frogs croaking B" []
@PointClass base(Sound) = ambient_thunder : "Thunder sound" []
@PointClass base(Sound) = ambient_custom_sound : "Ambient Custom Sound"
[
	spawnflags(Flags) = [
		2 : "Play Once" : 0 : "When triggered plays once"
		64 : "Start OFF" : 0 : "Starts off and waits for trigger"
	]

	target(string) : "Sound Trigger" : : "fires each time sound played"
	volume(integer) : "Volume" :  : "volume of sound (default=1, capped at 1)"
	noise(string) : "Sound Primary" :  : "sound file (ambience/windgust1a.wav)"
	noise(string) : "Sound Stop" :  : "sound file (ambience/switch6_off.wav)"
	noise(string) : "Sound Random" :  : "sound file (ambience/windgust1b.wav)"
	wait(integer) : "Random time" :  : "Time between sounds (default 20)"
	delay(integer) : "Minimum time" :  : "Time between sounds (default 2)"
	waitmin(integer) : "Starting delay" :  : "initial starting time of sound (delay + random() x waitmin)"
	waitmin2(integer) : "Do Not Silence" : : "Will not silence sound if switching off"
	impulse(integer) : "Channel" :  : "channel to play sound (0-7) (0 automatic is default)"
	speed(integer) : "Attenuation" :  : "-1=no attenuation, 1=normal (default), 2=idle, 3=static, 4=quiet"
]
@PointClass base(Sound) = ambient_custom_loop : "Ambient Custom Loop"
[
	volume(integer) : "Volume" :  : "volume of sound (default=1, capped at 1)"
	noise(string) : "Custom sound" :  : "looped sound file to play (ambience/windgust1.wav)"
]

//======================================================================
//
// INFO entities - player starts, deathmatch, coop, teleport
//
//======================================================================
@baseclass base(Appearflags) flags(Angle) studio("progs/player.mdl")
	size(-16 -16 -24, 16 16 24) offset(0 0 24) color(255 0 0)
	= PlayerClass [
		target(string) : "target(s) fired when used"
	]
@baseclass = StartSpawn2 [ startspawn2(integer) : "Unique spawn location number matching a trigger_changelevel" ]

//----------------------------------------------------------------------
@PointClass base(PlayerClass) = info_player_start : "Player Start" []
@PointClass base(PlayerClass,StartSpawn2) = info_player_start2 : "Player Return" []
@PointClass base(PlayerClass,StartSpawn2) = info_player_coop : "Player COOP Start" [
	spawnflags(Flags) = [ 64 : "Start OFF" : 0 : "Start off" ]
]
@PointClass base(PlayerClass) = info_player_deathmatch : "Player DM Start" [
	spawnflags(Flags) = [ 64 : "Start OFF" : 0 : "Start off" ]
]
@PointClass base(Appearflags, targetname) flags(Angle)
	size(-16 -16 -24, 16 16 24) offset(0 0 24) color(255 128 128)
	= info_teleport_destination : "Teleport destination" [
		target(string) : "target(s) fired when used"
	]
@PointClass base(Appearflags) = info_intermission : "Intermission camera" [
	spawnflags(Flags) = [
		1 : "Not Intermission" : 0 : "Exclude from intermission"
		2 : "Solid Interaction" : 0 : "Solid world interaction"
	]
	target(string) : "target(s) fire when used as a viewing camera"
	mangle(string) : "Mangle (Pitch Yaw Roll)"
	fog_density(integer) : "Fog density (Must be >0 to activate feature)"
	fog_colour(vector) : "Fog colours (def=0.1 0.1 0.1)"
	speed(integer) : "Fog time to change (def=2s)"
]
//----------------------------------------------------------------------
@PointClass base(targetname) = info_target : "info_target (Invisible entity)" []
@PointClass base(targetname) = info_null : "info_null (spotlight target)" []
@PointClass base(targetname) = info_notnull : "info_notnull (map hack)" [
	use(string) : "self.use"
	think(string) : "self.think"
	nextthink(integer) : "nextthink"
]

//======================================================================
//
// ITEM entities
//
//======================================================================
@baseclass size(-16 -16 0, 16 16 32) = ItemSize []
@baseclass size(-16 -16 -24, 16 16 32) offset(0 0 24) = PowerupSize []
@baseclass size(-16 -16 -24, 16 16 32) = ArmourSize []
@baseclass size(-16 -16 -24, 16 16 32) offset(0 0 24) = KeySize []
@baseclass base(Appearflags,targetname,target) flags(Angle) = Items [
	spawnflags(Flags) = [
		16 : "Respawn" : 0 : "Can respawn after being picked up"
		32 : "Floating" : 0 : "Spawns floating, trigger entity to drop it"
		64 : "Start OFF" : 0 : "Starts off and waits for trigger to spawn"
		128 : "No Particles" : 0 : "No particle or effects active on this entity"
	]
	upgrade_axe(choices) : "Axe Upgrade" = [
		 0 : "Do Nothing"
		 1 : "Only spawn if got upgrade"
	]
	upgrade_ssg(choices) : "Shotgun Upgrade" = [
		 0 : "Do Nothing"
		 1 : "Only spawn if got upgrade"
	]
	upgrade_lg(choices) : "Lightning Gun Upgrade" = [
		 0 : "Do Nothing"
		 1 : "Only spawn if got upgrade"
	]
	message(string) : "Message when picked up"
	respawn_time(integer) : "Respawn time (=-1 instant)"
	respawn_count(integer) : "Total times to respawn"
	respawn_trig(choices) : "respawn trigger condition" = [
		 0 : "Default Respawn"
		 1 : "Wait for trigger"
	]
]
@baseclass = ItemWorldType [
	skin_override(choices) = [
		0 : "Worldspawn Worldtype"
		1 : "Base Green"
		2 : "Medieval Wood"
	]
]
@baseclass color(80 0 200) base(Items,ItemSize,ItemWorldType) = AmmoBase [
	spawnflags(flags) = [
		1 : "Large box" : 0
	]
	frame_box(integer) : "animation frame (1-7)"
	aflag(integer) : "ammo quantity"
]
@baseclass = AmmoLid [ spawnflags(flags) = [ 2 : "Lid" : 0 ] ]
@baseclass = PowerTimer [ cnt(integer) : "Duration override (def=30)" ]

//----------------------------------------------------------------------
@PointClass base(Items,ItemSize,ItemWorldType) studio("progs/health_25.mdl") = item_health : "Health pak" [
	spawnflags(flags) = [
		1 : "Rotten" : 0
		2 : "Megahealth" : 0
	]
]
//----------------------------------------------------------------------
@PointClass base(AmmoBase,AmmoLid) studio("progs/ammo_shells0.mdl") = item_shells : "Shells" [
	spawnflags(flags) = [ 2 : "Lid" : 0 ]
]
@PointClass base(AmmoBase,AmmoLid) studio("progs/ammo_nails0.mdl") = item_spikes : "Nails" [
	spawnflags(flags) = [ 2 : "Lid" : 0 ]
]
@PointClass base(AmmoBase) studio("progs/ammo_rockets0.mdl") = item_rockets : "Rockets" []
@PointClass base(AmmoBase) studio("progs/ammo_battery0.mdl") = item_cells : "Cells" []
@PointClass base(AmmoBase) studio("progs/ammo_cells0.mdl") = item_plasma : "Cells (Alt)" []
//----------------------------------------------------------------------
@PointClass base(Items,ArmourSize) studio("progs/armor.mdl") skin(0) = 
	item_armor1 : "100% armor (Green)" []
@PointClass base(Items,ArmourSize) studio("progs/armor.mdl") skin(1) = 
	item_armor2 : "150% armor (Yellow)" []
@PointClass base(Items,ArmourSize) studio("progs/armor.mdl") skin(2) = 
	item_armorInv : "200% armor (Red)" []
//----------------------------------------------------------------------
@PointClass base(Items,KeySize) studio("progs/w_s_key.mdl") skin(2) = item_key1 : "Silver key" []
@PointClass base(Items,KeySize) studio("progs/w_g_key.mdl") skin(6) = item_key2 : "Gold key" []

//----------------------------------------------------------------------
@PointClass base(Items,KeySize) studio("progs/key_rune1.mdl") = item_sigil : "Sigil" [
	spawnflags(Flags) = [
		1 : "Episode 1" : 0
		2 : "Episode 2" : 0
		4 : "Episode 3" : 0
		8 : "Episode 4" : 0
	]
]
//----------------------------------------------------------------------
@PointClass base(Items,PowerupSize,PowerTimer) studio("progs/artifact_envsuit.mdl") = 
	item_artifact_envirosuit : "Environmental Protection Suit" []
@PointClass base(Items,PowerupSize,PowerTimer) studio("progs/artifact_pent.mdl") = 
	item_artifact_invulnerability : "Pentagram of Protection" []
@PointClass base(Items,PowerupSize,PowerTimer) studio("progs/artifact_invis.mdl") = 
	item_artifact_invisibility : "Ring of Shadows" []
@PointClass base(Items,PowerupSize,PowerTimer) studio("progs/artifact_quad.mdl") = 
	item_artifact_super_damage : "Quad damage" []

//----------------------------------------------------------------------
@PointClass base(Items,PowerupSize) studio("progs/w_backpack.mdl") = 
	item_backpack : "Backpack full of random amounts of ammo" [
	spawnflags(Flags) = [
		1 : "Shells" : 0
		2 : "Nails" : 0
		4 : "Rockets" : 0
		8 : "Cells" : 0
	]
	count(integer) : "Amount (random) of ammo to give"
	ammo_shells(integer) : "Exact amount of shells"
	ammo_nails(integer) : "Exact amount of spikes"
	ammo_rockets(integer) : "Exact amount of rockets"
	ammo_cells(integer) : "Exact amount of cells"
	armorvalue(integer) : "Armour Shards"
	armortype(choices) : "Armour Quantity" = [
		0 : "Do Nothing"
		1 : "Random Quantity (use count)"
	]
	exactskin(choices) : "Backpack skin" = [
		0 : "Original brown"
		1 : "Green"
		2 : "Blue"
		3 : "Red"
		4 : "Yellow"
		5 : "Swampy"
		6 : "White"
		7 : "Pale"
	]
]
	
//======================================================================
//
// WEAPON entities
//
//======================================================================
@baseclass size(-16 -16 0, 16 16 56) color(0 0 200) base(Appearflags) = Weapon [
	spawnflags(Flags) = [
		16 : "Respawn" : 0 : "Can respawn after being picked up"
		32 : "Floating" : 0 : "Spawns floating, trigger entity to drop it"
		64 : "Start OFF" : 0 : "Starts off and waits for trigger to spawn"
		128 : "No Particles" : 0 : "No particle or effects active on this entity"
	]
	upgrade_axe(choices) : "Axe Upgrade" = [
		 0 : "Do Nothing"
		 1 : "Only spawn if got upgrade"
	]
	upgrade_ssg(choices) : "Shotgun Upgrade" = [
		 0 : "Do Nothing"
		 1 : "Only spawn if got upgrade"
	]
	upgrade_lg(choices) : "Lightning Gun Upgrade" = [
		 0 : "Do Nothing"
		 1 : "Only spawn if got upgrade"
	]
	message(string) : "Message when picked up"
	respawn_time(integer) : "Respawn time (=-1 instant)"
	respawn_count(integer) : "Total times to respawn"
	respawn_trig(choices) : "respawn trigger condition" = [
		 0 : "Default Respawn"
		 1 : "Wait for trigger"
	]
]

//----------------------------------------------------------------------
@PointClass base(Weapon) studio("progs/g_shot.mdl") = weapon_supershotgun : "Super shotgun" []
@PointClass base(Weapon) studio("progs/g_nail.mdl") = weapon_nailgun : "Nailgun" []
@PointClass base(Weapon) studio("progs/g_nail2.mdl") = weapon_supernailgun : "Perforator" []
@PointClass base(Weapon) studio("progs/g_rock.mdl") = weapon_grenadelauncher : "Grenade launcher" []
@PointClass base(Weapon) studio("progs/g_rock2.mdl") = weapon_rocketlauncher : "Rocket launcher" []
@PointClass base(Weapon) studio("progs/g_light.mdl") = weapon_lightning : "Thunderbolt" []
@PointClass base(Weapon) studio("progs/g_laserg.mdl") = weapon_laser_gun : "Laser Cannon" []
@PointClass base(Weapon) studio("progs/g_prox.mdl") = weapon_proximity_gun : "Proximity Grenades" []

@PointClass base(Weapon) studio("progs/g_saw.mdl") = weapon_chainsaw : "Chainsaw" []



//======================================================================
//
// FUNCTIONS
//
//======================================================================
@baseclass base(Appearflags,targetname,target) flags(Angle) = FuncItems [
	spawnflags(Flags) = [
		64 : "Start OFF" : 0 : "Start off & wait for trigger"
	]
	_dirt(integer) : "Dirt mapping (override)"
	_minlight(integer) : "Min light for all surface"
	_mincolor(string) : "Min light color R G B"
	_shadow(choices) : "Shadows" = [
		0 : "Do Nothing"
		1 : "Cast shadows"
	]
	_shadowself(choices) : "Self Shadow" = [
		0 : "Do Nothing"
		1 : "Cast shadows on Self"
	]
]

//----------------------------------------------------------------------
@SolidClass base(FuncItems) = func_button : "Button" [
	spawnflags(flags) = [
        32: "Start Disabled" : 0
	]
	speed(integer) : "Speed (def=40)"
	wait(integer) : "Delay before reset (def=1)"
	delay(integer) : "Delay before trigger"
	lip(integer) : "Lip (def=4)"
	health(integer) : "Health (shootable)"
	sounds(choices) : "Sounds" = [
		0 : "Steam metal"
		1 : "Wooden clunk"
		2 : "Metallic clink"
		3 : "In-out"
		4 : "Silent"
		5 : "Custom"
	]
	noise(string) : "Custom sound - 1st move"
	noise1(string) : "Custom sound - 2nd move"
	message(string) : "Message" 
]

//----------------------------------------------------------------------
@SolidClass base(FuncItems) = func_door : "Door (Basic)" [
	spawnflags(flags) = [
		1 : "Start Open" : 0
		2 : "Spawn trigger field" : 0
		4 : "Don't link" : 0
		8 : "Gold Key" : 0
        16: "Silver Key" : 0
        32: "Toggle" : 0
	]
	speed(integer) : "Speed (def=100)"
	yaw_speed(integer) : "Speed (returning)"
	wait(integer) : "Delay before close (def=4)"
	lip(integer) : "Lip (def=8)"
	health(integer) : "Health (shootable)"
	dmg(integer) : "Damage when blocked (def=2)"
	message(string) : "Message if triggered"
	sounds(choices) : "Sound" = [
		0 : "Silent"
		1 : "Stone"
		2 : "Base"
		3 : "Stone Chain"
		4 : "Screechy Metal"
		5 : "Custom"
	]
	locksounds(choices) : "Sound (locked)" = [
		0 : "Default talktalk"
		1 : "Short rattle"
		2 : "Medium rattle"
		3 : "Long rattle"
	]
	noise(string) : "Custom sound - Locked"
	noise1(string) : "Custom sound - moving"
	noise2(string) : "Custom sound - Stopped"
	noise3(string) : "Custom sound - Locked"
	noise4(string) : "Custom sound - Key open"
	customkey(choices) : "Custom Key" = [
		0 : "Do nothing"
		1 : "Custom Key 1"
		2 : "Custom Key 2"
		3 : "Custom Key 3"
		4 : "Custom Key 4"
	]
	message2(string) : "Custom key message"
]

//----------------------------------------------------------------------
@SolidClass base(FuncItems) = func_door_secret : "Door (Secret)" [
	spawnflags(flags) = [
		1 : "Open once only" : 0
		2 : "Moves left first" : 0
		4 : "Moves down first" : 0
		8 : "Not shootable" : 0
       16 : "Always shootable" : 0
	]
	speed(integer) : "Speed (def=50)"
	yaw_speed(integer) : "Speed (returning)"
	t_width(integer) : "First distance"
	t_length(integer) : "Second distance"
	wait(integer) : "Delay before close (def=5)"
	dmg(integer) : "Damage when blocked (def=2)"
	message(string) : "Message if touched"
	sounds(choices) : "Sound" = [
		1 : "Medieval"
		2 : "Metal"
		3 : "Base (default)"
		4 : "Silent"
		5 : "Custom"
	]
	locksounds(choices) : "Sound (locked)" = [
		0 : "Default talktalk"
		1 : "Short rattle"
		2 : "Medium rattle"
		3 : "Long rattle"
	]
	noise(string) : "Custom sound - Locked"
	noise1(string) : "Custom sound - Open"
	noise2(string) : "Custom sound - Opening"
	noise3(string) : "Custom sound - Closed"
]

//----------------------------------------------------------------------
@SolidClass base(FuncItems) = func_plat : "Platform" [	
	spawnflags(Flags) = [
		1 : "Low trigger" : 0
		4 : "Min trigger" : 0
		8 : "Start Lower" : 0
		16 : "Start Open" : 0
        32: "Start Disabled" : 0
	]
	speed(integer) : "Speed (def=150)"
	height(integer) : "Distance to move"
	sounds(choices) : "Sound" = [
		1 : "Base (fast)"
		2 : "Medieval (default)"
		4 : "Silent"
		5 : "Custom"
	]
	noise(string) : "Custom sound - Moving"
	noise1(string) : "Custom sound - Stopped"
]	

//----------------------------------------------------------------------
@SolidClass base(FuncItems) = func_train : "Train" [
	spawnflags(Flags) = [
		1 : "Start ON" : 0
		2 : "Non Solid" : 0
		4 : "Use Model" : 0
		8 : "Touch damage" : 0
		32: "Start Reversed" : 0
	]
	mdl(string) : "Use a model"
	speed(integer) : "Speed (def=100)"
	dmg(integer) : "block damage (def=2)"
	sounds(choices) : "Sound" = [
		0 : "Silent"
		1 : "Ratchet Metal"
		5 : "Custom"
	]
	noise(string) : "Custom sound - Stopped"
	noise1(string) : "Custom sound - Moving"
]

//----------------------------------------------------------------------
@PointClass base(Appearflags) flags(Angle) size(-8 -8 -24, 8 8 24) studio("sprites/helper.mdl") = path_corner : "Path Corner" [
	spawnflags(Flags) = [
		1 : "Exact logic" : 0
		2 : "Instant" : 0
		4 : "Reverse" : 0
		8 : "No Pause" : 0
	]
	targetname(target_source) : "Name of path corner"
	corner_event(string) : "target to trigger when used"
	corner_route(choices) : "Change route logic" = [
		0 : "Do nothing"
		1 : "Forward"
		2 : "Alt Forward"
		3 : "Backward"
		4 : "Exact"
		5 : "Random"
	]
	corner_switch(choices) : "Change reverse state" = [
		-1 : "No"
		 0 : "Do Nothing"
		 1 : "Yes"
		 2 : "Toggle"
	]
	corner_pause(choices) : "Change pause state" = [
		-1 : "No"
		 0 : "Do Nothing"
		 1 : "Yes"
		 2 : "Toggle"
	]
	corner_speed(integer) : "Change speed of target path_corner"
	state(choices) : "Starting route" = [
		0 : "Do Nothing"
		1 : "Forward"
		2 : "Alt Forward"
		3 : "Backward"
	]
	target(target_destination) : "targetname of Forward route"
	target2(target_destination) : "targetname of Alt Forward route"
	targetback(target_destination) : "targetname of backward route"
	wait(integer) : "Wait at corner"
	delay(integer) : "Random delay at corner"
	alpha(integer) : "Visual Arrow (def=0.35)"
	speed(integer) : "Speed between corners (def=100)"
]

//----------------------------------------------------------------------
@SolidClass base(FuncItems) = func_wall : "Wall" [
	spawnflags(Flags) = [
		2 : "A Frame" : 0
		16: "Mod Check" : 0
	]
]
@SolidClass base(FuncItems) = func_illusionary : "Wall Illusionary" [
	spawnflags(Flags) = [
		2 : "A Frame" : 0
	]
]
@SolidClass base(FuncItems) = func_episodegate : "Episode Gate" [
	spawnflags(Flags) = [
		1 : "Episode 1" : 0
		2 : "Episode 2" : 0
		4 : "Episode 3" : 0
		8 : "Episode 4" : 0
	]
]
@SolidClass base(FuncItems) = func_bossgate : "Boss gate" []
//----------------------------------------------------------------------
@SolidClass base(FuncItems) = func_skill : "Skill Select" [
	spawnflags(Flags) = [
		1 : "Start Open" : 0
	]
	target(target_destination) : "target - Particle Emitters"
	target2(target_destination) : "target2 - When touched/damaged"
	style(choices) : "Skill level" = [
		0 : "Easy (default)"
		1 : "Normal"
		2 : "Hard"
		3 : "Nightmare"
	]
	message2(string) : "Alternative touch/damage message"
	health(integer) : "Can be damaged instead of touched"
	speed(integer) : "Movement Speed (def=100)"
	lip(integer) : "Lip (def=8)"
	noise1(string) : "Custom sound : Stopped"
	noise2(string) : "Custom sound : Start/Loop"
	noise3(string) : "Custom sound : Touch"
]
//----------------------------------------------------------------------	

//======================================================================
//
// TRIGGERS
//
//======================================================================
@baseClass base(Appearflags) = TrigOFF [ 
	spawnflags(flags) = [ 64 : "Start OFF" : 0 ] ]
@baseClass = TrigSound [
	sounds(choices) : "Sound style" : 0 = [
		0 : "Default"
		1 : "Secret"
		2 : "Beep beep"
		3 : "Large switch"
		4 : "Silent"
		5 : "Custom"
		6 : "Secret 2"
	]
	noise(string) : "Custom Sound - Triggered"
]

//----------------------------------------------------------------------
@baseClass base(TrigUpg,TrigSound,Appearflags,targetname,target)
	flags(Angle) color(128 0 128) = TrigBasic [
	spawnflags(flags) = [ 
		1 : "No Touch" : 0
		64 : "Start OFF" : 0
	]
	health(integer) : "Health"
	delay(integer) : "Delay before trigger"
	message(string) : "Message when triggered"
	killtarget(string) : "Kill target" : : "Use trigger_entitystate_off instead!"
]
@SolidClass base(TrigBasic) = trigger_once : "Trigger ONCE" [
	spawnflags(flags) = [ 
		8 : "In View" : 0
		16: "MOD Check" : 0
		32: "Monsters" : 0
	]
	t_length(integer) : "Inview Distance"
]
@SolidClass base(TrigBasic) = trigger_multiple : "Trigger MULTIPLE" [
	spawnflags(flags) = [ 
		16: "MOD Check" : 0
		32: "Monsters" : 0
	]
	wait(choices) : "Wait before reset" = [
		-1 : "Never reset"
		 4 : "Default"
	]
]
@SolidClass base(TrigBasic) = trigger_secret : "Trigger Secret" [
	spawnflags(flags) = [ 2: "Remove/Block Message" : 0 ]
]

//----------------------------------------------------------------------
@PointClass base(TrigUpg,TrigSound,Appearflags,targetname,target,target2) color(128 0 128)
	size(-8 -8 -8, 8 8 8) = trigger_relay : "Trigger relay" [
	spawnflags(flags) = [ 2: "Random" : 0 ]
	cnt(integer) : "Random Time Qty to add to delay"
	wait(choices) : "Wait before reset" = [
		-1 : "Trigger Once"
		 0 : "Always reset"
	]
	delay(integer) : "Delay before trigger"
	message(string) : "Message when triggered"
	waitmin(integer) : "% random chance (0.0-1.0)"
]

@PointClass base(TrigOFF,TrigSound,targetname,target) color(128 0 25)
	size(-8 -8 -8, 8 8 8) = trigger_counter : "Trigger counter" [
	spawnflags(flags) = [ 1: "No Messages" : 0 ]
	message(string) : "Final Message"
	message2(string) : "Final Message (cannot be blocked)"
	count(integer) : "Count before firing"
	delay(integer) : "Delay before trigger"
]

//----------------------------------------------------------------------
@SolidClass base(TrigOFF,targetname,target) 
	= trigger_teleport : "Trigger Teleport" [
	spawnflags(Flags) = [
		1 : "Player only" : 0
		2 : "Silent" : 0
		4 : "Start ON" : 0
	]
	wait(choices) : "Wait before reset" = [
		-1 : "Trigger Once"
		 0 : "Always reset"
	]
	speed(integer) : "Speed after teleport (def=300)"
	volume(integer) : "Teleport hum sound (def=0.5)"
	noise(string) : "Custom Sound to play"
	waitmin(integer) : "Custom Sound Length"
]
@SolidClass base(TrigOFF,targetname,target) flags(Angle)
	= trigger_push : "Trigger Push" [
	spawnflags(flags) = [ 
		1 : "Once Only" : 0
		2 : "Silent" : 0
		4 : "No Monsters" : 0
		8 : "Push All" : 0 : "Push ALL entities"
		16 : "Additive Velocity" : 0 : "Alternate push, useful for water currents/fans"

	]
	speed(integer) : "Speed of push (def=1000)"
]
@SolidClass base(TrigOFF,targetname,target) flags(Angle)
	= trigger_fog : "Trigger Fog" [
	speed(integer) : "Time to fade (-1=Instant)"
	wait(choices) : "Wait before reset" = [
		-1 : "Trigger Once"
		 0 : "Always reset"
		 2 : "Default"
	]
	fog_density(integer) : "Fog Density (def=0.1)"
	fog_colour(string) : "Fog Colour (0.1 0.1 0.1)"
]
@SolidClass base(TrigOFF,targetname,target) flags(Angle)
	= trigger_ladder : "Trigger Ladder" [
	waitmin(integer) : "Time between climbing sound"
	speed(integer) : "Velocity to climb (def=160)"
	sounds(choices) : "Sounds" = [
		1 : "Metal"
		2 : "Wood (def)"
		3 : "Rope"
		4 : "Silent"
		5 : "Custom"
	]
	noise1(string) : "Custom Sound - Climb 1"
	noise2(string) : "Custom Sound - Climb 2"
	noise3(string) : "Custom Sound - Climb 3"
	noise4(string) : "Custom Sound - Climb 4"
]
//----------------------------------------------------------------------
@SolidClass base(TrigBubbles, target) = trigger_hurt : "Trigger Hurt" [
	dmg(integer) : "Damage (def=5)"
	deathtype(string) : "Death message (EX:was lost to the void)"
	speed(integer) : "Rate of damage (0.5 = 0.5 sec)"
]

//----------------------------------------------------------------------
@SolidClass base(TrigOFF,targetname,target) = trigger_changelevel : "Trigger Change Level" [
	spawnflags(flags) = [ 
		1: "No Intermission" : 0
		2: "Reset Inventory" : 0
	]
	map(string) : "Next map name" : : "Leave blank to reload same map"
	startspawn2(integer) : "Spawn number in next map (1-7)"
]
@SolidClass base(TrigOFF,targetname,target) = trigger_setskill : "Trigger Set Skill" [
	health(integer) : "Health"
	wait(integer) : "Time between re-trigger (def=0.2)"
	message(choices) : "Skill to change to" = [
        0 : "Easy"
        1 : "Medium"
        2 : "Hard"
        3 : "Nightmare!"
	]
]

//----------------------------------------------------------------------
@SolidClass base(TrigOFF,targetname,target) = trigger_monsterjump : "Trigger Monster Jump" [
	speed(integer) : "Jump Speed (def=200)"
	height(integer) : "Jump Height (def=200)"
]

//----------------------------------------------------------------------
@PointClass base(Appearflags,targetname) size(-8 -8 -16, 8 8 16) color(192 128 255)
	= trigger_entitystate_on : "Entity state ON" [
	target(target_destination) : "targets to affect"
	target2(target_destination) : "More targets to affect"
]
@PointClass base(Appearflags,targetname) size(-8 -8 -16, 8 8 16) color(192 128 255)
	= trigger_entitystate_off : "Entity state OFF" [
	target(target_destination) : "targets to affect"
	target2(target_destination) : "More targets to affect"
]
@PointClass base(Appearflags,targetname) size(-8 -8 -16, 8 8 16) color(192 128 255)
	= trigger_entitystate_disable : "Entity state DISABLE" [
	target(target_destination) : "targets to affect"
	target2(target_destination) : "More targets to affect"
]
@PointClass base(Appearflags,targetname) size(-8 -8 -16, 8 8 16) color(192 128 255)
	= trigger_entitystate_reset : "Entity state RESET" [
	target(target_destination) : "targets to affect"
	target2(target_destination) : "More targets to affect"
]
@PointClass base(Appearflags,targetname) size(-8 -8 -16, 8 8 16) color(192 128 255)
	= trigger_entitystate_aframe : "Entity state AFRAME" [
	target(target_destination) : "targets to affect"
	target2(target_destination) : "More targets to affect"
	state(integer) : "Aframe state 0=0-x, 1=A"
]


//======================================================================
//
// MISC entities
//
//======================================================================
@PointClass base(Appearflags,targetname) size(-8 -8 -8, 8 8 8)
	color(0 128 192) flags(Angle) = misc_particle : "Particle Emitter" [
	spawnflags(Flags) = [ 64 : "Start off" : 0 ]
	target(string) : "target destination of effect"
	target2(string) : "Name of particle template"
	message(choices) : "Particle Style" = [
		"ALTAR" : "ALTAR - Blood red"
		"ARMOR1" : "ARMOR1 - Green"
		"ARMOR2" : "ARMOR2 - Yellow"
		"ARMOR3" : "ARMOR3 - Red"
		"BOOK" : "BOOK Runes"
		"ELECTRIC" : "ELECTRIC stream"
		"FCIRCLE" : "FCIRCLE - Floor circle"
		"FLAMES" : "FLAMES - Small"
		"FLAMEL" : "FLAMEL - Large"
		"JUMPAD" : "JUMPPAD - Upward"
		"KEYGOLD" : "KEYGOLD - Yellow"
		"KEYSILVER" : "KEYSILVER - Blue"
		"KEYRED" : "KEYRED - Red"
		"KEYGREEN" : "KEYGREEN - Green"
		"KEYPURPLE" : "KEYPURPLE - Purple"
		"KEYWHITE" : "KEYWHITE - White"
		"MEGAH" : "MEGAH - MegaHealth"
		"PENT" : "PENT - of protection"
		"PORTAL" : "PORTAL - White"
		"QUAD" : "QUAD - Damage"
		"SIGIL" : "SIGIL - Purple"
		"SKILL" : "SKILL - Pillar"
		"SRING" : "SRING - Ring of Shadows"
		"SUIT" : "SUIT - Env suit"
	]
]
@PointClass base(Appearflags,targetname) size(-8 -8 -8, 8 8 8)
	color(0 128 192) flags(Angle) = misc_particletemplate : "Particle Template" [
	spr_name1(string) : "Sprite filename 1"
	spr_name2(string) : "Sprite filename 2"
	spr_name3(string) : "Sprite filename 3"
	part_movetype(integer) : "Movement (def=8)"
	part_limit(integer) : "Max active particles (def=25)"
	part_life(integer) : "Life time (def=1s)"
	part_ofs(string) : "Emitter offset (XYZ)"
	part_veltype(choices) : "Velocity Type" = [
		0 : "Volume"
		1 : "Circumference"
		2 : "Random Circumference"
		3 : "Spiral"
		5 : "Explosion"
	]
	part_velbase(string) : "Velocity Direction (Additive)"
	part_vel(string) : "Velocity Linear/random"
	part_velrand(string) : "Velocity random wobble"
	part_velrot(integer) : "Velocity rotation (Y Axis only)"
	part_vol(string) : "Volume to spawn within"
	wakeup_dist(integer) : "Wake up distance (def=1024)"
	wakeup_timer(integer) : "Wake up timer (def=1s)"
	spawn_base(integer) : "Spawn rate time (0.1s)"
	spawn_rand(integer) : "Spawn rate randomness"
	dpp_name(string) : "DP Particle effect name"
	dpp_wait(integer) : "DP spawn rate timer (def=0.1s)"
	dpp_rnd(integer) : "DP spawn rate randomness"
	dpp_vel(string) : "DP directional velocity"
]
@PointClass base(Appearflags,targetname) size(-8 -8 -8, 8 8 8)
	color(0 128 192) = misc_particle_burst : "Particle Burst Emitter" [
	part_ofs(string) : "Particle Origin Offset"
	part_tcount(integer) : "Particle Quantity (def=20)"
	part_life(integer) : "Particle Life time (def=2s)"
	part_style(choices) : "Particle Colour" = [
		0 : "Default - White"
		1 : "Yellow"
		2 : "Green"
		3 : "Red"
		4 : "Blue"
		5 : "Purple"
		6 : "Fire"
		7 : "White"
	]
	part_movetype(choices) : "Particle Movement" = [
		0 : "Default - Center"
		2 : "Center"
		3 : "Up"
		4 : "Shockwave"
		5 : "Skull"
		6 : "Lost"
		7 : "Minotaur"
	]	
]
//----------------------------------------------------------------------
@BaseClass base(Appearflags, targetname) size(-8 -8 -8, 8 8 8)
	color(0 128 192) = Misc [
	spawnflags(Flags) = [ 64 : "Start Off" : 0 ]
]
@PointClass base(Misc) = misc_fireball : "Small fireball" [
	spawnflags(Flags) = [ 
		32 : "Slime" : 0
	]
	speed(integer) : "Speed (def=1000)"
	dmg(integer) : "Impact Damage (def=5)"
	delay(integer) : "Spawn time (def=3)"
	wait(integer) : "Spawn time randomness (def=5)"
]
@PointClass base(Misc) = air_bubbles : "Floating Bubble" []
@PointClass base(Misc) = misc_drip : "Falling water" [
	spawnflags(Flags) = [ 
		2 : "Silent" : 0
		16 : "Blood" : 0
		32 : "Slime" : 0
	]
	wait(integer) : "Random time between drips"
]

@PointClass base(Misc) color(128 128 192) = misc_rain : "DP Rain particles" [
	spawnflags(Flags) = [ 
		2 : "MP Only" : 0
	]

	skin(choices) : "Particle" = [
		0 : "Default (Large)"
		1 : "Small"
		2 : "Tiny"
	]
]
//----------------------------------------------------------------------
@PointClass base(Appearflags, targetname) size(-8 -8 -8, 8 8 192)
	color(128 128 192) = misc_smoke : "Smoke Model/Particle" [
	spawnflags(Flags) = [
		 2 : "No DP Model" : 0
		 4 : "No DP Effects" : 0
		64 : "Start Off" : 0
	]
	target(string) : "Custom direction for smoke"
	angles(string) : "Pitch Roll Yaw"
	exactskin(choices) : "Type of Smoke" = [
		0 : "Gunsmoke (Default)"
		1 : "Soot (darker)"
		2 : "Steam"
		3 : "Toxin"
		4 : "Plague"
		5 : "Incense"
		6 : "Lithium"
		7 : "Flames"
	]
	alpha(integer) : "Alpha of model (def=0.65)"
	wait(integer) : "DP Time between Spawning"
	delay(integer) : "DP Time randomness"
	height(integer) : "DP % of velocity direction"
]
//----------------------------------------------------------------------
@PointClass base(Appearflags, targetname) size(-8 -8 -8, 8 8 8)
	color(128 192 128) flags(Angle) = misc_spark : "Sparks" [
	spawnflags(Flags) = [
		 2 : "Blue" : 0
		 4 : "Pale White" : 0
		 8 : "Red" : 0
		64 : "Start Off" : 0
	]
	target(string) : "target a light to sync"
	wait(integer) : "Time delay between sparks"
	cnt(integer) : "Quantity of sparks"
	fixangle(integer) : "Random Y direction of sparks"
	speed(integer) : "Velocity speed (def=40)"
	height(integer) : "Velocity random (def=+/- 20)"
	sounds(choices) : "Sounds" = [
		1 : "Sparks"
		4 : "Silent"
		5 : "Custom"
	]
	noise(string) : "Custom sound for spark"
]

//----------------------------------------------------------------------
@PointClass base(Appearflags, targetname) size(-8 -8 -8, 8 8 8)
	color(128 128 224) flags(Angle) = misc_shake : "Shaking" [
	spawnflags(Flags) = [ 2 : "Screen ONLY" : 0 ]
	count(integer) : "Radius of shake (def=200)"
	wait(integer) : "Duration of shake (def=2s)"
	dmg(integer) : "Strength at center (def=200)"
	sounds(integer) : "Sounds 1=Rumble"
	noise1(string) : "Custom Sound - Start"
	noise2(string) : "Custom Sound - Finish"
]

//----------------------------------------------------------------------
@PointClass base(Appearflags, targetname) model(mdl)size(-16 -16 -16, 16 16 16)
	color(255 128 64) = misc_model : "Misc Models" [
	spawnflags(Flags) = [
		 2 : "Collison" : 0
		64 : "Start Off" : 0
	]
	mdl(string) : "Model to load (progs/model.mdl)"
	angles(string) : "pitch roll yaw" : : "up/down, angle, tilt left/right "
	ideal_yaw(choices) : "Y axis rotation" = [
		0 : "No rotation"
		1 : "Random"
	]
	pos1(string) : "Frame Selection" : : "X=0, Y=0, Z=exact frame number, X->Y, Z=0 : will randomly pick a frame from the X,Y range, X->Y, Z=-1 : will animate between the X,Y range, can forward or backward setup"
	pos2(string) : "Skin Selection" : : "X=0, Y=0, Z=exact skin number, X->Y, Z=0 : will randomly pick a skin from the X,Y range"
]

@PointClass base(Appearflags, targetname) model(mdl)size(-16 -16 -16, 16 16 16)
	color(255 128 64) = misc_actor : "Triggered Physics based actor for scripted sequences" [
	spawnflags(Flags) = [
		 2 : "STOP Particles" : 0 : "Disable Particles After Movement is finished"

		 4 : "Remove Actor on ground" : 0 : "Remove the actor entity after it touches the ground"
		 8 : "Start OFF" : 0 : "Hidden until triggered"
	     16 : "Spawn Effect" : 0 : "Spawn Particle effect on triggered"	]
	mdl(string) : "Model to load (progs/model.mdl)"
	angle(integer)  : "" : : "up/down, angle, tilt left/right "
	frame(integer) : "Frame Selection" : : "X=0, Y=0, Z=exact frame number, X->Y, Z=0 : will randomly pick a frame from the X,Y range, X->Y, Z=-1 : will animate between the X,Y range, can forward or backward setup"
	height(integer) : "Ending frame" : : "when triggered, actor will run frames and stop at the specified value"
	speed(integer) : "animation rate" : : "0.1 is the standard update rate for monster animations"
	velocity(vector) : "Physics movement" : : "Format is X Y Z velocity"
	partname(string) : "Particle Trail" : : "useful for effects like blood trails or flames"
	//partspawn(string) : "Triggered Particle" : : "Spawn one //particle upon being targeted"


]

//-----------------------------------------------------------------------------
@PointClass base(EBox) size(-16 -16 0, 16 16 64) studio("progs/explode_box1.mdl") = misc_explobox : "Large box" []
@PointClass base(EBox) size(-16 -16 0, 16 16 32) studio("progs/explode_box2.mdl") = misc_explobox2 : "Small box" []


//======================================================================
//
// TRAP entities
//
//======================================================================
@BaseClass base(Appearflags,targetname,target) size(-8 -8 -8, 8 8 8) 
	color(0 128 192) flags(Angle) = Trap [
	spawnflags(Flags) = [ 
		32 : "Toggle" : 0
		128 : "Tracking" : 0
	]
]
//----------------------------------------------------------------------
@PointClass base(Trap) = trap_spikeshooter : "Spike Shooter" [
	spawnflags(Flags) = [
		1 : "SNG Spike" : 0
		2 : "Laser" : 0
	]
	speed(integer) : "Projectile speed"
	wait(integer) : "time between firing (def=1s)"
	delay(integer) : "random time between firing"
]
@PointClass base(Trap) = trap_gravity_well : "Hipnotic Gravity Well" [
	spawnflags(Flags) = [
		1 : "Underwater" : 0
	]
	speed(integer) : "Pull Strength"
	count(integer) : "max active targets"
	distance(integer) : "reach of gravity well"
	dmg(integer) : "how much damage on touch"
]
@PointClass base(Trap) = trap_lightningshooter : "Lightning Shooter" [
	spawnflags(Flags) = [
		1 : "Cthton" : 0
		16 : "Particles" : 0
	]
	wait(integer) : "time between firing (def=1s)"
	delay(integer) : "random time between firing"
	volume(integer) : "Sound volume (def=0.75)"
	pos1(string) : "random XYZ wobble to source"
	pos2(string) : "random XYZ wobble to target"
]
@PointClass base(Trap) = trap_gasshooter : "Particle Shooter" [
	spawnflags(Flags) = [ 
		1 : "Steam" : 1 
		2 : "Fire" : 0
		4 : "Poison" : 0
		16 : "Silent" : 0
	]
	wait(integer) : "Spawn time delay (def=0.05s)"
	waitmin(integer) : "Auto switch off timer (def=0.5s)"
	speed(integer) : "Velocity speed (def=200)"
	dmg(integer) : "Touch Damage (def=1)"
]
//----------------------------------------------------------------------
@PointClass base(Trap_Pendulum) studio("progs/pendulum.mdl") size(-8 -192 -24, 8 0 24) = pendulum : "Pendulum (SoA)" [
	spawnflags(Flags) = [
		1 : "PEND_X" : 0 : "a pendulum hanging from the ceiling swinging parallel to the X axis"
		2 : "PEND_Y" : 1 : "a pendulum hanging from the ceiling swinging parallel to the Y axis"
		64 : "Start OFF" : 0
	]


]

@BaseClass base(Appearflags,targetname,target) = Trap_Pendulum [
	spawnflags(Flags) = [
		1 : "Reverse" : 0 : "Start at frame 12 instead of 0"
		2 : "One Swing" : 0 : "swing back & forth and then stop"
		64 : "Start OFF" : 0
	]
	dmg(integer) : "Touch Damage (def=5)"
	waitmin(integer) : "Time between Touch Damage (def=0.5s)"
	wait(integer) : "Starting Delay"
]
@PointClass base(Trap_Pendulum) size(-8 -192 -24, 8 0 24) = trap_pendlong : "Long Pendulum" []
@PointClass base(Trap_Pendulum) size(-192 -8 -24, 0 8 24) = trap_pendlongx : "Long Pendulum X Axis" []
@PointClass base(Trap_Pendulum) size(-8 -128 -24, 8 0 24) = trap_pendshort : "Short Pendulum" []
@PointClass base(Trap_Pendulum) size(-128 -8 -24, 0 8 24) = trap_pendshortx : "Short Pendulum X Axis" []
//----------------------------------------------------------------------
@BaseClass base(Appearflags,targetname,target) = Trap_SawBlade [
	spawnflags(Flags) = [
		1 : "Start ON" : 0
		2 : "Reverse" : 0 : "Start at frame 12 instead of 0"
		64 : "Start OFF" : 0
	]
	speed(integer) : "Speed Travel (def=100)"
	yaw_speed(integer) : "Speed Rotation (def=180)"
	dmg(integer) : "Touch Damage (def=4)"
	waitmin(integer) : "Damage pause ON state (def=0.1s)"
	height(integer) : "Damage pause OFF state (def=1s)"
	lip(choices) : "Deceleration time" = [
		-1 : "Instant Stop"
		 2 : "Default"
	]
	sounds(choices) : "Sounds" = [
		0 : "Silent (def)"
		1 : "Woodmill"
		5 : "Custom"
	]
	noise(string) : "Custom Sound - Stopping"
	noise1(string) : "Custom Sound - Moving"
]
@PointClass base(Trap_SawBlade) size(-4 -32 -32, 4 32 32) = trap_sawbladey : "Saw Blade on Y axis" []
@PointClass base(Trap_SawBlade) size(-32 -4 -32, 32 4 32) = trap_sawbladex : "Saw Blade on X axis" []


//======================================================================
//
// LIGHT entities
//
//======================================================================
@baseclass base(targetname,target) = Light [
	light(integer) : "Brightness" :  : "Set the light intensity. Negative values are also allowed and will cause the entity to subtract light cast by other entities. Default 300"
	_color(string) : "Light color" :  : "Specify red(r), green(g) and blue(b) components for the colour of the light. RGB component values are between 0 and 1. Default is white light ('1 1 1')"
	wait(integer) : "Fade distance multiplier" :  : "Scale the fade distance of the light by 'n'. Values of n more than 1 make the light fade more quickly with distance, and values less than 1 make the light fade more slowly (and thus reach further). Default 1"
	delay(choices) : "Attenuation" :  : "Select an attenuation formula for the light: 0 = Linear attenuation (default). 1 = 1/x attenuation. 2 = 1/(x^2) attenuation. 3 = No attenuation (same brightness at any distance). 4 = 'local minlight' - No attenuation and like minlight, it won't raise the lighting above it's light value. Unlike minlight, it will only affect surfaces within line of sight of the entity. 5 = 1/(x^2) attenuation, but slightly more attenuated and without the extra bright effect that 'delay 2' has near the source"  = [
		0 : "Linear falloff (Default)"
		1 : "Inverse distance falloff"
		2 : "Inverse distance squared"
		3 : "No falloff"
		4 : "Local minlight"
		5 : "Inverse distance 2"
	]
	mangle(string) : "Spotlight direction" :  : "Turns the light into a spotlight and specifies the direction of light using yaw(x), pitch(y) and roll(z) in degrees. Yaw specifies the angle around the Z-axis from 0 to 359 degrees and pitch specifies the angle from 90 (straight up) to -90 (straight down). Roll has no effect, so use any value (e.g. 0). Often easier than the 'target' method"
	angle(integer) : "Spotlight cone angle" :  : "Specifies the angle in degrees for a spotlight cone. Default 40"
	style(choices) : "Appearance" = [
		0 : "Normal"
		10: "Fluorescent flicker"
		2 : "Slow, strong pulse"
		11: "Slow pulse, noblack"
		5 : "Gentle pulse"
		1 : "Flicker A"
		6 : "Flicker B"
		3 : "Candle A"
		7 : "Candle B"
		8 : "Candle C"
		4 : "Fast strobe"
		9 : "Slow strobe"
	]
	_dirt(integer) : "Dirt map (override)" :  : "Overrides the worldspawn setting of '_dirt' for this particular light. -1 to disable dirtmapping (ambient occlusion) for this light, making it illuminate the dirtmapping shadows. 1 to enable ambient occlusion for this light. Default is to defer to the worldspawn setting"
	_dirtscale(integer) : "Dirt scale (override)" :  : "Override the global '_dirtscale' or '_dirtgain' settings to change how this light is affected by dirtmapping (ambient occlusion). See descriptions of these keys in the worldspawn section"
	_deviance(integer) : "Deviance" :  : "Split up the light into a sphere of randomly positioned lights within radius 'n' (in world units). Useful to give shadows a wider penumbra. '_samples' specifies the number of lights in the sphere. The 'light' value is automatically scaled down for most lighting formulas (except linear and non-additive minlight) to attempt to keep the brightness equal. Default is 0, do not split up lights"
	_samples(integer) : "No. of Deviance lights" :  : "Number of lights to use for '_deviance'. Default 16 (only used if '_deviance' is set)"
	_surface(string) : "Surface light texture name" :  : "Makes surfaces with the given texture name emit light, by using this light as a template which is copied across those surfaces. Lights are spaced about 128 units (though possibly closer due to bsp splitting) apart and positioned 2 units above the surfaces"
	_surface_offset(integer) : "Surface light offset" :  : "Controls the offset lights are placed above surfaces for '_surface'. Default 2"
	_softangle(integer) : "Spotlight soft angle" :  : "Specifies the angle in degrees for an inner spotlight cone (must be less than the 'angle' cone. Creates a softer transition between the full brightness of the inner cone to the edge of the outer cone. Default 0 (disabled)"
	_anglescale(integer) : "Light angle scale" :  : "Sets a scaling factor for how much influence the angle of incidence of light on a surface has on the brightness of the surface. n must be between 0.0 and 1.0. Smaller values mean less attenuation, with zero meaning that angle of incidence has no effect at all on the brightness. Default 0.5"
]
@baseclass size(-8 -8 -8, 8 8 8) base(Light) studio("sprites/light_helper.mdl") = LightPoint [] 
@baseclass size(-10 -10 -20, 10 10 20) base(Light) = LightTorch []
@baseclass size(-10 -10 -12, 12 12 18) offset(0 0 12) base(Light) = LightFlame []
@baseclass = LightOff [ spawnflags(flags) = [ 1 : "Start Off" : 0 ] ]

//----------------------------------------------------------------------
@PointClass base(LightPoint,LightOff) iconsprite("sprites/light.spr")  = 
	light : "Invisible lightsource" []
@PointClass base(LightPoint,LightOff) iconsprite("sprites/light.spr") = 
	light_fluoro : "Fluorescent light" [
	spawnflags(flags) = [
		2 : "No Sound" : 0
	]
]
@PointClass base(LightPoint,LightOff) color(100 0 110) iconsprite("sprites/light.spr") studio("sprites/helper.mdl") = 
	light_storm : "Thunderstorm" [
	spawnflags(flags) = [
		1 : "N/A" : 0
		2 : "No Sound" : 0
	]
]
@PointClass base(LightPoint) iconsprite("sprites/light.spr") = 
	light_fluorospark : "Sparking fluorescent light" [
	spawnflags(flags) = [
		2 : "No Sound" : 0
	]
]
@PointClass base(LightPoint,LightOff) sprite("progs/s_light.spr") = 
	light_globe : "Globe light" [
	spawnflags(flags) = [
		4 : "No Static" : 0
	]
]

//----------------------------------------------------------------------
@PointClass base(LightTorch,LightOff) studio("progs/flame_withtop.mdl") = 
	light_torch_small_walltorch : "Small walltorch" [
	spawnflags(flags) = [
		2 : "No Sound" : 0
		4 : "No Static" : 0
		128 : "No Particles" : 0
	]
]
@PointClass base(LightFlame,LightOff) studio("progs/flame2.mdl") sequence(0) = 
	light_flame_small_yellow : "Small yellow flame" [
	spawnflags(flags) = [
		2 : "No Sound" : 0
		4 : "No Static" : 0
		128 : "No Particles" : 0
	]
]
@PointClass base(LightFlame,LightOff) studio("progs/flame2.mdl") sequence(1) = 
	light_flame_large_yellow : "Large yellow flame" [
	spawnflags(flags) = [
		2 : "No Sound" : 0
		4 : "No Static" : 0
		128 : "No Particles" : 0
	]
]

//----------------------------------------------------------------------
@PointClass base(Light,LightOff) size(-4 -4 -16, 4 4 16) sequence(1)
	studio("progs/candle.mdl") = light_candle : "Church candle" []
@PointClass base(Light, LightOff) size(-10 -10 -20, 10 10 20) studio("progs/lightp.mdl") =
	light_fluoropost : "Light Post (breakable)" []

@PointClass base(Light, LightOff) size(-30 -30 5, 30 30 20) studio("progs/lightfix.mdl") =
	light_fix : "Ceiling Light Panel(breakable, needs targetname)" []

@PointClass base(Light, LightOff) size(-8 -8 -8, 8 8 8)  studio("progs/lightceil.mdl") =
	light_ceil : "Ceiling Alarm(breakable, needs targetname)" []


//======================================================================
//
// HIPNOTIC/RITUAL ROTATION STUFF
//
//======================================================================
@baseclass base(Appearflags,targetname,target) flags(Angle) = HipItems [
	_dirt(integer) : "Dirt mapping (override)"
	_minlight(integer) : "Min light for all surface"
	_mincolor(string) : "Min light color R G B"
	_shadow(choices) : "Shadows" = [
		0 : "Do Nothing"
		1 : "Cast shadows"
	]
	_shadowself(choices) : "Self Shadow" = [
		0 : "Do Nothing"
		1 : "Cast shadows on Self"
	]
]

//----------------------------------------------------------------------
@PointClass base(Appearflags,targetname) size(-4 -4 -4, 4 4 4) = 
	info_rotate : "Rotating Objects pivot point" []
@PointClass base(Appearflags,targetname,target) size(-8 -8 -8, 8 8 8) =
	func_rotate_entity : "Rotating Object" [
	spawnflags(flags) = [
		1 : "Toggle" : 0
		2 : "Start ON" : 0
	]
	rotate(integer) : "Rotation Rate"
	speed(integer) : "Spin up time"
]
@PointClass base(Appearflags,targetname,target) size(-8 -8 -8, 8 8 8) =
	path_rotate : "Rotating path corner" [
	spawnflags(flags) = [
		1 : "Rotation" : 0 : " Rotate train at rate specified by 'rotate'"
		2 : "Angles" : 0 : "Rotate to the angles specified by 'angles'"
		4 : "Stop" : 0 : "stop train and wait to be retriggered"
		8 : "No Rotate" : 0 : "stop train rotating when waiting to be triggered"
		16: "Damage" : 0 : "Cause damage based on 'dmg'"
		32: "Move Time" : 0 : "Interpret 'speed' as the length of time to take moving"
		64: "Set Damage" : 0 : "Set all targets damage to 'dmg'"
	]
	event(string) : "target to trigger" : "Trigger target when train arrives at corner"
	noise(string) : "Custom stop sound"
	noise1(string) : "Custom start sound"
	speed(integer) : "Set speed of train"
]
@PointClass base(Appearflags,targetname,target) size(-8 -8 -8, 8 8 8) =
	func_rotate_train : "Rotating Platform" [
	path(string) : "Starting position"
	speed(integer) : "Travel Speed (def=100)"
	dmg(integer) : "blocking damage (def=0)"
	sounds(choices) : "Sounds" = [
		0 : "Silent"
		1 : "Metal"
	]
	noise(string) : "Custom sound - stop"
	noise1(string) : "Custom sound - moving"
]
@SolidClass base(HipItems) = func_movewall : "Rotating Collision" [
	spawnflags(flags) = [
		1 : "Visible" : 0 : "Causes brush to be displayed"
		2 : "Touch" : 0 : "Cause damage when touched by player"
		4 : "No Solid" : 0 : "makes the brush non-solid"
	]
	dmg(integer) : "Touch/Block Damage"
]
@SolidClass base(HipItems) = rotate_object : "Rotating Object" []
@PointClass base(Appearflags,targetname) size(-8 -8 -8, 8 8 8) =
	func_rotate_door : "Rotating Door" [
	spawnflags(flags) = [
		1 : "Stay Open" : 0 : "Reopen after closing, stops a once only door from closing"
	]
	target(target_destination) : "Target rotate_object"
	target2(target_destination) : "Target2 info_rotate (move on spawn)"
	dmg(integer) : "Blocking damage (def=2)"
	speed(integer) : "Time to Rotate open/close"
	sounds(choices) : "Sounds" = [
		1 : "Medieval (def)"
		2 : "Metal"
		3 : "Base"
		4 : "Silent"
	]
]

//======================================================================
//
// BREAKABLES
//
//======================================================================
@BaseClass base(Appearflags,targetname,target,target2) = Break [
	spawnflags(flags) = [
		1 : "Start off" : 0 : "Start hidden"
		2 : "No Damage" : 0 : "Cannot be damaged"
		4 : "Explosion" : 0 : "Produces explosion"
		8 : "Silent" : 0 : "No Breaking Sounds"
		16 : "Damage" : 0 : "Rubble does damage"
		32: "No Monster" : 0 : "Immune to monster damage"
		64: "No Sound" : 0 : "No Impact Sounds"
		128: "No Rotate" : 0 : "No Y rotation for rubble"
	]
	style(choices) : "Style Default" = [
		1 : "Rock (default)"
		2 : "Wood"
		3 : "Glass"
		4 : "Metal"
		5 : "Brick"
		6 : "Ceramic"
		10: "Custom"
	]
	brksound(choices) : "Sound Breaking" = [
		0 : "Use Default"
		1 : "Rock"
		2 : "Wood"
		3 : "Glass"
		4 : "Metal"
		5 : "Brick"
		6 : "Ceramic"
		10: "Custom"
	]
	brkimpsound(choices) : "Sound Impact" = [
		0 : "Use Default"
		1 : "Rock"
		2 : "Wood"
		3 : "Glass"
		4 : "Metal"
		5 : "Brick"
		6 : "Ceramic"
		10: "Custom"
	]
	brkobjects(choices) : "Model Texture/Type" = [
		 0 : "Use Default"
		10 : "rock4_1 (dark bricks)"
		11 : "rock4_2 (light stone)"
		12 : "rock3_8 (light vertical)"
		13 : "city5_3 (plaster)"
		14 : "stone1_7b (blue stone)"
		15 : "cliff4 (Black rock)"
		20 : "dung01_3 (dark)"
		21 : "dung01_2 (light)"
		22 : "wizwood1_7 (mouldy)"
		30 : "window1_2 (blue sqr)"
		31 : "window01_4 (red)"
		32 : "window02_1 (yellow)"
		40 : "metal1_2 (gen brown)"
		41 : "metal4_5"
		42 : "metal7_7"
		50 : "wbrick1_5 (large brown)"
		51 : "city2_3 (small sewer)"
		52 : "city6_8 (small drywall)"
		53 : "wiz1_4 (large white)"
		54 : "city2_1 (small red)"
		60 : "ceramic_1"
	]
	noise(string) : "Custom Sound - Initial Break"
	noise1(string) : "Custom Sound - Impact 1"
	noise2(string) : "Custom Sound - Impact 2"
	noise3(string) : "Custom Sound - Impact 3"
	noise4(string) : "Custom Sound - Impact 4"
	brkobj1(string) : "Custom Model - Rubble 1"
	brkobj2(string) : "Custom Model - Rubble 2"
	brkobj3(string) : "Custom Model - Rubble 3"
	brkobj4(string) : "Custom Model - Rubble 4"
	health(integer) : "Health"
	count(integer) : "Rubble Qty to spawn (def=4)"
	cnt(choices) : "Rubble (Random) to spawn" = [
		-1 : "No random qty"
		 0 : "Default = 4"
	]
	dmg(integer) : "Explosive Radius Damage"
	pos1(string) : "Particle colour" : : "x=start particle colour, y=random range, z=quantity"
	brkvelbase(string) : "Velocity Base (def=50 50 100)"
	brkveladd(string) : "Velocity Extra (def=100 100 150)"
	brkavel(integer) : "Velocity Rotation (def=200)"
	brkfade(integer) : "Rubble fade timer (def=4)"
	brkmondmg(integer) : "Damage multiplier for monster damage"
	angles(vector) : "Direction to throw rubble"
	brktrigjump(integer) : "Monster jump only"
	brktrigmissile(integer) : "Explosive dmg only"
	brktrignoplayer(integer) : "No player damage"
	brkgravity(integer) : "Rubble gravity (def=1)"
]

//----------------------------------------------------------------------
@SolidClass base(Break) = func_breakable : "Breakable" []
@PointClass base(Break) = func_breakable_spawner : "Breakable Spawner" []
@SolidClass base(Appearflags,targetname) = func_breakable_wall : "Breakable Wall" [
	spawnflags(flags) = [
		1 : "Start ON" : 0 : "Start visual to player"
		2 : "Solid" : 0 : "Has player collision"
		4 : "Fadeout" : 0 : "Fadeaway once triggered"
	]
	wait(choices) : "Trigger Quantity" = [
		0 : "Multiple Times"
		-1: "Once Only"
	]
	waitmin(integer) : "Fadeout timer"
]
@PointClass base(Appearflags,targetname) size(-8 -8 -8, 8 8 8) = 
	trigger_monsterbreak : "Trigger monster + breakable" [
	spawnflags(flags) = [
		1 : "No Delay" : 0 : "Instantly trigger"
		2 : "Wake Animation" : 0 : "Use Special monster animation"
	]
	target(string) : "targets func_breakable"
	target2(string) : "targets Monster"
	wait(integer) : "Time Delay before firing breakable (def=0.2s)"
]
@PointClass base(Appearflags,targetname) size(-4 -4 -4, 4 4 4) = 
	trigger_explode : "Trigger Sprite Explosion" [
	spawnflags(flags) = [
		2 : "NoParticles" : 0 : "No old particle effect"
	]
	dmg(integer) : "Explosive radius (def=40)"
	delay(integer) : "Delay before explosion"
	noise(string) : "Explosive Wav file to play"
	wait(integer) : "Re-trigger (def=-1 trig once)"
	style(choices) : "Explosion Type" = [
		0 : "Explosive"
		1 : "Plasma"
		2 : "Poison"
		3 : "Electric"
		4 : "Burst (Smoke/Flame/Poison)"
	]
	height(choices) : "Explosion Size" = [
		1 : "Small (Default)"
		2 : "Medium"
		3 : "Large"
		-1 : "Random"
	]
]

	
//======================================================================
//
// MONSTERS
//
//======================================================================
@baseclass base(Appearflags,targetname,target,target2) 
flags(Angle) color(220 0 0) offset(0 0 24) = Monster [
	spawnflags(flags) = [
		1 : "Ambush" : 0 : "Wakeup when player is seen"
		2 : "No Random" : 1 : "Turn off randomized monster types"
		8 : "Silent" : 0 : "No wakeup sight sound"
		16 : "NoIdle" : 0 : "No idle sounds (cupboard monster)"
		32 : "NoGFX" : 0 : "No teleport spawn effect or sound"
		64 : "Delay" : 0 : "Will wait for trigger before spawning"
		128 : "Angry" : 0 : "Will spawn angry at the player"
	]
]
@baseclass base(Monster) size(-16 -16 -24, 16 16 16) = MonTiny []
@baseclass base(Monster) size(-32 -32 -24, 32 32 40) = MonDog []
@baseclass base(Monster) size(-32 -32 -24, 32 32 64) = MonDemon []
@baseclass base(Monster) size(-16 -16 -24, 16 16 24) = MonFish []
@baseclass base(Monster) size(-32 -32 -24, 32 32 64) = MonGolem []
@baseclass base(Monster) size(-16 -16 -24, 16 16 32) = MonShort []
@baseclass base(Monster) size(-16 -16 -24, 16 16 40) = MonTall []
@baseclass base(Monster) size(-32 -32 -24, 32 32 64) = MonWide []
@baseclass base(Monster) size(-32 -32 -24, 32 32 64) = MonGiant []
@baseclass base(Monster) size(-32 -32 -24, 32 32 64) = MonMassive []

//----------------------------------------------------------------------
@PointClass base(MonShort) studio("progs/soldier.mdl") skin(0) = monster_army : "Soldier" []
@PointClass base(MonShort) studio("progs/soldier1.mdl") skin(0) = monster_army_rocket : "Nail Soldier(AD Compat)" []
@PointClass base(MonShort) studio("progs/soldier1.mdl") skin(1) = monster_army_spike : "Nail Soldier" []

//----------------------------------------------------------------------
@PointClass base(MonDemon) studio("progs/demon.mdl") = monster_demon1 : "Fiend" []
@PointClass base(MonDog) studio("progs/dog.mdl") = monster_dog : "Nasty Doggie" []

//----------------------------------------------------------------------
@PointClass base(MonFish) studio("progs/fish.mdl") = monster_fish : "Rotfish" []

@PointClass base(MonFish) studio("progs/hydra.mdl") = monster_hydra : "Hydra" []

//----------------------------------------------------------------------
@PointClass base(MonTall) studio("progs/enforcer.mdl") skin(0) = monster_enforcer : "Enforcer" []
@PointClass base(MonTall) studio("progs/enforcer.mdl") skin(1) = monster_defender : "Defender" []
@PointClass base(MonShort) studio("progs/mon_jim.mdl") = monster_jim : "Jim"
[ spawnflags(flags) = [ 4 : "Rockets" : 0 ] ]

//----------------------------------------------------------------------
@PointClass base(MonShort) studio("progs/knight.mdl") = monster_knight : "Knight" [
	spawnflags(flags) = [ 
		2 : "Stone Statue" : 0
		4 : "Not Frozen" : 0
	]
	frame(integer) : "Statue Pose def=44" :  : "Override statue pose"
	pos1(string) : "Statue Idle range" :  : "X->Y, Z=0 ; Idle animation range to pick from"
]
@PointClass base(MonTall) studio("progs/mon_hknight.mdl") = monster_hell_knight : "Hell knight" [
	spawnflags(flags) = [ 
		2 : "Stone Statue" : 0
		4 : "Not Frozen" : 0
	]
	frame(integer) : "Statue Pose def=73" :  : "Override statue pose"
	pos1(string) : "Statue Idle range" :  : "X->Y, Z=0 ; Idle animation range to pick from"
]
@PointClass base(MonShort) studio("progs/warlord.mdl") = monster_hell_knight2 : "Warlord" []
@PointClass base(MonTall) studio("progs/mon_dfury.mdl") = monster_dfury : "Fury Knight" []

//----------------------------------------------------------------------
@PointClass base(MonWide) studio("progs/ogre.mdl") = monster_ogre : "Ogre" []

//----------------------------------------------------------------------
@PointClass base(MonGiant) studio("progs/yakman.mdl") skin(1) = monster_minotaur : "Minotaur (AD Compat)"[]
@PointClass base(MonGiant) studio("progs/yakman.mdl") skin(1) = monster_yakman : "Minotaur"[]
@PointClass base(MonWide) studio("progs/shalrath.mdl") = monster_shalrath : "Shalrath"
[ spawnflags(flags) = [ 4 : "Minions" : 0 ] ]
@PointClass base(MonGiant) studio("progs/mon_freddie.mdl") = monster_freddie : "Freddie" [
	spawnflags(flags) = [
		2 : "Laser" : 0
	]
]

@PointClass base(MonWide) studio("progs/shalrath_boss.mdl") = monster_shalrath_boss : "Shalrath Queen" []

@PointClass base(MonWide) studio("progs/dfury_boss.mdl") = monster_dfury_boss : "Brigade Commander"
[
	spawnflags(flags) = [ 
		2 : "Stone Statue" : 0
	]
]

//----------------------------------------------------------------------
@PointClass base(MonMassive) studio("progs/shambler.mdl") = monster_shambler : "Shambler" []

//----------------------------------------------------------------------
@PointClass base(MonTiny) studio("progs/spider.mdl") = monster_spider : "Spider" [
	spawnflags(flags) = [ 
		4 : "On Ceiling" : 0 
	]
]
@PointClass base(MonTiny) studio("progs/voreling.mdl") = monster_voreling : "Voreling" [
	spawnflags(flags) = [
		4 : "On Ceiling" : 0
	]
]

@PointClass base(MonTiny) studio("progs/scor.mdl") = monster_scourge : "Scourge" []
//----------------------------------------------------------------------
@PointClass base(MonTall) studio("progs/tarbaby.mdl") = monster_tarbaby : "Tarbaby" []

@PointClass base(MonShort) studio("progs/reiver.mdl") skin(0) = monster_reiver : "Nail Soldier" []

//----------------------------------------------------------------------
@PointClass base(MonTall) studio("progs/wizard.mdl") = monster_wizard : "Wizard"[]
@PointClass base(MonWide) studio("progs/wrath.mdl") = monster_wrath : "Wraith/Wrath"[]
@PointClass base(MonTall) studio("progs/afrit.mdl") = monster_gargoyle : "Afrit (AD Compat)" []
@PointClass base(MonTall) studio("progs/afrit.mdl") = monster_afrit : "Afrit (AD Compat)" []

//----------------------------------------------------------------------
@PointClass base(MonShort) studio("progs/mon_zombiek.mdl") = monster_zombiek : "Zombie Knight"
[ spawnflags(flags) = [ 4 : "On Floor" : 0 ] ]
@PointClass base(MonShort) studio("progs/zombie.mdl") = monster_zombie : "Zombie"
[ spawnflags(flags) = [ 
		1 : "Crucified" : 0
		2 : "Ambush" : 0
		4 : "OnFloor" : 0
	]
	sequence(choices) : "Pose (editor)" = [
		0 : "Normal"
		173 : "OnFloor"
		192: "Crucified"
	]
]

//----------------------------------------------------------------------
@PointClass base(MonTiny) studio("progs/mon_gargoyle.mdl") = monster_minotaurminion : "Gargoyle Minion" []
@PointClass base(MonTiny) studio("progs/mon_voreling.mdl") = monster_shalrathminion : "Voreling Minion" []

//----------------------------------------------------------------------
@PointClass size(-80 -80 -24, 80 80 256) studio("progs/boss.mdl") = monster_boss : "Chthon" []
@PointClass size(-80 -80 -24, 80 80 256) studio("progs/slimeboss.mdl") = monster_boss : "Acid boss" []
@PointClass size(-128 -128 -24, 128 128 192) studio("progs/oldone.mdl") = monster_oldone : "Shub-Niggurath" []

@PointClass size(-12 -12 -24, 12 12 60) studio("progs/oldone_tent.mdl") = monster_oldone_tentacle : "Shub tendrils" []
	
@PointClass base(Appearflags, targetname) size(-16 -16 -16, 16 16 16) =
	event_lightning : "Chthon's lightning" []
@PointClass base(Appearflags, targetname) size(-8 -8 -8, 8 8 8) =
	misc_teleporttrain : "Shub-Niggurath Flying ball" []

//======================================================================
//
// New Editor/Compiler features
//
//======================================================================
@SolidClass = func_detail : "Detail brush" []
@SolidClass = func_detail_illusionary : "Detail brush, no collision" []
@SolidClass = func_detail_wall : "Detail brush, no bsp splits" []
@SolidClass = func_detail_fence : "Detail brush, for fence textures" []

@SolidClass = func_group : "Group brush" []


//MP STUFF

//CTF


@PointClass size(-8 -8 -8, 8 8 40) studio("progs/flag.mdl")  = item_flagblue : "Blue Flag" []

@PointClass size(-8 -8 -8, 8 8 40) studio("progs/flag.mdl") skin(0) = item_flagred : "Red Flag" []

@PointClass base(PlayerClass) = info_player_team1 : "CTF - Red Player Start" []

@PointClass base(PlayerClass) = info_player_team2 : "CTF - Blue Player Start" []

//======================================================================
//
// Broken / Removed Stuff
//
//======================================================================
//@PointClass size(-8 -8 -8, 8 8 8) = item_weapon : "Not used anymore"  []
//@PointClass size(-8 -8 -8, 8 8 8) = misc_noisemaker : "Not used anymore"  []
//@PointClass size(-8 -8 -8, 8 8 8) = noclass : "Not used anymore"  []
//@PointClass size(-8 -8 -8, 8 8 8) = test_spawn : "Not used anymore"  []
//@PointClass size(-8 -8 -8, 8 8 8) = testplayerstart : "Not used anymore"  []
//@PointClass size(-8 -8 -8, 8 8 8) = viewthing : "Not used anymore"  []
//@SolidClass = test_fodder : "Not used anymore"  []
//@SolidClass = test_goaway : "Not used anymore"  []
//@SolidClass = test_teleport : "Not used anymore"  []
@SolidClass = trigger_onlyregistered : "Not used anymore" []

