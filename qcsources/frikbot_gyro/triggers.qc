/*  Copyright (C) 1996-1997  Id Software, Inc.

    This program is free software; you can redistribute it and/or modify
    it under the terms of the GNU General Public License as published by
    the Free Software Foundation; either version 2 of the License, or
    (at your option) any later version.

    This program is distributed in the hope that it will be useful,
    but WITHOUT ANY WARRANTY; without even the implied warranty of
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
    GNU General Public License for more details.

    You should have received a copy of the GNU General Public License
    along with this program; if not, write to the Free Software
    Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA 02111-1307 USA

    See file, 'COPYING', for details.
*/

//qb: from urqp
// 1999-11-05 Corrected size of "info_teleport_destination" entity for QuakeED
// 1999-10-30 Double/Inverted telefrag fix by Lord Sméagol/Athos Kryn
//            recognizing time on spawning tdeath
// 1999-10-16 Allowing angles for trigger_teleport by Maddes
//            saving and clearing angles
// 1999-05-02 Teleporting objects by Lord Sméagol/Maddes
//            teleporting objects
// 1998-07-26 Pentagram telefrag fix by Zoid/Maddes
//            recognizing active pentagram of teleported player too
// 1998-07-07 incorrect teleport workaround by Maddes
//            replacing objerror() with developer messages in teleport_touch()
// 1998-07-03 hurt_touch fix by Robert Field
//            fixing hurt_touch(), now every player in the entity gets hurt every second

#include "directives.qh"

entity s;


void() trigger_reactivate =
{
	self.solid = SOLID_TRIGGER;
};

//=============================================================================

float	SPAWNFLAG_NOMESSAGE = 1;
float	SPAWNFLAG_NOTOUCH = 1;

// the wait time has passed, so set back up for another activation
void() multi_wait =
{
	if (self.max_health)
	{
		self.health = self.max_health;
		self.takedamage = DAMAGE_YES;
		self.solid = SOLID_BBOX;
	}
};


// the trigger was just touched/killed/used
// self.enemy should be set to the activator so it can be held through a delay
// so wait for the delay time before firing
void() multi_trigger =
{
	if (self.nextthink > time)
	{
		return;		// allready been triggered
	}

	if (self.classname == "trigger_secret")
	{
		if (self.enemy.classname != "player")
			return;
		found_secrets = found_secrets + 1;
		WriteByte (MSG_ALL, SVC_FOUNDSECRET);
	}

	if (self.noise != "")
		sound (self, CHAN_VOICE, self.noise, 1, ATTN_NORM);

// don't trigger again until reset
	self.takedamage = DAMAGE_NO;

	activator = self.enemy;
	
	SUB_UseTargets();

	if (self.wait > 0)	
	{
		self.think = multi_wait;
		self.nextthink = time + self.wait;
	}

	else
	{	// we can't just remove (self) here, because this is a touch function
		// called while C code is looping through area links...
		self.touch = SUB_Null;
		self.nextthink = time + 0.1;
		self.think = SUB_Remove;
	}
};

void() multi_killed =
{
	self.enemy = damage_attacker;
	multi_trigger();
};

void() multi_use =
{
	self.enemy = activator;
	multi_trigger();
};

void() multi_touch =
{
	if (other.classname != "player")
		return;
	
	// if the trigger has an angles field, check player's facing direction
	if (self.movedir != '0 0 0')
	{
		makevectors (other.angles);
		if (v_forward * self.movedir < 0)
			return;		// not facing the right way
	}
	
	self.enemy = other;
	multi_trigger ();
};

/*QUAKED trigger_multiple (.5 .5 .5) ? notouch
Variable sized repeatable trigger.  Must be targeted at one or more entities.  If "health" is set, the trigger must be killed to activate each time.
If "delay" is set, the trigger waits some time after activating before firing.
"wait" : Seconds between triggerings. (.2 default)
If notouch is set, the trigger is only fired by other entities, not by touching.
NOTOUCH has been obsoleted by trigger_relay!
sounds
1)	secret
2)	beep beep
3)	large switch
4)
set "message" to text string
*/
void() trigger_multiple =
{
	if (self.sounds == 1)
	{
		precache_sound ("misc/secret.wav");
		self.noise = "misc/secret.wav";
	}

	else if (self.sounds == 2)
	{
		precache_sound ("misc/talk.wav");
		self.noise = "misc/talk.wav";
	}

	else if (self.sounds == 3)
	{
		precache_sound ("misc/trigger1.wav");
		self.noise = "misc/trigger1.wav";
	}
	
	if (!self.wait)
		self.wait = 0.2;

	self.use = multi_use;

	InitTrigger ();

	if (self.health)
	{
		if (self.spawnflags & SPAWNFLAG_NOTOUCH)
			objerror ("health and notouch don't make sense\n");

		self.max_health = self.health;
		self.th_die = multi_killed;
		self.takedamage = DAMAGE_YES;
		self.solid = SOLID_BBOX;
		setorigin (self, self.origin);	// make sure it links into the world
	}
	else
	{
		if ( !(self.spawnflags & SPAWNFLAG_NOTOUCH) )
		{
			self.touch = multi_touch;
		}
	}
};


/*QUAKED trigger_once (.5 .5 .5) ? notouch
Variable sized trigger. Triggers once, then removes itself.  You must set the key "target" to the name of another object in the level that has a matching
"targetname".  If "health" is set, the trigger must be killed to activate.
If notouch is set, the trigger is only fired by other entities, not by touching.
if "killtarget" is set, any objects that have a matching "target" will be removed when the trigger is fired.
if "angle" is set, the trigger will only fire when someone is facing the direction of the angle.  Use "360" for an angle of 0.
sounds
1)	secret
2)	beep beep
3)	large switch
4)
set "message" to text string
*/
void() trigger_once =
{
	self.wait = -1;
	trigger_multiple();
};

//=============================================================================

/*QUAKED trigger_relay (.5 .5 .5) (-8 -8 -8) (8 8 8)
This fixed size trigger cannot be touched, it can only be fired by other events.  It can contain killtargets, targets, delays, and messages.
*/
void() trigger_relay =
{
	self.use = SUB_UseTargets;
};


//=============================================================================

/*QUAKED trigger_secret (.5 .5 .5) ?
secret counter trigger
sounds
1)	secret
2)	beep beep
3)
4)
set "message" to text string
*/
void() trigger_secret =
{
	total_secrets = total_secrets + 1;
	self.wait = -1;

	if (!self.message)
		self.message = "You found a secret area!";

	if (!self.sounds)
		self.sounds = 1;
	
	if (self.sounds == 1)
	{
		precache_sound ("misc/secret.wav");
		self.noise = "misc/secret.wav";
	}
	else if (self.sounds == 2)
	{
		precache_sound ("misc/talk.wav");
		self.noise = "misc/talk.wav";
	}

	trigger_multiple ();
};

//=============================================================================


void() counter_use =
{
	self.count = self.count - 1;

	if (self.count < 0)
		return;
	
	if (self.count != 0)
	{
		if (activator.classname == "player" && (self.spawnflags & SPAWNFLAG_NOMESSAGE) == 0)
		{
			if (self.count >= 4)
				centerprint (activator, "There are more to go...");

			else if (self.count == 3)
				centerprint (activator, "Only 3 more to go...");

			else if (self.count == 2)
				centerprint (activator, "Only 2 more to go...");

			else
				centerprint (activator, "Only 1 more to go...");
		}

		return;
	}
	
	if (activator.classname == "player" && (self.spawnflags & SPAWNFLAG_NOMESSAGE) == 0)
		centerprint(activator, "Sequence completed!");

	self.enemy = activator;
	multi_trigger ();
};

/*QUAKED trigger_counter (.5 .5 .5) ? nomessage
Acts as an intermediary for an action that takes multiple inputs.

If nomessage is not set, t will print "1 more.. " etc when triggered and "sequence complete" when finished.

After the counter has been triggered "count" times (default 2), it will fire all of it's targets and remove itself.
*/
void() trigger_counter =
{
	self.wait = -1;

	if (!self.count)
		self.count = 2;

	self.use = counter_use;
};


/*
==============================================================================

TELEPORT TRIGGERS

==============================================================================
*/

float	PLAYER_ONLY	= 1;
float	SILENT = 2;

void() play_teleport =
{
	local	float v;
	local	string tmpstr;

	v = random() * 5;

	if (v < 1)
		tmpstr = "misc/r_tele1.wav";

	else if (v < 2)
		tmpstr = "misc/r_tele2.wav";

	else if (v < 3)
		tmpstr = "misc/r_tele3.wav";

	else if (v < 4)
		tmpstr = "misc/r_tele4.wav";

	else
		tmpstr = "misc/r_tele5.wav";

	sound (self, CHAN_VOICE, tmpstr, 1, ATTN_NORM);
	remove (self);
};

void(vector org) spawn_tfog =
{
	s = spawn ();
	s.origin = org;
	s.nextthink = time + 0.2;
	s.think = play_teleport;

	WriteByte (MSG_BROADCAST, SVC_TEMPENTITY);
	WriteByte (MSG_BROADCAST, TE_TELEPORT);
	WriteCoord (MSG_BROADCAST, org_x);
	WriteCoord (MSG_BROADCAST, org_y);
	WriteCoord (MSG_BROADCAST, org_z);
};


void() tdeath_touch =
{
	if (other == self.owner)
		return;

// frag anyone who teleports in on top of an invincible player
	if (other.classname == "player")
	{
// 1998-07-26 Pentagram telefrag fix by Zoid/Maddes  start
		if (self.owner.classname != "player")
		{	// other monsters explode themselves
			T_Damage (self.owner, self, self, 50000);
			return;
		}
// 1998-07-26 Pentagram telefrag fix by Zoid/Maddes  end

// 1999-10-30 Double/Inverted telefrag fix by Lord Sméagol/Athos Kryn  start
		if (other.attack_state >= self.attack_state)
			return;
// 1999-10-30 Double/Inverted telefrag fix by Lord Sméagol/Athos Kryn  end

		if (other.invincible_finished > time)
// 1998-07-26 Pentagram telefrag fix by Zoid/Maddes  start
		{	//player on spot has active pentagram
			if (self.owner.invincible_finished > time)
			{	// teleported player has active pentagram too
				// can happen often in deathmatch 4
				// and levels with more than one pentagram
				self.classname = "teledeath3";
				other.invincible_finished = 0;
				T_Damage (other, self, self, 50000);	// kill player on spot
/* 1998-07-26 only telefrag player on spot by Maddes
				local entity other2;
				other2 = self.owner;
				self.owner = other;
				other2.invincible_finished = 0;
				T_Damage (other2, self, self, 50000);	// kill teleported player
*/
			}
			else	// 1998-07-26 only telefrag player on spot by Maddes
			{	// 1998-07-26 only telefrag player on spot by Maddes
// 1998-07-26 Pentagram telefrag fix by Zoid/Maddes  end

			self.classname = "teledeath2";

// 1998-07-26 Pentagram telefrag fix by Zoid/Maddes  start
				T_Damage (self.owner, self, self, 50000);
			}	// 1998-07-26 only telefrag player on spot by Maddes
			return;
		}

/*
		if (self.owner.classname != "player")
		{	// other monsters explode themselves
			T_Damage (self.owner, self, self, 50000);
			return;
		}
*/
// 1998-07-26 Pentagram telefrag fix by Zoid/Maddes  end
	}

	if (other.health)
	{
		T_Damage (other, self, self, 50000);
	}
};


void(vector org, entity death_owner) spawn_tdeath =
{
	local entity	death;

	death = spawn();
	death.classname = "teledeath";
	death.movetype = MOVETYPE_NONE;
	death.solid = SOLID_TRIGGER;
	death.angles = '0 0 0';
	setsize (death, death_owner.mins - '1 1 1', death_owner.maxs + '1 1 1');
	setorigin (death, org);
	death.touch = tdeath_touch;
	death.nextthink = time + 0.2;
	death.think = SUB_Remove;
	death.owner = death_owner;
	death.attack_state = death_owner.attack_state = time;	// 1999-10-30 Double/Inverted telefrag fix by Lord Sméagol/Athos Kryn
	
	force_retouch = 2;		// make sure even still objects get hit
};

void() teleport_touch =
{
	local entity	t;
	local vector	org;

	if (self.targetname != "")
	{
		if (self.nextthink < time)
		{
			return;		// not fired yet
		}
	}

        //qbism: this bit from Ursader inside3d tute to allow missiles
	if (other.teleport_time > time) return;  // Can't teleport before time is up

        if ( (other.classname != "missile") && (other.classname != "grenade") &&
             (other.classname != "player") && (other.classname != "spike") &&
             (other.classname != "gib") && (other.classname != "weapon_supershotgun") &&    
             (other.classname != "weapon_grenadelauncher") && (other.classname != "weapon_supernailgun") &&
             (other.classname != "weapon_nailgun") && (other.classname != "weapon_lightning") &&
             (other.classname != "weapon_rocketlauncher") && (other.classname != "") )
                return;

	// only teleport living creatures
	if (other.health <= 0 || other.solid != SOLID_SLIDEBOX)
		return;

	SUB_UseTargets ();

	// put a tfog where the player was
	spawn_tfog (other.origin);

	t = find (world, targetname, self.target);
// 1998-07-07 incorrect teleport workaround by Maddes  start
	if ( (!t)
	|| ((t.classname != "info_teleport_destination") && (t.classname != "misc_teleporttrain")) )
//		objerror ("couldn't find target");
	{
		dprint ("OBJECT ERROR in teleport_touch():\n");
		dprint ("couldn't find target\n");
		if (developer)
			eprint (self);	// not a developer message :(
//		remove (self);	// be careful it's not necessary
//		dprint ("OBJECT REMOVED\n");
		return;		// otherwise player lands anywhere/gets stucked
        }

// put a tfog where the player was
	spawn_tfog (other.origin);
// 1998-07-07 incorrect teleport workaround by Maddes  end

// 1999-05-02 Teleporting objects by Lord Sméagol/Maddes  start
	// Get current movement direction of object as angle
	other.angles = vectoangles(other.velocity);

	local float	relangle;
	relangle = 0;

	if (!self.mangle)	// teleporter without angle
	{
		// find a "info_teleport_destination" entity near the teleporter
		// and use its mirrored angle as a reference angle for aiming objects
		local float	dist;
		local entity	thing, tdest;

		dist = 128;
		tdest = world;
		thing = find(world, classname, "info_teleport_destination");
		while (thing)
		{
			if (vlen(thing.origin - other.origin) < dist)	// other as trigger brush has no origin
			{
				dist = vlen(thing.origin - other.origin);
				tdest = thing;
			}
			thing = find(thing, classname, "info_teleport_destination");
		}

		if (tdest)
			relangle = anglemod(other.angles_y - tdest.mangle_y + 180);	// player to mirrored destination
	}
	else
		relangle = anglemod(other.angles_y - self.mangle_y);	// player to trigger_teleport

	// mirror if from behind
	if ((relangle > 90) && (relangle < 270))
		relangle = anglemod(90 - ( relangle - 90));

//	other.angles_y = t.mangle_y;
	other.angles_y = anglemod(t.mangle_y + relangle);

	// Thrown packs caused problems if aimed
	if (other.health || other.movetype == MOVETYPE_TOSS)
		other.angles = t.mangle;
// 1999-05-02 Teleporting objects by Lord Sméagol/Maddes  end

	// spawn a tfog flash in front of the destination
// 1999-05-02 Teleporting objects by Lord Sméagol/Maddes  start
//	makevectors(t.mangle);
	makevectors(other.angles);
	v_forward_z = 0 - v_forward_z;
// 1999-05-02 Teleporting objects by Lord Sméagol/Maddes  end
	org = t.origin + 32 * v_forward;

// 1999-05-02 Teleporting objects by Lord Sméagol/Maddes  start
	if (other.health)
		setorigin (other, t.origin);    // Moved to here
	else
		// Mainly for packs; they could cause a crash
		setorigin (other, org);

	other.velocity = v_forward * vlen(other.velocity);
// 1999-05-02 Teleporting objects by Lord Sméagol/Maddes  end

	spawn_tfog (org);
	spawn_tdeath(t.origin, other);

	// move the player and lock him down for a little while
// 1999-05-02 Teleporting objects by Lord Sméagol/Maddes  start
/*
	if (!other.health)
	{
		other.origin = t.origin;
		other.velocity = (v_forward * other.velocity_x) + (v_forward * other.velocity_y);
		return;
	}

	setorigin (other, t.origin);
	other.angles = t.mangle;

	if (other.classname == "player")
*/
	if (other.flags & FL_CLIENT)
// 1999-05-02 Teleporting objects by Lord Sméagol/Maddes  end
	{
		other.fixangle = 1;		// turn this way immediately
		other.teleport_time = time + 0.7;
//		other.attack_state = time;	// 1999-10-30 Double/Inverted telefrag fix by Lord Sméagol/Athos Kryn
//                                              // already done in spawn_tdeath()
// 1999-05-02 Teleporting objects by Lord Sméagol/Maddes  start
/*
		if (other.flags & FL_ONGROUND)
			other.flags = other.flags - FL_ONGROUND;
*/
// 1999-05-02 Teleporting objects by Lord Sméagol/Maddes  end
		other.velocity = v_forward * 300;
	}

	other.flags = other.flags - other.flags & FL_ONGROUND;
};

/*QUAKED info_teleport_destination (.5 .5 .5) (-8 -8 -8) (8 8 32)
This is the destination marker for a teleporter.  It should have a "targetname" field with the same value as a teleporter's "target" field.
*/
void() info_teleport_destination =
{
	// this does nothing, just serves as a target spot
	self.mangle = self.angles;
	self.angles = '0 0 0';
	self.model = "";
	self.origin = self.origin + '0 0 27';

	if (!self.targetname)
		objerror ("no targetname");
};

void() teleport_use =
{
	self.nextthink = time + 0.2;
	force_retouch = 2;		// make sure even still objects get hit
	self.think = SUB_Null;
};

/*QUAKED trigger_teleport (.5 .5 .5) ? PLAYER_ONLY SILENT
Any object touching this will be transported to the corresponding info_teleport_destination entity. You must set the "target" field, and create an object with a "targetname" field that matches.

If the trigger_teleport has a targetname, it will only teleport entities when it has been fired.
*/
void() trigger_teleport =
{
	local vector o;

// 1999-10-16 Allowing angles for trigger_teleport by Maddes  start
	self.mangle = self.angles;
	self.angles = '0 0 0';
// 1999-10-16 Allowing angles for trigger_teleport by Maddes  end

	InitTrigger ();
	self.flags = self.flags | FL_ITEM;  //qbism:  from Ursader
	self.touch = teleport_touch;

	// find the destination 
	if (!self.target)
		objerror ("no target");
	self.use = teleport_use;

	if (!(self.spawnflags & SILENT))
	{
		precache_sound ("ambience/hum1.wav");
		o = (self.mins + self.maxs)*0.5;
		ambientsound (o, "ambience/hum1.wav",0.5 , ATTN_STATIC);
	}
};

/*
==============================================================================

trigger_setskill

==============================================================================
*/

void() trigger_skill_touch =
{
	if (other.classname != "player")
		return;
		
	cvar_set ("skill", self.message);
};

/*QUAKED trigger_setskill (.5 .5 .5) ?
sets skill level to the value of "message".
Only used on start map.
*/
void() trigger_setskill =
{
	InitTrigger ();
	self.touch = trigger_skill_touch;
};


/*
==============================================================================

ONLY REGISTERED TRIGGERS

==============================================================================
*/

void() trigger_onlyregistered_touch =
{
	if (other.classname != "player")
		return;

	if (self.attack_finished > time)
		return;

	self.attack_finished = time + 2;

	if (cvar("registered"))
	{
		self.message = "";
		SUB_UseTargets ();
		remove (self);
	}
	else
	{
		if (self.message != "")
		{
			centerprint (other, self.message);
			sound (other, CHAN_BODY, "misc/talk.wav", 1, ATTN_NORM);
		}
	}
};

/*QUAKED trigger_onlyregistered (.5 .5 .5) ?
Only fires if playing the registered version, otherwise prints the message
*/
void() trigger_onlyregistered =
{
	precache_sound ("misc/talk.wav");
	InitTrigger ();
	self.touch = trigger_onlyregistered_touch;
};

//============================================================================

// 1998-07-03 hurt_touch fix by Robert Field  start
/*
void() hurt_on =
{
	self.solid = SOLID_TRIGGER;
	self.nextthink = -1;
};
*/
// 1998-07-03 hurt_touch fix by Robert Field  end

void() hurt_touch =
{
	if (other.takedamage)
	{
// 1998-07-03 hurt_touch fix by Robert Field  start
//		self.solid = SOLID_NOT;
		if (time != self.hurt_together_time)
			if (time < self.hurt_nextthink)
				return;
// 1998-07-03 hurt_touch fix by Robert Field  end
		T_Damage (other, self, self, self.dmg);
// 1998-07-03 hurt_touch fix by Robert Field  start
//		self.think = hurt_on;
//		self.nextthink = time + 1;
		self.hurt_together_time = time;
		self.hurt_nextthink = time + 1;
// 1998-07-03 hurt_touch fix by Robert Field  end
	}

	return;
};

/*QUAKED trigger_hurt (.5 .5 .5) ?
Any object touching this will be hurt
set dmg to damage amount
defalt dmg = 5
*/
void() trigger_hurt =
{
	InitTrigger ();
	self.touch = hurt_touch;

	if (!self.dmg)
		self.dmg = 5;
};

//============================================================================

float PUSH_ONCE = 1;

void() trigger_push_touch =
{
	if (other.classname == "grenade")
		other.velocity = self.speed * self.movedir * 10;

	else if (other.health > 0)
	{
		other.velocity = self.speed * self.movedir * 10;

		if (other.classname == "player")
		{
			if (other.fly_sound < time)
			{
				other.fly_sound = time + 1.5;
				sound (other, CHAN_AUTO, "ambience/windfly.wav", 1, ATTN_NORM);
			}
		}
	}

	if (self.spawnflags & PUSH_ONCE)
		remove(self);
};


/*QUAKED trigger_push (.5 .5 .5) ? PUSH_ONCE
Pushes the player
*/
void() trigger_push =
{
	InitTrigger ();
	precache_sound ("ambience/windfly.wav");
	self.touch = trigger_push_touch;

	if (!self.speed)
		self.speed = 1000;
};

//============================================================================

void() trigger_monsterjump_touch =
{
	if ( other.flags & (FL_MONSTER | FL_FLY | FL_SWIM) != FL_MONSTER )
		return;

	// set XY even if not on ground, so the jump will clear lips
	other.velocity_x = self.movedir_x * self.speed;
	other.velocity_y = self.movedir_y * self.speed;
	
	if ( !(other.flags & FL_ONGROUND) )
		return;
	
	other.flags = other.flags - FL_ONGROUND;

	other.velocity_z = self.height;
};

/*QUAKED trigger_monsterjump (.5 .5 .5) ?
Walking monsters that touch this will jump in the direction of the trigger's angle
"speed" default to 200, the speed thrown forward
"height" default to 200, the speed thrown upwards
*/
void() trigger_monsterjump =
{
	if (!self.speed)
		self.speed = 200;

	if (!self.height)
		self.height = 200;

	if (self.angles == '0 0 0')
		self.angles = '0 360 0';

	InitTrigger ();
	self.touch = trigger_monsterjump_touch;
};

