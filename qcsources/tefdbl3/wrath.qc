void() wrath_stand1 = [1, wrath_stand1]
{
	ai_stand();
};

void() wrath_walk01 = [1, wrath_walk02]
{
	ai_walk(FL_CLIENT);
};

void() wrath_walk02 = [2, wrath_walk03]
{
	ai_walk(FL_CLIENT);
};

void() wrath_walk03 = [3, wrath_walk04]
{
	ai_walk(FL_CLIENT);
};

void() wrath_walk04 = [4, wrath_walk05]
{
	ai_walk(FL_CLIENT);
};

void() wrath_walk05 = [5, wrath_walk06]
{
	ai_walk(FL_CLIENT);
};

void() wrath_walk06 = [6, wrath_walk07]
{
	ai_walk(FL_CLIENT);
};

void() wrath_walk07 = [7, wrath_walk08]
{
	ai_walk(FL_CLIENT);
};

void() wrath_walk08 = [8, wrath_walk09]
{
	ai_walk(FL_CLIENT);
};

void() wrath_walk09 = [9, wrath_walk10]
{
	ai_walk(FL_CLIENT);
};

void() wrath_walk10 = [10, wrath_walk11]
{
	ai_walk(FL_CLIENT);
};

void() wrath_walk11 = [11, wrath_walk12]
{
	ai_walk(FL_CLIENT);
};

void() wrath_walk12 = [12, wrath_walk01]
{
	ai_walk(FL_CLIENT);
};

void() wrath_run01 = [1, wrath_run02]
{
	ai_run(TE_EXPLOSION2);
};

void() wrath_run02 = [2, wrath_run03]
{
	ai_run(TE_EXPLOSION2);
};

void() wrath_run03 = [3, wrath_run04]
{
	ai_run(TE_EXPLOSION2);
};

void() wrath_run04 = [4, wrath_run05]
{
	ai_run(TE_EXPLOSION2);
};

void() wrath_run05 = [5, wrath_run06]
{
	ai_run(TE_EXPLOSION2);
};

void() wrath_run06 = [6, wrath_run07]
{
	ai_run(TE_EXPLOSION2);
};

void() wrath_run07 = [7, wrath_run08]
{
	ai_run(TE_EXPLOSION2);
};

void() wrath_run08 = [8, wrath_run09]
{
	ai_run(TE_EXPLOSION2);
};

void() wrath_run09 = [9, wrath_run10]
{
	ai_run(TE_EXPLOSION2);
};

void() wrath_run10 = [10, wrath_run11]
{
	ai_run(TE_EXPLOSION2);
};

void() wrath_run11 = [11, wrath_run12]
{
	ai_run(TE_EXPLOSION2);
};

void() wrath_run12 = [12, wrath_run01]
{
	ai_run(TE_EXPLOSION2);
};

void() wrath_at_a01 = [13, wrath_at_a02]
{
	ai_charge(TE_EXPLOSION2);
};

void() wrath_at_a02 = [14, wrath_at_a03]
{
	ai_charge(TE_EXPLOSION2);
};

void() wrath_at_a03 = [15, wrath_at_a04]
{
	ai_charge(TE_EXPLOSION2);
};

void() wrath_at_a04 = [16, wrath_at_a05]
{
	ai_charge(TE_EXPLOSION2);
};

void() wrath_at_a05 = [17, wrath_at_a06]
{
	ai_charge(TE_EXPLOSION2);
};

void() wrath_at_a06 = [18, wrath_at_a07]
{
	ai_charge(TE_EXPLOSION2);
};

void() wrath_at_a07 = [19, wrath_at_a08]
{
	ai_charge(TE_EXPLOSION2);
};

void() wrath_at_a08 = [20, wrath_at_a09]
{
	ai_charge(TE_EXPLOSION2);
};

void() wrath_at_a09 = [21, wrath_at_a10]
{
	ai_charge(TE_EXPLOSION2);
};

void() wrath_at_a10 = [22, wrath_at_a11]
{
	ai_charge(TE_EXPLOSION2);
};

void() wrath_at_a11 = [23, wrath_at_a12]
{
	WrathMissile(1);
};

void() wrath_at_a12 = [24, wrath_at_a13]
{
	ai_charge(TE_EXPLOSION2);
};

void() wrath_at_a13 = [25, wrath_at_a14]
{
	ai_charge(TE_EXPLOSION2);
};

void() wrath_at_a14 = [26, wrath_run01]
{
	ai_charge(TE_EXPLOSION2);
};

void() wrath_at_b01 = [27, wrath_at_b02]
{
	ai_charge(TE_EXPLOSION2);
};

void() wrath_at_b02 = [28, wrath_at_b03]
{
	ai_charge(TE_EXPLOSION2);
};

void() wrath_at_b03 = [29, wrath_at_b04]
{
	ai_charge(TE_EXPLOSION2);
};

void() wrath_at_b04 = [30, wrath_at_b05]
{
	ai_charge(TE_EXPLOSION2);
};

void() wrath_at_b05 = [31, wrath_at_b06]
{
	ai_charge(TE_EXPLOSION2);
};

void() wrath_at_b06 = [32, wrath_at_b07]
{
	WrathMissile(FL_SWIM);
};

void() wrath_at_b07 = [33, wrath_at_b08]
{
	ai_charge(TE_EXPLOSION2);
};

void() wrath_at_b08 = [34, wrath_at_b09]
{
	ai_charge(TE_EXPLOSION2);
};

void() wrath_at_b09 = [35, wrath_at_b10]
{
	ai_charge(TE_EXPLOSION2);
};

void() wrath_at_b10 = [36, wrath_at_b11]
{
	ai_charge(TE_EXPLOSION2);
};

void() wrath_at_b11 = [37, wrath_at_b12]
{
	ai_charge(TE_EXPLOSION2);
};

void() wrath_at_b12 = [38, wrath_at_b13]
{
	ai_charge(TE_EXPLOSION2);
};

void() wrath_at_b13 = [39, wrath_run01]
{
	ai_charge(TE_EXPLOSION2);
};

void() wrath_at_c01 = [40, wrath_at_c02]
{
	ai_charge(TE_EXPLOSION2);
};

void() wrath_at_c02 = [41, wrath_at_c03]
{
	ai_charge(TE_EXPLOSION2);
};

void() wrath_at_c03 = [42, wrath_at_c04]
{
	ai_charge(TE_EXPLOSION2);
};

void() wrath_at_c04 = [43, wrath_at_c05]
{
	ai_charge(TE_EXPLOSION2);
};

void() wrath_at_c05 = [44, wrath_at_c06]
{
	ai_charge(TE_EXPLOSION2);
};

void() wrath_at_c06 = [45, wrath_at_c07]
{
	ai_charge(TE_EXPLOSION2);
};

void() wrath_at_c07 = [46, wrath_at_c08]
{
	WrathMissile(MOVETYPE_WALK);
};

void() wrath_at_c08 = [47, wrath_at_c09]
{
	ai_charge(TE_EXPLOSION2);
};

void() wrath_at_c09 = [48, wrath_at_c10]
{
	ai_charge(TE_EXPLOSION2);
};

void() wrath_at_c10 = [49, wrath_at_c11]
{
	ai_charge(TE_EXPLOSION2);
};

void() wrath_at_c11 = [50, wrath_at_c12]
{
	ai_charge(TE_EXPLOSION2);
};

void() wrath_at_c12 = [51, wrath_at_c13]
{
	ai_charge(TE_EXPLOSION2);
};

void() wrath_at_c13 = [52, wrath_at_c14]
{
	ai_charge(TE_EXPLOSION2);
};

void() wrath_at_c14 = [53, wrath_at_c15]
{
	ai_charge(TE_EXPLOSION2);
};

void() wrath_at_c15 = [54, wrath_run01]
{
	ai_charge(TE_EXPLOSION2);
};

void() wrath_attack = 
{
	local float r;
	r = random();
	if (r < 0.25)
	{
		wrath_at_a01();
	}
	else
	{
		if (r < 0.65)
		{
			wrath_at_b01();
		}
		else
		{
			wrath_at_c01();
		}
	}
	sound(self, CHAN_VOICE, "wrath/watt.wav", 1, ATTN_NORM);
};

void() wrath_pn_a01 = [55, wrath_pn_a02]
{
};

void() wrath_pn_a02 = [56, wrath_pn_a03]
{
};

void() wrath_pn_a03 = [57, wrath_pn_a04]
{
};

void() wrath_pn_a04 = [58, wrath_pn_a05]
{
};

void() wrath_pn_a05 = [59, wrath_pn_a06]
{
};

void() wrath_pn_a06 = [60, wrath_run01]
{
};

void() wrath_pn_b01 = [61, wrath_pn_b02]
{
};

void() wrath_pn_b02 = [62, wrath_pn_b03]
{
};

void() wrath_pn_b03 = [63, wrath_pn_b04]
{
};

void() wrath_pn_b04 = [64, wrath_pn_b05]
{
};

void() wrath_pn_b05 = [65, wrath_pn_b06]
{
};

void() wrath_pn_b06 = [66, wrath_pn_b07]
{
};

void() wrath_pn_b07 = [67, wrath_pn_b08]
{
};

void() wrath_pn_b08 = [68, wrath_pn_b09]
{
};

void() wrath_pn_b09 = [69, wrath_pn_b10]
{
};

void() wrath_pn_b10 = [70, wrath_pn_b11]
{
};

void() wrath_pn_b11 = [71, wrath_run01]
{
};

void() wrath_pain = 
{
	local float r;
	if (self.pain_finished > time)
	{
		return;
	}
	r = random();
	if (r > 0.1)
	{
		self.pain_finished = time + 0.5;
		return;
	}
	if (r < 0.07)
	{
		wrath_pn_a01();
	}
	else
	{
		wrath_pn_b01();
	}
	self.pain_finished = time + MOVETYPE_WALK;
	sound(self, CHAN_VOICE, "wrath/wpain.wav", 1, ATTN_NORM);
};

void() wrath_die02 = [73, wrath_die03]
{
	sound(self, CHAN_VOICE, "wrath/wdthc.wav", 1, ATTN_NORM);
};

void() wrath_die03 = [74, wrath_die04]
{
};

void() wrath_die04 = [75, wrath_die05]
{
};

void() wrath_die05 = [76, wrath_die07]
{
};

void() wrath_die07 = [78, wrath_die09]
{
};

void() wrath_die09 = [80, wrath_die11]
{
};

void() wrath_die11 = [82, wrath_die13]
{
};

void() wrath_die13 = [84, wrath_die15]
{
};

void() wrath_die15 = [86, wrath_die15]
{
	ThrowGib("progs/wrthgib1.mdl", self.health);
	ThrowGib("progs/wrthgib2.mdl", self.health);
	ThrowGib("progs/wrthgib3.mdl", self.health);
	T_RadiusDamage(self, self, 80, world);
	self.origin = self.origin + '0 0 24';
	WriteByte(MSG_BROADCAST, SVC_TEMPENTITY);
	WriteByte(MSG_BROADCAST, TE_EXPLOSION2);
	WriteCoord(MSG_BROADCAST, self.origin_x);
	WriteCoord(MSG_BROADCAST, self.origin_y);
	WriteCoord(MSG_BROADCAST, self.origin_z);
	WriteByte(MSG_BROADCAST, 0);
	WriteByte(MSG_BROADCAST, MOVETYPE_STEP);
	remove(self);
};

void() monster_wrath = 
{
	if (deathmatch)
	{
		remove(self);
		return;
	}
	precache_model("progs/wrath.mdl");
	precache_model("progs/w_ball.mdl");
	precache_model("progs/wrthgib1.mdl");
	precache_model("progs/wrthgib2.mdl");
	precache_model("progs/wrthgib3.mdl");
	precache_sound("wrath/wsee.wav");
	precache_sound("wrath/watt.wav");
	precache_sound("wrath/wpain.wav");
	precache_sound("wrath/wdthc.wav");
	self.solid = SOLID_SLIDEBOX;
	self.movetype = MOVETYPE_STEP;
	setmodel(self, "progs/wrath.mdl");
	setsize(self, VEC_HULL_MIN, VEC_HULL_MAX);
	self.health = 400;
	self.yaw_speed = 35;
	self.th_stand = wrath_stand1;
	self.th_walk = wrath_walk01;
	self.th_run = wrath_run01;
	self.th_missile = wrath_attack;
	self.th_pain = wrath_pain;
	self.th_die = wrath_die02;
	flymonster_start();
};

void(float AttackNumber) WrathMissile = 
{
	local entity missile;
	local vector dir;
	local vector org;
	local float dist;
	local float flytime;
	dir = normalize(self.enemy.origin + '0 0 10' - self.origin);
	dist = vlen(self.enemy.origin - self.origin);
	flytime = dist * 0.002000;
	if (flytime < 0.1)
	{
		flytime = 0.1;
	}
	self.effects = self.effects | EF_MUZZLEFLASH;
	makevectors(self.angles);
	missile = spawn();
	missile.owner = self;
	missile.solid = SOLID_BBOX;
	missile.movetype = MOVETYPE_FLYMISSILE;
	setmodel(missile, "progs/w_ball.mdl");
	setsize(missile, VEC_ORIGIN, VEC_ORIGIN);
	if (AttackNumber == 1)
	{
		org = self.origin + v_forward * 20 + v_up * TE_EXPLOSION2;
	}
	else
	{
		if (AttackNumber == FL_SWIM)
		{
			org = self.origin + v_forward * 18 + v_up * MOVETYPE_BOUNCE;
		}
		else
		{
			if (AttackNumber == MOVETYPE_WALK)
			{
				org = self.origin + v_forward * TE_EXPLOSION2 + v_up * TE_EXPLOSION2 + v_right * 20;
			}
			else
			{
				if (AttackNumber == MOVETYPE_STEP)
				{
					org = self.origin + v_forward * 20 + v_up * FL_INWATER;
				}
			}
		}
	}
	setorigin(missile, org);
	missile.velocity = dir * 400;
	missile.avelocity = '300 300 300';
	missile.enemy = self.enemy;
	missile.touch = WrathMissileTouch;
	missile.nextthink = time + 0.1;
	missile.think = WrathHome;
	self.attack_finished = time + FL_SWIM;
};

void() WrathHome = 
{
	if (self.enemy.health < 1)
	{
		remove(self);
		return;
	}
	if (skill == MOVETYPE_WALK)
	{
		ai_track(self.enemy, 550);
	}
	else
	{
		ai_track(self.enemy, 400);
	}
	self.nextthink = time + 0.1;
	self.think = WrathHome;
};

void() WrathMissileTouch = 
{
	if (other == self.owner || other.classname == "monster_wrath" || other.classname == "monster_super_wrath")
	{
		remove(self);
		return;
	}
	if (other.classname == "monster_zombie")
	{
		T_Damage(other, self, self, 110);
	}
	T_RadiusDamage(self, self.owner, 20, world);
	sound(self, CHAN_WEAPON, "weapons/r_exp3.wav", 1, ATTN_NORM);
	WriteByte(MSG_BROADCAST, SVC_TEMPENTITY);
	WriteByte(MSG_BROADCAST, TE_EXPLOSION);
	WriteCoord(MSG_BROADCAST, self.origin_x);
	WriteCoord(MSG_BROADCAST, self.origin_y);
	WriteCoord(MSG_BROADCAST, self.origin_z);
	self.velocity = VEC_ORIGIN;
	self.touch = SUB_Null;
	setmodel(self, "progs/s_explod.spr");
	self.solid = SOLID_NOT;
	s_explode1();
};

