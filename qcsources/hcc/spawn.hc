float ENT_WORLD   =  0.00000;
float ENT_CHAIR   =  1.00000;
float ENT_BARSTOOL   =  2.00000;
float ENT_BOOKOPEN   =  3.00000;
float ENT_BOOKCLOSED   =  4.00000;
float ENT_TREEDEAD   =  5.00000;
float ENT_TREE   =  6.00000;
float ENT_TREETOP   =  7.00000;
float ENT_CART   =  8.00000;
float ENT_CHEST1   =  9.00000;
float ENT_CHEST2   =  10.00000;
float ENT_BOULDER   =  11.00000;
float ENT_SWORD   =  12.00000;
float ENT_BALLISTA   =  13.00000;
float ENT_BELL   =  14.00000;
float ENT_STATUE_MUMMYHEAD   =  15.00000;
float ENT_POT1   =  16.00000;
float ENT_POT2   =  17.00000;
float ENT_POT3   =  18.00000;
float ENT_STATUE_TUT   =  19.00000;
float ENT_FLAG   =  20.00000;
float ENT_STATUE_SNAKE   =  21.00000;
float ENT_HEDGE1   =  22.00000;
float ENT_HEDGE2   =  23.00000;
float ENT_HEDGE3   =  24.00000;
float ENT_FOUNTAIN   =  25.00000;
float ENT_BUSH1   =  26.00000;
float ENT_TOMBSTONE1   =  27.00000;
float ENT_TOMBSTONE2   =  28.00000;
float ENT_CAULDRON   =  29.00000;
float ENT_SKULLSTICK   =  30.00000;
float ENT_BEEFSLAB   =  31.00000;
float ENT_SEAWEED   =  32.00000;
float ENT_MUMMY   =  33.00000;
float ENT_ARCHER   =  34.00000;
float ENT_MUMMY_ARM   =  35.00000;
float ENT_MUMMY_LEG   =  36.00000;
float ENT_MUMMY_FIRE   =  37.00000;
float ENT_MUMMY_MISSILE   =  38.00000;
float ENT_WEAPON42_ART   =  39.00000;
float ENT_WEAPON41_ART   =  40.00000;
float ENT_WEAPON3_ART   =  41.00000;
float ENT_WEAPON2_ART   =  42.00000;
float ENT_SWIPE   =  43.00000;
float ENT_VORP_MISSILE   =  44.00000;
float ENT_AXE_BLADE   =  45.00000;
float ENT_STATUE_LION   =  46.00000;
float ENT_CORPSE2   =  47.00000;
float ENT_CORPSE1   =  48.00000;
float ENT_BENCH   =  49.00000;
float ENT_FENCE   =  50.00000;
float ENT_STATUE_ANGEL   =  51.00000;
float ENT_SHEEP   =  52.00000;
float ENT_BARREL   =  53.00000;
float ENT_WEB   =  54.00000;
float ENT_STATUE_MUMMY_HEAD   =  55.00000;
float ENT_STATUE_MUMMY_BODY   =  56.00000;
float ENT_GLYPH   =  57.00000;
float ENT_FANGEL   =  58.00000;
float ENT_STATUE_ATHENA   =  59.00000;
float ENT_STATUE_NEPTUNE   =  60.00000;
float ENT_BONEPILE   =  61.00000;
float ENT_CHEST3   =  62.00000;
float ENT_STATUE_CAESAR   =  63.00000;
float ENT_TELEPORT   =  64.00000;
float ENT_STATUE_SNAKE_COIL   =  65.00000;
float ENT_SKULL   =  66.00000;
float ENT_PEW   =  67.00000;
float ENT_STATUE_OLMEC   =  68.00000;
float ENT_STATUE_MARS   =  69.00000;
float ENT_PLAYERHEAD   =  70.00000;
float ENT_STATUE_KING   =  71.00000;
float ENT_PLANT_GENERIC   =  72.00000;
float ENT_PLANT_MESO   =  73.00000;
float ENT_PLANT_ROME   =  74.00000;
float ENT_FANGEL_HEAD   =  75.00000;
float SPAWNVALU_SIZE   =  6.00000;
float MASS_OFS   =  1.00000;
float MOVETYPE_OFS   =  2.00000;
float SOLIDTYPE_OFS   =  3.00000;
float THINGTYPE_OFS   =  4.00000;
float DAMAGETYPE_OFS   =  5.00000;
float entity_spawnvalues [456]   = { 25.00000,
    3.00000,    0.00000,    0.00000,    2.00000,
    1.00000,    25.00000,    3.00000,    13.00000,
    3.00000,    2.00000,    1.00000,    25.00000,
    3.00000,    13.00000,    3.00000,    2.00000,
    1.00000,    20.00000,    0.00000,    0.00000,
    3.00000,    1.00000,    1.00000,    20.00000,
    0.00000,    0.00000,    3.00000,    1.00000,
    1.00000,    1000.00000,    99999.00000,    0.00000,
    2.00000,    2.00000,    1.00000,    1000.00000,
    99999.00000,    0.00000,    2.00000,    11.00000,
    1.00000,    1000.00000,    99999.00000,    0.00000,
    2.00000,    7.00000,    1.00000,    25.00000,
    7.00000,    4.00000,    3.00000,    2.00000,
    1.00000,    25.00000,    10.00000,    4.00000,
    3.00000,    2.00000,    1.00000,    25.00000,
    10.00000,    4.00000,    3.00000,    2.00000,
    1.00000,    75.00000,    200.00000,    10.00000,
    2.00000,    1.00000,    1.00000,    50.00000,
    1.00000,    4.00000,    3.00000,    3.00000,
    1.00000,    0.00000,    99999.00000,    4.00000,
    3.00000,    2.00000,    1.00000,    250.00000,
    1000.00000,    0.00000,    3.00000,    3.00000,
    1.00000,    200.00000,    15.00000,    4.00000,
    3.00000,    9.00000,    1.00000,    10.00000,
    100.00000,    4.00000,    3.00000,    6.00000,
    1.00000,    10.00000,    100.00000,    4.00000,
    3.00000,    6.00000,    1.00000,    10.00000,
    100.00000,    4.00000,    3.00000,    6.00000,
    1.00000,    1000.00000,    2000.00000,    4.00000,
    3.00000,    9.00000,    1.00000,    50.00000,
    1000.00000,    0.00000,    3.00000,    15.00000,
    1.00000,    100.00000,    200.00000,    0.00000,
    3.00000,    9.00000,    1.00000,    20.00000,
    200.00000,    0.00000,    3.00000,    11.00000,
    1.00000,    20.00000,    200.00000,    0.00000,
    3.00000,    11.00000,    1.00000,    20.00000,
    200.00000,    0.00000,    3.00000,    11.00000,
    1.00000,    20.00000,    200.00000,    0.00000,
    3.00000,    1.00000,    1.00000,    20.00000,
    200.00000,    0.00000,    3.00000,    11.00000,
    1.00000,    20.00000,    200.00000,    0.00000,
    3.00000,    1.00000,    1.00000,    20.00000,
    200.00000,    0.00000,    3.00000,    1.00000,
    1.00000,    50.00000,    15.00000,    4.00000,
    3.00000,    3.00000,    1.00000,    20.00000,
    15.00000,    0.00000,    3.00000,    2.00000,
    1.00000,    50.00000,    15.00000,    0.00000,
    3.00000,    4.00000,    1.00000,    0.00000,
    0.00000,    0.00000,    0.00000,    7.00000,
    1.00000,    150.00000,    8.00000,    4.00000,
    3.00000,    4.00000,    1.00000,    80.00000,
    12.00000,    4.00000,    3.00000,    4.00000,
    1.00000,    0.00000,    8.00000,    10.00000,
    0.00000,    4.00000,    1.00000,    0.00000,
    8.00000,    10.00000,    0.00000,    4.00000,
    1.00000,    0.00000,    0.00000,    0.00000,
    1.00000,    5.00000,    0.00000,    0.00000,
    0.00000,    9.00000,    2.00000,    5.00000,
    0.00000,    0.00000,    0.00000,    0.00000,
    1.00000,    3.00000,    0.00000,    0.00000,
    0.00000,    0.00000,    1.00000,    3.00000,
    0.00000,    0.00000,    0.00000,    0.00000,
    1.00000,    3.00000,    0.00000,    0.00000,
    0.00000,    0.00000,    1.00000,    3.00000,
    0.00000,    0.00000,    0.00000,    0.00000,
    0.00000,    1.00000,    0.00000,    0.00000,
    0.00000,    9.00000,    2.00000,    1.00000,
    0.00000,    0.00000,    0.00000,    11.00000,
    5.00000,    1.00000,    0.00000,    100.00000,
    200.00000,    0.00000,    3.00000,    1.00000,
    1.00000,    20.00000,    200.00000,    4.00000,
    2.00000,    4.00000,    1.00000,    20.00000,
    200.00000,    4.00000,    2.00000,    4.00000,
    1.00000,    25.00000,    8.00000,    4.00000,
    3.00000,    2.00000,    1.00000,    20.00000,
    0.00000,    0.00000,    3.00000,    3.00000,
    1.00000,    150.00000,    500.00000,    0.00000,
    3.00000,    1.00000,    1.00000,    25.00000,
    3.00000,    4.00000,    3.00000,    4.00000,
    1.00000,    25.00000,    20.00000,    13.00000,
    3.00000,    12.00000,    1.00000,    0.00000,
    0.00000,    0.00000,    0.00000,    16.00000,
    0.00000,    200.00000,    150.00000,    0.00000,
    3.00000,    9.00000,    1.00000,    200.00000,
    150.00000,    0.00000,    3.00000,    9.00000,
    1.00000,    0.00000,    0.00000,    9.00000,
    2.00000,    1.00000,    0.00000,    100.00000,
    10.00000,    5.00000,    3.00000,    4.00000,
    1.00000,    200.00000,    0.00000,    0.00000,
    3.00000,    1.00000,    1.00000,    200.00000,
    0.00000,    0.00000,    3.00000,    1.00000,
    1.00000,    50.00000,    0.00000,    0.00000,
    3.00000,    1.00000,    1.00000,    25.00000,
    10.00000,    4.00000,    3.00000,    2.00000,
    1.00000,    200.00000,    0.00000,    0.00000,
    3.00000,    1.00000,    1.00000,    0.00000,
    0.00000,    4.00000,    0.00000,    1.00000,
    0.00000,    200.00000,    9999.00000,    0.00000,
    3.00000,    1.00000,    1.00000,    10.00000,
    3.00000,    0.00000,    3.00000,    6.00000,
    1.00000,    50.00000,    8.00000,    4.00000,
    3.00000,    2.00000,    1.00000,    200.00000,
    0.00000,    0.00000,    3.00000,    1.00000,
    1.00000,    200.00000,    0.00000,    0.00000,
    3.00000,    1.00000,    1.00000,    20.00000,
    0.00000,    4.00000,    3.00000,    4.00000,
    1.00000,    200.00000,    0.00000,    0.00000,
    3.00000,    1.00000,    1.00000,    10.00000,
    9999.00000,    0.00000,    3.00000,    7.00000,
    1.00000,    10.00000,    20.00000,    4.00000,
    3.00000,    6.00000,    1.00000,    10.00000,
    50.00000,    4.00000,    3.00000,    6.00000,
    1.00000,    10.00000,    3.00000,    10.00000,
    3.00000,    4.00000,    1.00000};
float BOX_SIZE   =  2.00000;
float BMAX_OFS   =  1.00000;
vector entity_box [152]   = { '0.00000 0.00000 0.00000',
    '0.00000 0.00000 0.00000',    '-10.00000 -10.00000 0.00000',    '10.00000 10.00000 40.00000',    '-10.00000 -10.00000 0.00000',
    '10.00000 10.00000 32.00000',    '-8.00000 -8.00000 0.00000',    '8.00000 8.00000 10.00000',    '-8.00000 -8.00000 0.00000',
    '8.00000 8.00000 10.00000',    '-42.00000 -42.00000 0.00000',    '42.00000 42.00000 160.00000',    '-32.00000 -32.00000 -16.00000',
    '32.00000 32.00000 210.00000',    '-140.00000 -140.00000 -16.00000',    '140.00000 140.00000 120.00000',    '-36.00000 -32.00000 -10.00000',
    '36.00000 75.00000 64.00000',    '-16.00000 -16.00000 0.00000',    '16.00000 16.00000 32.00000',    '-16.00000 -16.00000 0.00000',
    '16.00000 16.00000 32.00000',    '-24.00000 -24.00000 -16.00000',    '24.00000 24.00000 16.00000',    '-16.00000 -16.00000 -8.00000',
    '16.00000 16.00000 8.00000',    '-45.00000 -45.00000 0.00000',    '45.00000 45.00000 60.00000',    '-100.00000 -100.00000 -205.00000',
    '100.00000 100.00000 8.00000',    '-24.00000 -24.00000 0.00000',    '24.00000 24.00000 50.00000',    '-24.00000 -24.00000 0.00000',
    '24.00000 24.00000 60.00000',    '-16.00000 -16.00000 0.00000',    '16.00000 16.00000 40.00000',    '-16.00000 -16.00000 0.00000',
    '16.00000 16.00000 40.00000',    '-36.00000 -36.00000 0.00000',    '36.00000 36.00000 248.00000',    '-16.00000 -16.00000 0.00000',
    '16.00000 16.00000 160.00000',    '-16.00000 -16.00000 0.00000',    '16.00000 16.00000 80.00000',    '-24.00000 -24.00000 0.00000',
    '24.00000 24.00000 80.00000',    '-24.00000 -24.00000 0.00000',    '24.00000 24.00000 80.00000',    '-24.00000 -24.00000 0.00000',
    '24.00000 24.00000 120.00000',    '-24.00000 -24.00000 0.00000',    '24.00000 24.00000 80.00000',    '-16.00000 -16.00000 0.00000',
    '16.00000 16.00000 40.00000',    '-24.00000 -24.00000 0.00000',    '24.00000 24.00000 60.00000',    '-16.00000 -16.00000 0.00000',
    '16.00000 16.00000 40.00000',    '-16.00000 -16.00000 0.00000',    '16.00000 16.00000 40.00000',    '-16.00000 -16.00000 0.00000',
    '16.00000 16.00000 40.00000',    '-16.00000 -16.00000 0.00000',    '16.00000 16.00000 40.00000',    '-8.00000 -8.00000 0.00000',
    '8.00000 8.00000 32.00000',    '-16.00000 -16.00000 0.00000',    '16.00000 16.00000 50.00000',    '-16.00000 -16.00000 0.00000',
    '16.00000 16.00000 50.00000',    '0.00000 0.00000 0.00000',    '0.00000 0.00000 0.00000',    '0.00000 0.00000 0.00000',
    '0.00000 0.00000 0.00000',    '-8.00000 -8.00000 0.00000',    '8.00000 8.00000 16.00000',    '0.00000 0.00000 0.00000',
    '0.00000 0.00000 0.00000',    '-8.00000 -8.00000 -44.00000',    '8.00000 8.00000 20.00000',    '-8.00000 -8.00000 -44.00000',
    '8.00000 8.00000 20.00000',    '-8.00000 -8.00000 -44.00000',    '8.00000 8.00000 20.00000',    '-8.00000 -8.00000 -44.00000',
    '8.00000 8.00000 20.00000',    '0.00000 0.00000 0.00000',    '0.00000 0.00000 0.00000',    '0.00000 0.00000 0.00000',
    '0.00000 0.00000 0.00000',    '0.00000 0.00000 0.00000',    '0.00000 0.00000 0.00000',    '-56.00000 -14.00000 0.00000',
    '56.00000 14.00000 60.00000',    '-32.00000 -16.00000 0.00000',    '32.00000 16.00000 10.00000',    '-32.00000 -16.00000 0.00000',
    '32.00000 16.00000 10.00000',    '-10.00000 -30.00000 0.00000',    '10.00000 30.00000 40.00000',    '-10.00000 -26.00000 0.00000',
    '10.00000 26.00000 70.00000',    '-60.00000 -40.00000 0.00000',    '60.00000 40.00000 120.00000',    '-16.00000 -16.00000 0.00000',
    '16.00000 16.00000 32.00000',    '-13.00000 -13.00000 0.00000',    '13.00000 13.00000 36.00000',    '-25.00000 -25.00000 -25.00000',
    '25.00000 25.00000 25.00000',    '-26.00000 -26.00000 0.00000',    '26.00000 26.00000 30.00000',    '-26.00000 -26.00000 0.00000',
    '26.00000 26.00000 130.00000',    '0.00000 0.00000 0.00000',    '0.00000 0.00000 0.00000',    '-14.00000 -14.00000 -41.00000',
    '14.00000 14.00000 23.00000',    '-30.00000 -30.00000 0.00000',    '30.00000 30.00000 90.00000',    '-30.00000 -30.00000 0.00000',
    '30.00000 30.00000 100.00000',    '-10.00000 -10.00000 0.00000',    '10.00000 10.00000 10.00000',    '-16.00000 -16.00000 0.00000',
    '16.00000 16.00000 32.00000',    '-16.00000 -16.00000 0.00000',    '16.00000 16.00000 90.00000',    '0.00000 0.00000 0.00000',
    '0.00000 0.00000 0.00000',    '-44.00000 -44.00000 0.00000',    '44.00000 44.00000 90.00000',    '-8.00000 -8.00000 0.00000',
    '8.00000 8.00000 16.00000',    '-16.00000 -40.00000 0.00000',    '16.00000 40.00000 50.00000',    '-40.00000 -40.00000 0.00000',
    '40.00000 40.00000 130.00000',    '-30.00000 -30.00000 0.00000',    '30.00000 30.00000 80.00000',    '-8.00000 -8.00000 0.00000',
    '8.00000 8.00000 16.00000',    '-30.00000 -30.00000 0.00000',    '30.00000 30.00000 120.00000',    '-10.00000 -10.00000 0.00000',
    '10.00000 10.00000 20.00000',    '-10.00000 -10.00000 0.00000',    '10.00000 10.00000 40.00000',    '-24.00000 -24.00000 0.00000',
    '24.00000 24.00000 90.00000',    '-8.00000 -8.00000 0.00000',    '8.00000 8.00000 16.00000'};
void  (vector org)spawn_tfog;

void  (float newscale,entity subject,float mass_flag)ScaleBoundingBox =  {
   if ( !newscale ) {

      return ;

   }
   if ( (newscale > 2.50000) ) {

      dprint ( "Scale can't be bigger than 2.5");
      newscale = subject.scale;
   } else {

      if ( (newscale < 0.01000) ) {

         dprint ( "Scale can't be less than .01");
         newscale = subject.scale;

      }

   }
   self.mins = self.orgnl_mins;
   self.maxs = self.orgnl_maxs;
   self.mins = (self.mins * newscale);
   self.maxs = (self.maxs * newscale);
   setsize ( subject, self.mins, self.maxs);
   if ( !mass_flag ) {

      self.mass = (self.mass * newscale);

   }
};


void  (entity subject,float entity_id,string modelname,void() death_func)CreateEntityNew =  {
local float index1 = 0.00000;
local float index2 = 0.00000;
local vector hold_vect = '0.00000 0.00000 0.00000';
local float mass_flag = 0.00000;
   setmodel ( subject, modelname);
   index1 = (SPAWNVALU_SIZE * entity_id);
   if ( !subject.health ) {

      subject.health = (entity_spawnvalues->index1);

   }
   if ( !subject.mass ) {

      mass_flag = 0.00000;
      subject.mass = (entity_spawnvalues->(index1 + MASS_OFS));
   } else {

      mass_flag = 1.00000;

   }
   subject.movetype = (entity_spawnvalues->(index1 + MOVETYPE_OFS));
   subject.solid = (entity_spawnvalues->(index1 + SOLIDTYPE_OFS));
   subject.thingtype = (entity_spawnvalues->(index1 + THINGTYPE_OFS));
   subject.takedamage = (entity_spawnvalues->(index1 + DAMAGETYPE_OFS));
   index2 = (BOX_SIZE * entity_id);
   if ( ((self.angles_y == 0.00000) || (self.angles_y == 180.00000)) ) {

      subject.orgnl_mins = (entity_box->index2);
      subject.orgnl_maxs = (entity_box->(index2 + BMAX_OFS));
   } else {

      hold_vect = (entity_box->index2);
      subject.orgnl_mins_x = hold_vect_y;
      subject.orgnl_mins_y = hold_vect_x;
      subject.orgnl_mins_z = hold_vect_z;
      hold_vect = (entity_box->(index2 + BMAX_OFS));
      subject.orgnl_maxs_x = hold_vect_y;
      subject.orgnl_maxs_y = hold_vect_x;
      subject.orgnl_maxs_z = hold_vect_z;

   }
   setsize ( subject, subject.orgnl_mins, subject.orgnl_maxs);
   if ( subject.scale ) {

      ScaleBoundingBox ( subject.scale, subject, mass_flag);

   }
   if ( ((subject.maxs_x - subject.mins_x) >= 32.00000) ) {

      subject.hull = 2.00000;

   }
   if ( self.abslight ) {

      self.drawflags |= MLS_ABSLIGHT;

   }
   subject.th_die = death_func;
   if ( (subject.proj_ofs == '0.00000 0.00000 0.00000') ) {

      subject.proj_ofs = '0.00000 0.00000 24.00000';

   }
};


void  (entity spawner,vector spot1,vector spot2,string missilemodel,string missilename,float missileskin,float missilespeed,void() touchfunct)Create_Missile =  {
local vector diff = '0.00000 0.00000 0.00000';
   newmis = spawn ( );
   newmis.owner = spawner;
   newmis.movetype = MOVETYPE_FLYMISSILE;
   newmis.solid = SOLID_BBOX;
   newmis.skin = missileskin;
   makevectors ( spawner.angles);
   diff = normalize ( (spot2 - spot1));
   newmis.velocity = (diff * missilespeed);
   newmis.classname = missilename;
   newmis.angles = vectoangles ( newmis.velocity);
   newmis.touch = touchfunct;
   setmodel ( newmis, missilemodel);
   setsize ( newmis, '0.00000 0.00000 0.00000', '0.00000 0.00000 0.00000');
   setorigin ( newmis, spot1);
   newmis.think = SUB_Remove;
   newmis.nextthink = (time + 2.50000);
};

